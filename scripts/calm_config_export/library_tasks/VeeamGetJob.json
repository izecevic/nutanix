{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "VeeamGetJob",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       11/03/2020\n# task_name:    VeeamGetJob\n# description:  Get Veeam Backup Job\n#               The script retreives a specific job based on a provided job's name\n# input vars:   veeam_job_name\n# output vars:  veeam_job_url\n# endregion\n\n# region capture Calm variables\nusername = \"@@{veeam.username}@@\"\npassword = \"@@{veeam.secret}@@\"\n#veeam_job_name = \"@@{calm_application_name}@@\"  # getting the calm apps job\nveeam_job_name = \"@@{veeam_job_template_name}@@\" # getting the backup template job on veeam\napi_server = \"@@{veeam_endpoint}@@\"\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n        #if (r.content and ('/api/sessionMngr' not in url)):\n        #    print('Response: {}'.format(json.dumps(json.loads(r.content), indent=2)))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/sessionMngr/?v=latest\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to Veeam...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the session_cookie and session_id\nresp_parse = json.loads(resp.content)\nveeam_session_cookie = resp.headers.get('X-RestSvcSessionId')\nveeam_session_id = resp_parse['SessionId']\n# endregion\n\n# region main processing\n# region prepare api call\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/jobs\"\nmethod = \"GET\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n# endregion\n\n# region get jobss\n# make the api call\nprint(\"STEP: Gettings jobs...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the cookie job_url so that it may be captured by Calm.\njob_url = \"\"\nresp_parse = json.loads(resp.content)\nfor job in resp_parse['Refs']:\n    if job['Name'] == veeam_job_name:\n        job_url = job['Href']\n                \nif job_url:\n    print (\"veeam_job_url={}\".format(job_url.rsplit('/', 1)[1])) #get only the last occurence\nelse:\n    print(\"Error: Backup Job \"+veeam_job_name+\" is not present ..\")\n    exit(1)\n# endregion\n# endregion\n\n# region logout\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/logonSessions\"\nmethod = \"DELETE\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n\n# making the call \nprint(\"STEP: Logging out of Veeam...\")\nurl = \"{0}/{1}\".format(url, veeam_session_id)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n# endregion\n\nexit(0)"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "VeeamGetJob",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       11/03/2020\n# task_name:    VeeamGetJob\n# description:  Get Veeam Backup Job\n#               The script retreives a specific job based on a provided job's name\n# input vars:   veeam_job_name\n# output vars:  veeam_job_url\n# endregion\n\n# region capture Calm variables\nusername = \"@@{veeam.username}@@\"\npassword = \"@@{veeam.secret}@@\"\n#veeam_job_name = \"@@{calm_application_name}@@\"  # getting the calm apps job\nveeam_job_name = \"@@{veeam_job_template_name}@@\" # getting the backup template job on veeam\napi_server = \"@@{veeam_endpoint}@@\"\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n        #if (r.content and ('/api/sessionMngr' not in url)):\n        #    print('Response: {}'.format(json.dumps(json.loads(r.content), indent=2)))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/sessionMngr/?v=latest\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to Veeam...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the session_cookie and session_id\nresp_parse = json.loads(resp.content)\nveeam_session_cookie = resp.headers.get('X-RestSvcSessionId')\nveeam_session_id = resp_parse['SessionId']\n# endregion\n\n# region main processing\n# region prepare api call\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/jobs\"\nmethod = \"GET\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n# endregion\n\n# region get jobss\n# make the api call\nprint(\"STEP: Gettings jobs...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the cookie job_url so that it may be captured by Calm.\njob_url = \"\"\nresp_parse = json.loads(resp.content)\nfor job in resp_parse['Refs']:\n    if job['Name'] == veeam_job_name:\n        job_url = job['Href']\n                \nif job_url:\n    print (\"veeam_job_url={}\".format(job_url.rsplit('/', 1)[1])) #get only the last occurence\nelse:\n    print(\"Error: Backup Job \"+veeam_job_name+\" is not present ..\")\n    exit(1)\n# endregion\n# endregion\n\n# region logout\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/logonSessions\"\nmethod = \"DELETE\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n\n# making the call \nprint(\"STEP: Logging out of Veeam...\")\nurl = \"{0}/{1}\".format(url, veeam_session_id)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n# endregion\n\nexit(0)",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150408090191",
    "kind": "app_task",
    "uuid": "ef3f092f-ee38-4971-b89f-984e7f80318d",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150408090191",
    "name": "VeeamGetJob"
  }
}
