{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "SetPowershell",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "npsscript",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "#SetPowershell.ps1\n\n#install the NuGet package provider so that we can install modules from the PowerShell Gallery\ntry {\n    $result = Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force -ErrorAction Stop\n    Write-Host \"INFO: Installed NuGet package provider\"\n}\ncatch {throw \"ERROR: installing package NuGet : $($_.Exception.Message)\"}\nwrite-host \"Package $($result.name):$($result.version) was successfully installed\" -ForegroundColor Green\n\n#trust the Windows PowerShell Gallery repository\ntry {\n    $result = Set-PSRepository -Name \"PSGallery\" -InstallationPolicy Trusted -ErrorAction Stop\n    Write-Host \"INFO: Now trusting the Powershell Gallery\"\n}\ncatch {throw \"ERROR: trusting the PowerShell Gallery repository : $($_.Exception.Message)\"}\n\n$Error.Clear() #required as PoSH populates $error even though the cmdlet completed successfully"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "SetPowershell",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "#SetPowershell.ps1\n\n#install the NuGet package provider so that we can install modules from the PowerShell Gallery\ntry {\n    $result = Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force -ErrorAction Stop\n    Write-Host \"INFO: Installed NuGet package provider\"\n}\ncatch {throw \"ERROR: installing package NuGet : $($_.Exception.Message)\"}\nwrite-host \"Package $($result.name):$($result.version) was successfully installed\" -ForegroundColor Green\n\n#trust the Windows PowerShell Gallery repository\ntry {\n    $result = Set-PSRepository -Name \"PSGallery\" -InstallationPolicy Trusted -ErrorAction Stop\n    Write-Host \"INFO: Now trusting the Powershell Gallery\"\n}\ncatch {throw \"ERROR: trusting the PowerShell Gallery repository : $($_.Exception.Message)\"}\n\n$Error.Clear() #required as PoSH populates $error even though the cmdlet completed successfully",
        "script_type": "npsscript"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150430963097",
    "kind": "app_task",
    "uuid": "f2608bf2-1306-449a-805d-8e3b2253bd9c",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150430963097",
    "name": "SetPowershell"
  }
}
