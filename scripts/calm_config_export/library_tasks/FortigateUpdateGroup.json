{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "FortigateUpdateGroup",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    FortigateUpdateGroup\n# description:  Update fortigate address group with new members\n# input vars:   vm_name, vm_ip, group_name, action\n# output vars:  revision_changed\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\nvm_name = \"@@{platform.spec.name}@@\"\nvm_ip = \"@@{address}@@\"\ngroup_name = \"@@{calm_application_name}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\naction = \"add\"\n# endregion\n\n\ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'plain/text'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        print(resp.content)\n        print(resp.cookies.get('ccsrftoken'))\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\ndef fortiget_update_group(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie,\n                          vm_name, vm_ip, group_name, action, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/addrgrp/\"+ group_name + \"?&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n        'Content-Type': 'application/json',\n    }\n    # endregion\n    \n    # region make api call to get the group members\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        group_members = result['results'][0]\n        if len(group_members['member']) == 1:\n            # region prepare api call to update the group\n            method = \"DELETE\"\n            fortigate_csrf_token = fortigate_csrf_token.replace('\"', '')\n            headers = {\n                'Content-Type': 'application/json',\n                'X-CSRFTOKEN': fortigate_csrf_token\n            }\n            # endregion\n\n            # region make api call\n            # make the API call and capture the results in the variable called \"resp\"\n            print(\"Making a {} API call to {}\".format(method, url))\n            resp = urlreq(url, verb=method, params=json.dumps(group_members),\n                        cookies=fortigate_cookie, headers=headers, verify=False)\n            print(resp.content)\n            # deal with the result/response\n            if resp.ok:\n                print(\"Request was successful. Status code: {}\".format(resp.status_code))\n                result = json.loads(resp.content)\n                print(\"Group {} was deleted\".format(group_name))\n                print(\"revision_changed : {}\".format(result['revision_changed']))\n            else:\n                print(\"Request failed\")\n                print(\"Headers: {}\".format(headers))\n                print('Status code: {}'.format(resp.status_code))\n                print('Response: {}'.format(json.dumps(\n                    json.loads(resp.content), indent=4)))\n                exit(1)\n            # endregion\n            exit(0)\n\n        if action == \"add\":\n            group_members['member'].append({'name': vm_name})\n        else:\n            group_members['member'].remove(\n                {'name': vm_name, 'q_origin_key': vm_name})\n\n        print(json.dumps(group_members))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(\n            json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n    # region prepare api call to update the group\n    method = \"PUT\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"', '')\n    headers = {\n        'Content-Type': 'application/json',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(group_members),\n                  cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"revision_changed : {}\".format(result['revision_changed']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(\n            json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\nfortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\n\nfortiget_update_group(api_server, api_server_port, fortigate_csrf_token,\n                      fortigate_cookie, vm_name, vm_ip, group_name, action, fortigate_vdom)\n"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "FortigateUpdateGroup",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    FortigateUpdateGroup\n# description:  Update fortigate address group with new members\n# input vars:   vm_name, vm_ip, group_name, action\n# output vars:  revision_changed\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\nvm_name = \"@@{platform.spec.name}@@\"\nvm_ip = \"@@{address}@@\"\ngroup_name = \"@@{calm_application_name}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\naction = \"add\"\n# endregion\n\n\ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'plain/text'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        print(resp.content)\n        print(resp.cookies.get('ccsrftoken'))\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\ndef fortiget_update_group(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie,\n                          vm_name, vm_ip, group_name, action, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/addrgrp/\"+ group_name + \"?&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n        'Content-Type': 'application/json',\n    }\n    # endregion\n    \n    # region make api call to get the group members\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        group_members = result['results'][0]\n        if len(group_members['member']) == 1:\n            # region prepare api call to update the group\n            method = \"DELETE\"\n            fortigate_csrf_token = fortigate_csrf_token.replace('\"', '')\n            headers = {\n                'Content-Type': 'application/json',\n                'X-CSRFTOKEN': fortigate_csrf_token\n            }\n            # endregion\n\n            # region make api call\n            # make the API call and capture the results in the variable called \"resp\"\n            print(\"Making a {} API call to {}\".format(method, url))\n            resp = urlreq(url, verb=method, params=json.dumps(group_members),\n                        cookies=fortigate_cookie, headers=headers, verify=False)\n            print(resp.content)\n            # deal with the result/response\n            if resp.ok:\n                print(\"Request was successful. Status code: {}\".format(resp.status_code))\n                result = json.loads(resp.content)\n                print(\"Group {} was deleted\".format(group_name))\n                print(\"revision_changed : {}\".format(result['revision_changed']))\n            else:\n                print(\"Request failed\")\n                print(\"Headers: {}\".format(headers))\n                print('Status code: {}'.format(resp.status_code))\n                print('Response: {}'.format(json.dumps(\n                    json.loads(resp.content), indent=4)))\n                exit(1)\n            # endregion\n            exit(0)\n\n        if action == \"add\":\n            group_members['member'].append({'name': vm_name})\n        else:\n            group_members['member'].remove(\n                {'name': vm_name, 'q_origin_key': vm_name})\n\n        print(json.dumps(group_members))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(\n            json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n    # region prepare api call to update the group\n    method = \"PUT\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"', '')\n    headers = {\n        'Content-Type': 'application/json',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(group_members),\n                  cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"revision_changed : {}\".format(result['revision_changed']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(\n            json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\nfortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\n\nfortiget_update_group(api_server, api_server_port, fortigate_csrf_token,\n                      fortigate_cookie, vm_name, vm_ip, group_name, action, fortigate_vdom)\n",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150241918700",
    "kind": "app_task",
    "uuid": "1bd430ad-3234-4da5-a279-41d55ff5b88e",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150241918700",
    "name": "FortigateUpdateGroup"
  }
}
