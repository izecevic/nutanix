{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "AHV",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "#!/usr/bin/python\n##############################################\n# Name        : AHV.py\n# Author      : Calm Devops\n# Version     : 1.0\n# Description : Script will list all VMs available in a PC and update a VM\n##############################################\nimport requests\nimport json\nimport re\nimport time\nimport sys\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\nclass RestUtilException(Exception):\n    pass\n\ndef _wrap(resp):\n    \"\"\"This function returns json resp if HTTP response is 200 and \n    it accepts session objects function output\n    Returns:\n       str : json string\n    \"\"\"\n    if resp.status_code == 200 :\n        try:\n           return resp.json()\n        except:\n           return None\n    else:\n        try:\n            resp_json = resp.json()\n            if 'message' in resp_json:\n                raise RestUtilException(\"Rest API request failed with error: %s\" % resp_json['message'])\n        except Exception:\n            print(resp)\n            raise RestUtilException(\"Rest API request failed : %s\" % resp.reason)\n\ndef _do_get(url, cookies=None, params=None, auth=None, timeout=120):\n    \"\"\"This function is used to make requests.session.get HTTP call.\n    This function further sends HTTP call response object to wrap function to get json in return\n    Returns:\n       str : json string\n    \"\"\"\n    try:\n        session = RestUtil(BASE_URL).get_session()\n        headers = {'Content-Type': 'application/json'}\n        for i in range(3):\n            resp = session.get(url, params=params,\n                            auth=_auth(), timeout=timeout,\n                            headers=headers,cookies=cookies, verify=False)\n            if resp.status_code in [500,503] :\n                print(\"Sleeping for 60s because of status code\",resp.status_code)\n                time.sleep(60)\n            else:\n                break\n        return _wrap(resp),resp\n    except Exception:\n        print(\"Rest API GET request failed\")\n        raise\n\ndef _do_post(url,params=None, cookies=None,auth=None, timeout=120):\n    \"\"\"This function is used to make requests.session.post HTTP call.\n    This function further sends HTTP call response object to wrap function to get json in return\n    Returns:\n       str : json string\n    \"\"\"\n    try:\n        session = RestUtil(BASE_URL).get_session()\n        headers = {'Content-Type': 'application/json'}\n        for i in range(3):\n            resp = session.post(url, data=json.dumps(params),\n                            auth=_auth(), timeout=timeout,\n                            headers=headers, cookies=cookies, verify=False)\n            if resp.status_code in [500]:\n                time.sleep(300)\n            else:\n                break\n        #print(resp.json())\n        return _wrap(resp),resp\n    except Exception:\n        print(\"Rest API POST request failed\")\n        raise\n\ndef _do_put(url, params=None, auth=None, timeout=120):\n    \"\"\"This function is used to make requests.session.put HTTP call.\n    This function further sends HTTP call response object to wrap function to get json in return\n    Returns:\n       str : json string\n    \"\"\"\n    try:\n        session = RestUtil(BASE_URL).get_session()\n        headers = {'Content-Type': 'application/json'}\n        for i in range(3):\n            resp = session.put(url, data=json.dumps(params),\n                            auth=_auth(), timeout=timeout,\n                            headers=headers, verify=False)\n            if resp.status_code in [500] :\n                time.sleep(300)\n            else:\n                break\n        return _wrap(resp)\n    except Exception:\n        print(\"Rest API PUT request failed\")\n        raise\n\ndef _do_delete(url, params=None, auth=None, timeout=120):\n    \"\"\"This function is used to make requests.session.delete HTTP call.\n    This function further sends HTTP call response object to wrap function to get json in return\n    Returns:\n       str : json string\n    \"\"\"\n    try:\n        session = RestUtil(BASE_URL).get_session()\n        headers = {'Content-Type': 'application/json'}\n        for i in range(3):\n            resp = session.delete(url, auth=_auth(), timeout=timeout,\n                              headers=headers, verify=False)\n            if resp.status_code in [500] :\n                time.sleep(300)\n            else:\n                break\n        return _wrap(resp)\n    except Exception:\n        print(\"Rest API DELETE request failed\")\n        raise\n\ndef _get_session(server):\n    http_req_adapter = requests.adapters.HTTPAdapter(max_retries=3, pool_maxsize=30, pool_connections=1)\n    s = requests.Session()\n    s.mount(server, http_req_adapter)\n    return s\n\nclass RestUtil(object):\n    __instance = None\n    def __new__(cls, server):\n        if RestUtil.__instance is None:\n            RestUtil.__instance = object.__new__(cls)\n        RestUtil.__instance.session = _get_session(server)\n        return RestUtil.__instance\n\n    def get_session(self):\n        return self.session\n\ndef _v3_api_url(path):\n    return BASE_URL+'/api/nutanix/v3'+path\n\ndef _v2_api_url(path):\n    return BASE_URL+'/api/nutanix/v2'+path\n\ndef _auth():\n    return (USER_NAME, PASSWORD)\n\ndef connect(url, user_name, password):\n    global BASE_URL, USER_NAME, PASSWORD\n    BASE_URL = url\n    USER_NAME = user_name\n    PASSWORD = password\n    _s = RestUtil(url)\n\n_url = _v3_api_url\n\npcip=\"<PC_IP>\"\nUSER_NAME=\"<Username>\"\nPASSWORD=\"<Password>\"\nBASE_URL=\"https://\"+pcip+\":9440\"\n\ndef get_cluster_uuid_by_name(name):\n  \"\"\"This function can be used to retrieve cluster uuid by passing name of cluster as an argument\n    Returns:\n       str : json string\n   \"\"\"\n  path = \"/clusters/list\"\n  enable_payload = {\"kind\":\"cluster\",\"sort_attribute\": \"string\",\"length\": 1000,\"sort_order\":\"ASCENDING\", \"offset\": 0 }\n  json_resp,resp = _do_post(_url(path),enable_payload)\n  cluster = [ i['metadata']['uuid'] for i in json_resp['entities'] if i['spec']['name'] == name ]\n  if len(cluster) != 0:\n    cluster_details = { \"cluster_reference\": { 'uuid' : cluster[0] , 'name':name, kind: 'cluster' }}\n    return cluster_details\n\ndef get_image_uuid_by_name(name):\n  \"\"\"This function can be used to retrieve image uuid by passing name of the image  as an argument \n  Returns:\n    str : uuid\n  \"\"\"\n  path = \"/images/list\"\n  enable_payload = {\"kind\":\"image\",\"sort_attribute\": \"string\",\"length\": 1000,\"sort_order\":\"ASCENDING\", \"offset\": 0 }\n  json_resp,resp = _do_post(_url(path),enable_payload)\n  image = [ i['metadata']['uuid'] for i in json_resp['entities'] if i['spec']['name'] == name ]\n  if len(image) != 0:\n    return image[0]\n\ndef get_vm_by_name(name):\n  \"\"\"This function can be used to get vm spec by passing vm name as an argument \n  Returns:\n    str : vm spec \n  \"\"\"\n  json_resp = vm_list()\n  vm = [ i for i in json_resp['entities'] if i['spec']['name'] == name ]\n  if len(vm) != 0:\n    return vm[0]\n\ndef vm_list():\n  \"\"\"This function can be used to get spec of all the vms present on pc \n  Returns:\n    str : vm list spec\n  \"\"\"\n  path = \"/vms/list\"\n  enable_payload = {\"kind\":\"vm\",\"sort_attribute\": \"string\",\"length\": 1000,\"sort_order\":\"ASCENDING\", \"offset\": 0 }\n  json_resp,resp = _do_post(_url(path),enable_payload)\n  return json_resp\n\ndef update_vm(name):\n  \"\"\"This function retrieves vm spec using get_vm_by_name function, updates spec and\n  then calls requests.session.put to update spec of vm\"\"\"\n  vm = get_vm_by_name(name)\n  del vm['status']\n  vm['spec']['resources']['memory_size_mib'] = 1024*3\n  print(vm)\n  uuid = vm['metadata']['uuid']\n  path = \"/vms/\"+uuid\n  _do_put(_url(path),vm)\n\ndef delete_vm(name):\n  \"\"\"This function can be used to delete vm by passing vm name as an argument\"\"\"\n  vm = get_vm_by_name(name)\n  uuid = vm['metadata']['uuid']\n  print(uuid)\n  path = \"/vms/\"+uuid\n  _do_delete(_url(path))\n"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "AHV",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "#!/usr/bin/python\n##############################################\n# Name        : AHV.py\n# Author      : Calm Devops\n# Version     : 1.0\n# Description : Script will list all VMs available in a PC and update a VM\n##############################################\nimport requests\nimport json\nimport re\nimport time\nimport sys\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\nclass RestUtilException(Exception):\n    pass\n\ndef _wrap(resp):\n    \"\"\"This function returns json resp if HTTP response is 200 and \n    it accepts session objects function output\n    Returns:\n       str : json string\n    \"\"\"\n    if resp.status_code == 200 :\n        try:\n           return resp.json()\n        except:\n           return None\n    else:\n        try:\n            resp_json = resp.json()\n            if 'message' in resp_json:\n                raise RestUtilException(\"Rest API request failed with error: %s\" % resp_json['message'])\n        except Exception:\n            print(resp)\n            raise RestUtilException(\"Rest API request failed : %s\" % resp.reason)\n\ndef _do_get(url, cookies=None, params=None, auth=None, timeout=120):\n    \"\"\"This function is used to make requests.session.get HTTP call.\n    This function further sends HTTP call response object to wrap function to get json in return\n    Returns:\n       str : json string\n    \"\"\"\n    try:\n        session = RestUtil(BASE_URL).get_session()\n        headers = {'Content-Type': 'application/json'}\n        for i in range(3):\n            resp = session.get(url, params=params,\n                            auth=_auth(), timeout=timeout,\n                            headers=headers,cookies=cookies, verify=False)\n            if resp.status_code in [500,503] :\n                print(\"Sleeping for 60s because of status code\",resp.status_code)\n                time.sleep(60)\n            else:\n                break\n        return _wrap(resp),resp\n    except Exception:\n        print(\"Rest API GET request failed\")\n        raise\n\ndef _do_post(url,params=None, cookies=None,auth=None, timeout=120):\n    \"\"\"This function is used to make requests.session.post HTTP call.\n    This function further sends HTTP call response object to wrap function to get json in return\n    Returns:\n       str : json string\n    \"\"\"\n    try:\n        session = RestUtil(BASE_URL).get_session()\n        headers = {'Content-Type': 'application/json'}\n        for i in range(3):\n            resp = session.post(url, data=json.dumps(params),\n                            auth=_auth(), timeout=timeout,\n                            headers=headers, cookies=cookies, verify=False)\n            if resp.status_code in [500]:\n                time.sleep(300)\n            else:\n                break\n        #print(resp.json())\n        return _wrap(resp),resp\n    except Exception:\n        print(\"Rest API POST request failed\")\n        raise\n\ndef _do_put(url, params=None, auth=None, timeout=120):\n    \"\"\"This function is used to make requests.session.put HTTP call.\n    This function further sends HTTP call response object to wrap function to get json in return\n    Returns:\n       str : json string\n    \"\"\"\n    try:\n        session = RestUtil(BASE_URL).get_session()\n        headers = {'Content-Type': 'application/json'}\n        for i in range(3):\n            resp = session.put(url, data=json.dumps(params),\n                            auth=_auth(), timeout=timeout,\n                            headers=headers, verify=False)\n            if resp.status_code in [500] :\n                time.sleep(300)\n            else:\n                break\n        return _wrap(resp)\n    except Exception:\n        print(\"Rest API PUT request failed\")\n        raise\n\ndef _do_delete(url, params=None, auth=None, timeout=120):\n    \"\"\"This function is used to make requests.session.delete HTTP call.\n    This function further sends HTTP call response object to wrap function to get json in return\n    Returns:\n       str : json string\n    \"\"\"\n    try:\n        session = RestUtil(BASE_URL).get_session()\n        headers = {'Content-Type': 'application/json'}\n        for i in range(3):\n            resp = session.delete(url, auth=_auth(), timeout=timeout,\n                              headers=headers, verify=False)\n            if resp.status_code in [500] :\n                time.sleep(300)\n            else:\n                break\n        return _wrap(resp)\n    except Exception:\n        print(\"Rest API DELETE request failed\")\n        raise\n\ndef _get_session(server):\n    http_req_adapter = requests.adapters.HTTPAdapter(max_retries=3, pool_maxsize=30, pool_connections=1)\n    s = requests.Session()\n    s.mount(server, http_req_adapter)\n    return s\n\nclass RestUtil(object):\n    __instance = None\n    def __new__(cls, server):\n        if RestUtil.__instance is None:\n            RestUtil.__instance = object.__new__(cls)\n        RestUtil.__instance.session = _get_session(server)\n        return RestUtil.__instance\n\n    def get_session(self):\n        return self.session\n\ndef _v3_api_url(path):\n    return BASE_URL+'/api/nutanix/v3'+path\n\ndef _v2_api_url(path):\n    return BASE_URL+'/api/nutanix/v2'+path\n\ndef _auth():\n    return (USER_NAME, PASSWORD)\n\ndef connect(url, user_name, password):\n    global BASE_URL, USER_NAME, PASSWORD\n    BASE_URL = url\n    USER_NAME = user_name\n    PASSWORD = password\n    _s = RestUtil(url)\n\n_url = _v3_api_url\n\npcip=\"<PC_IP>\"\nUSER_NAME=\"<Username>\"\nPASSWORD=\"<Password>\"\nBASE_URL=\"https://\"+pcip+\":9440\"\n\ndef get_cluster_uuid_by_name(name):\n  \"\"\"This function can be used to retrieve cluster uuid by passing name of cluster as an argument\n    Returns:\n       str : json string\n   \"\"\"\n  path = \"/clusters/list\"\n  enable_payload = {\"kind\":\"cluster\",\"sort_attribute\": \"string\",\"length\": 1000,\"sort_order\":\"ASCENDING\", \"offset\": 0 }\n  json_resp,resp = _do_post(_url(path),enable_payload)\n  cluster = [ i['metadata']['uuid'] for i in json_resp['entities'] if i['spec']['name'] == name ]\n  if len(cluster) != 0:\n    cluster_details = { \"cluster_reference\": { 'uuid' : cluster[0] , 'name':name, kind: 'cluster' }}\n    return cluster_details\n\ndef get_image_uuid_by_name(name):\n  \"\"\"This function can be used to retrieve image uuid by passing name of the image  as an argument \n  Returns:\n    str : uuid\n  \"\"\"\n  path = \"/images/list\"\n  enable_payload = {\"kind\":\"image\",\"sort_attribute\": \"string\",\"length\": 1000,\"sort_order\":\"ASCENDING\", \"offset\": 0 }\n  json_resp,resp = _do_post(_url(path),enable_payload)\n  image = [ i['metadata']['uuid'] for i in json_resp['entities'] if i['spec']['name'] == name ]\n  if len(image) != 0:\n    return image[0]\n\ndef get_vm_by_name(name):\n  \"\"\"This function can be used to get vm spec by passing vm name as an argument \n  Returns:\n    str : vm spec \n  \"\"\"\n  json_resp = vm_list()\n  vm = [ i for i in json_resp['entities'] if i['spec']['name'] == name ]\n  if len(vm) != 0:\n    return vm[0]\n\ndef vm_list():\n  \"\"\"This function can be used to get spec of all the vms present on pc \n  Returns:\n    str : vm list spec\n  \"\"\"\n  path = \"/vms/list\"\n  enable_payload = {\"kind\":\"vm\",\"sort_attribute\": \"string\",\"length\": 1000,\"sort_order\":\"ASCENDING\", \"offset\": 0 }\n  json_resp,resp = _do_post(_url(path),enable_payload)\n  return json_resp\n\ndef update_vm(name):\n  \"\"\"This function retrieves vm spec using get_vm_by_name function, updates spec and\n  then calls requests.session.put to update spec of vm\"\"\"\n  vm = get_vm_by_name(name)\n  del vm['status']\n  vm['spec']['resources']['memory_size_mib'] = 1024*3\n  print(vm)\n  uuid = vm['metadata']['uuid']\n  path = \"/vms/\"+uuid\n  _do_put(_url(path),vm)\n\ndef delete_vm(name):\n  \"\"\"This function can be used to delete vm by passing vm name as an argument\"\"\"\n  vm = get_vm_by_name(name)\n  uuid = vm['metadata']['uuid']\n  print(uuid)\n  path = \"/vms/\"+uuid\n  _do_delete(_url(path))\n",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150113387934",
    "kind": "app_task",
    "uuid": "ad06a5d1-0272-4f4a-8a89-caee5c82a5fc",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150113387934",
    "name": "AHV"
  }
}
