{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "Kubernetes_Worker_Install_and_Configure",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "#!/bin/bash\nset -ex\n\n# - * - Variables and constants.\nKUBE_CLUSTER_NAME=\"@@{KUBE_CLUSTER_NAME}@@\"\nKUBE_VERSION=\"@@{calm_array_VERSION[0]}@@\"\nINTERNAL_IP=\"@@{address}@@\"\nMASTER_IPS=\"@@{all_master_ip_address}@@\"\nMASTER_IP=\"@@{all_master_ip_address[0]}@@\"\nNODE_NAME=\"worker@@{calm_array_index}@@\"\nCLUSTER_SUBNET=\"@@{KUBE_CLUSTER_SUBNET}@@\"\nSERVICE_SUBNET=\"@@{KUBE_SERVICE_SUBNET}@@\"\nKUBE_CLUSTER_DNS=\"@@{KUBE_DNS_IP}@@\"\nDOCKER_VERSION=\"@@{DOCKER_VERSION}@@\"\nSSL_ON=\"@@{SSL_ON}@@\"\nKUBE_CERT_PATH=\"/etc/kubernetes/ssl\"\nKUBE_MANIFEST_PATH=\"/etc/kubernetes/manifests\"\nKUBE_CONFIG_PATH=\"/etc/kubernetes/config\"\nKUBE_CNI_BIN_PATH=\"/opt/cni/bin\"\nKUBE_CNI_CONF_PATH=\"/etc/cni/net.d\"\nETCD_SERVER_PORT=2379\nMASTER_API_HTTPS=6443\n\nSSL_ON=\"${SSL_ON:-no}\"\n\n# -*- Install Kubernetes master\nsudo mkdir -p ${KUBE_CERT_PATH} ${KUBE_MANIFEST_PATH} ${KUBE_CNI_CONF_PATH} ${KUBE_CNI_BIN_PATH} ${KUBE_CONFIG_PATH}\n\ncurl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://github.com/containernetworking/plugins/releases/download/v0.7.5/cni-plugins-amd64-v0.7.5.tgz\ncurl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://storage.googleapis.com/kubernetes-release/release/${KUBE_VERSION}/bin/linux/amd64/kubelet\ncurl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://storage.googleapis.com/kubernetes-release/release/${KUBE_VERSION}/bin/linux/amd64/kubectl\nchmod +x kubelet kubectl\nsudo mv kubelet kubectl /usr/bin/\n\nsudo tar -zxvf cni-plugins-amd64-*.tgz -C ${KUBE_CNI_BIN_PATH}\nrm -rf cni-plugins-amd64-*.tgz\n\nif [ \"${SSL_ON}\" == \"yes\" ]; then\n    echo \"INFO: Downloading cfssl & cfssljson for creating certs.\"\n    HTTP_METHOD=\"https\"\n    curl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n    curl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n    chmod +x cfssl_linux-amd64 cfssljson_linux-amd64\n    sudo mv cfssl_linux-amd64 /usr/local/bin/cfssl\n    sudo mv cfssljson_linux-amd64 /usr/local/bin/cfssljson\nfi\n\n# -*- Configure Kubernetes Worker\ncat <<EOF | sudo tee ${KUBE_CONFIG_PATH}/kubelet-config.yaml\nkind: KubeletConfiguration\napiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    enabled: true\n  x509:\n    clientCAFile: \"${KUBE_CERT_PATH}/ca.pem\"\nauthorization:\n  mode: Webhook\nclusterDomain: \"cluster.local\"\nclusterDNS:\n  - \"${KUBE_CLUSTER_DNS}\"\nstaticPodPath: \"${KUBE_MANIFEST_PATH}\"\npodCIDR: \"${CLUSTER_SUBNET}\"\nruntimeRequestTimeout: \"10m\"\ntlsCertFile: \"${KUBE_CERT_PATH}/${NODE_NAME}.pem\"\ntlsPrivateKeyFile: \"${KUBE_CERT_PATH}/${NODE_NAME}-key.pem\"\nreadOnlyPort: 0\nprotectKernelDefaults: false\nmakeIPTablesUtilChains: true\neventRecordQPS: 0\nkubeletCgroups: \"/systemd/system.slice\"\nevictionHard:\n  memory.available: \"200Mi\"\n  nodefs.available:  \"10%\"\n  nodefs.inodesFree: \"5%\"\nEOF\n\necho \"[Unit]\nDescription=Kubernetes Kubelet\nDocumentation=https://github.com/GoogleCloudPlatform/kubernetes\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nExecStart=/usr/bin/kubelet \\\\\n  --config=${KUBE_CONFIG_PATH}/kubelet-config.yaml \\\\\n  --container-runtime=docker \\\\\n  --kubeconfig=${KUBE_CERT_PATH}/${NODE_NAME}.kubeconfig \\\\\n  --network-plugin=cni \\\\\n  --register-node=true \\\\\n  --runtime-cgroups=/systemd/system.slice \\\\\n  --node-labels 'node-role.kubernetes.io/worker=true' \\\\\n  --node-labels 'beta.kubernetes.io/fluentd-ds-ready=true' \\\\\n  --v=2\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\" | sudo tee /etc/systemd/system/kubelet.service\n\necho \"if \\$programname == 'kubelet' then /var/log/kubelet.log\n& stop\" | sudo tee /etc/rsyslog.d/kubelet.conf\n\ncat <<EOF | sudo tee ${KUBE_CONFIG_PATH}/kube-proxy-config.yaml\nkind: KubeProxyConfiguration\napiVersion: kubeproxy.config.k8s.io/v1alpha1\nclientConnection:\n  kubeconfig: \"${KUBE_CERT_PATH}/kube-proxy.kubeconfig\"\nmode: \"iptables\"\nclusterCIDR: \"${CLUSTER_SUBNET}\"\niptables:\n  masqueradeAll: true\nEOF\n\necho \"apiVersion: v1\nkind: Pod\nmetadata:\n  name: kube-proxy\n  namespace: kube-system\n  labels:\n    k8s-app: kube-proxy\nspec:\n  hostNetwork: true\n  containers:\n  - name: kube-proxy\n    image: gcr.io/google-containers/hyperkube:${KUBE_VERSION}\n    command:\n    - /hyperkube\n    - kube-proxy\n    - --config=${KUBE_CONFIG_PATH}/kube-proxy-config.yaml\n    securityContext:\n      privileged: true\n    volumeMounts:\n    - mountPath: ${KUBE_CERT_PATH}\n      name: ssl-certs-kubernetes\n      readOnly: true\n    - mountPath: /etc/ssl/certs\n      name: ssl-certs-host\n      readOnly: true\n    - mountPath: /lib/modules\n      name: lib-modules-host\n      readOnly: true\n    - mountPath: ${KUBE_CONFIG_PATH}\n      name: kube-config-path\n      readOnly: true\n  volumes:\n  - hostPath:\n      path: ${KUBE_CERT_PATH}\n    name: ssl-certs-kubernetes\n  - hostPath:\n      path: /etc/ssl/certs\n    name: ssl-certs-host\n  - hostPath:\n      path: /lib/modules\n    name: lib-modules-host\n  - hostPath:\n      path: ${KUBE_CONFIG_PATH}\n    name: kube-config-path\" | sudo tee ${KUBE_MANIFEST_PATH}/kube-proxy.yaml\n    \nif [ \"@@{KUBE_CNI_PLUGIN}@@\" == \"canal\" ] ||  [ \"@@{KUBE_CNI_PLUGIN}@@\" == \"calico\" ]; then\n  sudo sed -i '/masqueradeAll/d' ${KUBE_CONFIG_PATH}/kube-proxy-config.yaml\nfi \n\necho '{\n  \"name\": \"cbr0\",\n  \"type\": \"flannel\",\n  \"delegate\": {\n    \"isDefaultGateway\": true\n  }\n}' | sudo tee ${KUBE_CNI_CONF_PATH}/10-flannel.conf\n\nif [ \"${SSL_ON}\" == \"yes\" ]; then\n\n  echo \"@@{CENTOS.secret}@@\" | tee ~/.ssh/id_rsa\n  chmod 600 ~/.ssh/id_rsa\n\n  count=0\n  while [ ! $(ssh -o stricthostkeychecking=no $MASTER_IP \"ls /opt/kube-ssl/encryption-config.yaml 2>/dev/null\") ] ; do  echo \"waiting for certs sleeping 5\" && sleep 5; if [[ $count -eq 600 ]]; then echo \"failed to download certs\" && exit 1; fi; count=$(($count+5)) ; done\n\n  scp -o stricthostkeychecking=no ${MASTER_IP}:/opt/kube-ssl/{ca*.pem,kubernetes*.pem,kube-proxy.kubeconfig,ca-config.json} .\n\n  echo \"{\n    \\\"CN\\\": \\\"system:node:${NODE_NAME}\\\",\n    \\\"key\\\": {\n      \\\"algo\\\": \\\"rsa\\\",\n      \\\"size\\\": 2048\n    },\n    \\\"names\\\": [\n      {\n        \\\"C\\\": \\\"US\\\",\n        \\\"L\\\": \\\"San Jose\\\",\n        \\\"O\\\": \\\"system:nodes\\\",\n        \\\"OU\\\": \\\"Kubernetes The Hard Way\\\",\n        \\\"ST\\\": \\\"California\\\"\n      }\n    ]\n  }\" | tee ${NODE_NAME}-csr.json\n  cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname=${NODE_NAME},${INTERNAL_IP} -profile=client-server ${NODE_NAME}-csr.json | cfssljson -bare ${NODE_NAME}\n\n  kubectl config set-cluster ${KUBE_CLUSTER_NAME} --certificate-authority=ca.pem --embed-certs=true --server=https://${MASTER_IP}:${MASTER_API_HTTPS} --kubeconfig=${NODE_NAME}.kubeconfig\n  kubectl config set-credentials system:node:${NODE_NAME} --client-certificate=${NODE_NAME}.pem --client-key=${NODE_NAME}-key.pem --embed-certs=true --kubeconfig=${NODE_NAME}.kubeconfig\n  kubectl config set-context default --cluster=${KUBE_CLUSTER_NAME} --user=system:node:${NODE_NAME} --kubeconfig=${NODE_NAME}.kubeconfig\n  kubectl config use-context default --kubeconfig=${NODE_NAME}.kubeconfig\n\n  sudo cp *.pem *.kubeconfig ${KUBE_CERT_PATH}/\n  sudo chmod +r ${KUBE_CERT_PATH}/*\n\n  rm -rf ${NODE_NAME}-csr.json\n\nfi\n\nsudo systemctl start kubelet \nsudo systemctl enable kubelet\nsudo systemctl restart rsyslog"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "Kubernetes_Worker_Install_and_Configure",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "#!/bin/bash\nset -ex\n\n# - * - Variables and constants.\nKUBE_CLUSTER_NAME=\"@@{KUBE_CLUSTER_NAME}@@\"\nKUBE_VERSION=\"@@{calm_array_VERSION[0]}@@\"\nINTERNAL_IP=\"@@{address}@@\"\nMASTER_IPS=\"@@{all_master_ip_address}@@\"\nMASTER_IP=\"@@{all_master_ip_address[0]}@@\"\nNODE_NAME=\"worker@@{calm_array_index}@@\"\nCLUSTER_SUBNET=\"@@{KUBE_CLUSTER_SUBNET}@@\"\nSERVICE_SUBNET=\"@@{KUBE_SERVICE_SUBNET}@@\"\nKUBE_CLUSTER_DNS=\"@@{KUBE_DNS_IP}@@\"\nDOCKER_VERSION=\"@@{DOCKER_VERSION}@@\"\nSSL_ON=\"@@{SSL_ON}@@\"\nKUBE_CERT_PATH=\"/etc/kubernetes/ssl\"\nKUBE_MANIFEST_PATH=\"/etc/kubernetes/manifests\"\nKUBE_CONFIG_PATH=\"/etc/kubernetes/config\"\nKUBE_CNI_BIN_PATH=\"/opt/cni/bin\"\nKUBE_CNI_CONF_PATH=\"/etc/cni/net.d\"\nETCD_SERVER_PORT=2379\nMASTER_API_HTTPS=6443\n\nSSL_ON=\"${SSL_ON:-no}\"\n\n# -*- Install Kubernetes master\nsudo mkdir -p ${KUBE_CERT_PATH} ${KUBE_MANIFEST_PATH} ${KUBE_CNI_CONF_PATH} ${KUBE_CNI_BIN_PATH} ${KUBE_CONFIG_PATH}\n\ncurl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://github.com/containernetworking/plugins/releases/download/v0.7.5/cni-plugins-amd64-v0.7.5.tgz\ncurl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://storage.googleapis.com/kubernetes-release/release/${KUBE_VERSION}/bin/linux/amd64/kubelet\ncurl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://storage.googleapis.com/kubernetes-release/release/${KUBE_VERSION}/bin/linux/amd64/kubectl\nchmod +x kubelet kubectl\nsudo mv kubelet kubectl /usr/bin/\n\nsudo tar -zxvf cni-plugins-amd64-*.tgz -C ${KUBE_CNI_BIN_PATH}\nrm -rf cni-plugins-amd64-*.tgz\n\nif [ \"${SSL_ON}\" == \"yes\" ]; then\n    echo \"INFO: Downloading cfssl & cfssljson for creating certs.\"\n    HTTP_METHOD=\"https\"\n    curl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n    curl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n    chmod +x cfssl_linux-amd64 cfssljson_linux-amd64\n    sudo mv cfssl_linux-amd64 /usr/local/bin/cfssl\n    sudo mv cfssljson_linux-amd64 /usr/local/bin/cfssljson\nfi\n\n# -*- Configure Kubernetes Worker\ncat <<EOF | sudo tee ${KUBE_CONFIG_PATH}/kubelet-config.yaml\nkind: KubeletConfiguration\napiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    enabled: true\n  x509:\n    clientCAFile: \"${KUBE_CERT_PATH}/ca.pem\"\nauthorization:\n  mode: Webhook\nclusterDomain: \"cluster.local\"\nclusterDNS:\n  - \"${KUBE_CLUSTER_DNS}\"\nstaticPodPath: \"${KUBE_MANIFEST_PATH}\"\npodCIDR: \"${CLUSTER_SUBNET}\"\nruntimeRequestTimeout: \"10m\"\ntlsCertFile: \"${KUBE_CERT_PATH}/${NODE_NAME}.pem\"\ntlsPrivateKeyFile: \"${KUBE_CERT_PATH}/${NODE_NAME}-key.pem\"\nreadOnlyPort: 0\nprotectKernelDefaults: false\nmakeIPTablesUtilChains: true\neventRecordQPS: 0\nkubeletCgroups: \"/systemd/system.slice\"\nevictionHard:\n  memory.available: \"200Mi\"\n  nodefs.available:  \"10%\"\n  nodefs.inodesFree: \"5%\"\nEOF\n\necho \"[Unit]\nDescription=Kubernetes Kubelet\nDocumentation=https://github.com/GoogleCloudPlatform/kubernetes\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nExecStart=/usr/bin/kubelet \\\\\n  --config=${KUBE_CONFIG_PATH}/kubelet-config.yaml \\\\\n  --container-runtime=docker \\\\\n  --kubeconfig=${KUBE_CERT_PATH}/${NODE_NAME}.kubeconfig \\\\\n  --network-plugin=cni \\\\\n  --register-node=true \\\\\n  --runtime-cgroups=/systemd/system.slice \\\\\n  --node-labels 'node-role.kubernetes.io/worker=true' \\\\\n  --node-labels 'beta.kubernetes.io/fluentd-ds-ready=true' \\\\\n  --v=2\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\" | sudo tee /etc/systemd/system/kubelet.service\n\necho \"if \\$programname == 'kubelet' then /var/log/kubelet.log\n& stop\" | sudo tee /etc/rsyslog.d/kubelet.conf\n\ncat <<EOF | sudo tee ${KUBE_CONFIG_PATH}/kube-proxy-config.yaml\nkind: KubeProxyConfiguration\napiVersion: kubeproxy.config.k8s.io/v1alpha1\nclientConnection:\n  kubeconfig: \"${KUBE_CERT_PATH}/kube-proxy.kubeconfig\"\nmode: \"iptables\"\nclusterCIDR: \"${CLUSTER_SUBNET}\"\niptables:\n  masqueradeAll: true\nEOF\n\necho \"apiVersion: v1\nkind: Pod\nmetadata:\n  name: kube-proxy\n  namespace: kube-system\n  labels:\n    k8s-app: kube-proxy\nspec:\n  hostNetwork: true\n  containers:\n  - name: kube-proxy\n    image: gcr.io/google-containers/hyperkube:${KUBE_VERSION}\n    command:\n    - /hyperkube\n    - kube-proxy\n    - --config=${KUBE_CONFIG_PATH}/kube-proxy-config.yaml\n    securityContext:\n      privileged: true\n    volumeMounts:\n    - mountPath: ${KUBE_CERT_PATH}\n      name: ssl-certs-kubernetes\n      readOnly: true\n    - mountPath: /etc/ssl/certs\n      name: ssl-certs-host\n      readOnly: true\n    - mountPath: /lib/modules\n      name: lib-modules-host\n      readOnly: true\n    - mountPath: ${KUBE_CONFIG_PATH}\n      name: kube-config-path\n      readOnly: true\n  volumes:\n  - hostPath:\n      path: ${KUBE_CERT_PATH}\n    name: ssl-certs-kubernetes\n  - hostPath:\n      path: /etc/ssl/certs\n    name: ssl-certs-host\n  - hostPath:\n      path: /lib/modules\n    name: lib-modules-host\n  - hostPath:\n      path: ${KUBE_CONFIG_PATH}\n    name: kube-config-path\" | sudo tee ${KUBE_MANIFEST_PATH}/kube-proxy.yaml\n    \nif [ \"@@{KUBE_CNI_PLUGIN}@@\" == \"canal\" ] ||  [ \"@@{KUBE_CNI_PLUGIN}@@\" == \"calico\" ]; then\n  sudo sed -i '/masqueradeAll/d' ${KUBE_CONFIG_PATH}/kube-proxy-config.yaml\nfi \n\necho '{\n  \"name\": \"cbr0\",\n  \"type\": \"flannel\",\n  \"delegate\": {\n    \"isDefaultGateway\": true\n  }\n}' | sudo tee ${KUBE_CNI_CONF_PATH}/10-flannel.conf\n\nif [ \"${SSL_ON}\" == \"yes\" ]; then\n\n  echo \"@@{CENTOS.secret}@@\" | tee ~/.ssh/id_rsa\n  chmod 600 ~/.ssh/id_rsa\n\n  count=0\n  while [ ! $(ssh -o stricthostkeychecking=no $MASTER_IP \"ls /opt/kube-ssl/encryption-config.yaml 2>/dev/null\") ] ; do  echo \"waiting for certs sleeping 5\" && sleep 5; if [[ $count -eq 600 ]]; then echo \"failed to download certs\" && exit 1; fi; count=$(($count+5)) ; done\n\n  scp -o stricthostkeychecking=no ${MASTER_IP}:/opt/kube-ssl/{ca*.pem,kubernetes*.pem,kube-proxy.kubeconfig,ca-config.json} .\n\n  echo \"{\n    \\\"CN\\\": \\\"system:node:${NODE_NAME}\\\",\n    \\\"key\\\": {\n      \\\"algo\\\": \\\"rsa\\\",\n      \\\"size\\\": 2048\n    },\n    \\\"names\\\": [\n      {\n        \\\"C\\\": \\\"US\\\",\n        \\\"L\\\": \\\"San Jose\\\",\n        \\\"O\\\": \\\"system:nodes\\\",\n        \\\"OU\\\": \\\"Kubernetes The Hard Way\\\",\n        \\\"ST\\\": \\\"California\\\"\n      }\n    ]\n  }\" | tee ${NODE_NAME}-csr.json\n  cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname=${NODE_NAME},${INTERNAL_IP} -profile=client-server ${NODE_NAME}-csr.json | cfssljson -bare ${NODE_NAME}\n\n  kubectl config set-cluster ${KUBE_CLUSTER_NAME} --certificate-authority=ca.pem --embed-certs=true --server=https://${MASTER_IP}:${MASTER_API_HTTPS} --kubeconfig=${NODE_NAME}.kubeconfig\n  kubectl config set-credentials system:node:${NODE_NAME} --client-certificate=${NODE_NAME}.pem --client-key=${NODE_NAME}-key.pem --embed-certs=true --kubeconfig=${NODE_NAME}.kubeconfig\n  kubectl config set-context default --cluster=${KUBE_CLUSTER_NAME} --user=system:node:${NODE_NAME} --kubeconfig=${NODE_NAME}.kubeconfig\n  kubectl config use-context default --kubeconfig=${NODE_NAME}.kubeconfig\n\n  sudo cp *.pem *.kubeconfig ${KUBE_CERT_PATH}/\n  sudo chmod +r ${KUBE_CERT_PATH}/*\n\n  rm -rf ${NODE_NAME}-csr.json\n\nfi\n\nsudo systemctl start kubelet \nsudo systemctl enable kubelet\nsudo systemctl restart rsyslog",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150017566856",
    "kind": "app_task",
    "uuid": "18844c50-2815-4bf4-a4c1-4af6efd320d4",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150017566856",
    "name": "Kubernetes_Worker_Install_and_Configure"
  }
}
