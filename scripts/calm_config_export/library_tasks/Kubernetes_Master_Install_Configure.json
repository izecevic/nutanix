{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "Kubernetes_Master_Install_Configure",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "#!/bin/bash\nset -ex\n\n# - * - Variables and constants.\nKUBE_CLUSTER_NAME=\"@@{KUBE_CLUSTER_NAME}@@\"\nKUBE_VERSION=\"@@{calm_array_VERSION[0]}@@\"\nCNI_VERSION=\"@@{CNI_VERSION}@@\"\nINTERNAL_IP=\"@@{address}@@\"\nMASTER_IPS=\"@@{all_master_ip_address}@@\"\nWORKER_IPS=\"@@{all_worker_ip_address}@@\"\nNODE_NAME=\"master@@{calm_array_index}@@\"\nCLUSTER_SUBNET=\"@@{KUBE_CLUSTER_SUBNET}@@\"\nSERVICE_SUBNET=\"@@{KUBE_SERVICE_SUBNET}@@\"\nKUBE_CLUSTER_DNS=\"@@{KUBE_DNS_IP}@@\"\nSSL_ON=\"@@{SSL_ON}@@\"\nETCD_CERT_PATH=\"/etc/ssl/certs/etcd\"\nKUBE_CERT_PATH=\"/etc/kubernetes/ssl\"\nKUBE_CONFIG_PATH=\"/etc/kubernetes/config\"\nKUBE_MANIFEST_PATH=\"/etc/kubernetes/manifests\"\nKUBE_CNI_BIN_PATH=\"/opt/cni/bin\"\nKUBE_CNI_CONF_PATH=\"/etc/cni/net.d\"\nMASTER_API_HTTPS=6443\nETCD_SERVER_PORT=2379\nHTTP_METHOD=\"http\"\n\nSSL_ON=\"${SSL_ON:-no}\"\n\nsudo easy_install pip\npip install netaddr\n\nFIRST_IP_SERVICE_SUBNET=$(python -c \"from netaddr import * ; print IPNetwork('${SERVICE_SUBNET}')[1]\")\nCONTROLLER_COUNT=$(echo \"@@{calm_array_address}@@\" | tr ',' '\\n' | wc -l)\n\ncount=0\nfor ip in $(echo \"${MASTER_IPS}\" | tr \",\" \"\\n\"); do\n  CONS_NAMES+=\"master${count}\",\n  ETCD+=\"https://${ip}:${ETCD_SERVER_PORT}\",\n  count=$((count+1))\ndone\n\nCONTROLLER_NAMES=$(echo $CONS_NAMES | sed  's/,$//')\nETCD_SERVERS=$(echo $ETCD | sed  's/,$//')\n  \ncount=0\nfor ip in $(echo ${WORKER_IPS} | tr \",\" \"\\n\"); do\n  MIN_NAMES+=\"worker${count}\",\n  count=$((count+1))\ndone\nMINION_NAMES=$(echo $MIN_NAMES | sed  's/,$//')  \n\n# -*- Install Kubernetes master\nsudo mkdir -p /opt/kube-ssl ${KUBE_CERT_PATH} ${KUBE_MANIFEST_PATH} ${KUBE_CONFIG_PATH} ${KUBE_CNI_BIN_PATH} ${KUBE_CNI_CONF_PATH}\nsudo yum update -y --quiet\n\ncurl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://storage.googleapis.com/kubernetes-release/release/${KUBE_VERSION}/bin/linux/amd64/kubelet\ncurl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://storage.googleapis.com/kubernetes-release/release/${KUBE_VERSION}/bin/linux/amd64/kubectl\ncurl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://github.com/containernetworking/plugins/releases/download/${CNI_VERSION}/cni-plugins-linux-amd64-${CNI_VERSION}.tgz\n\nchmod +x kubelet kubectl \nsudo mv kubelet /usr/bin/kubelet\nsudo mv kubectl /usr/local/bin/\n\nsudo tar -zxvf cni-plugins-linux-amd64-*.tgz -C ${KUBE_CNI_BIN_PATH}\nrm -rf cni-plugins-linux-amd64-*.tgz\n\nif [ \"${SSL_ON}\" == \"yes\" ]; then\n    echo \"INFO: Downloading cfssl & cfssljson for creating certs.\"\n    HTTP_METHOD=\"https\"\n    curl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n    curl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n    chmod +x cfssl_linux-amd64 cfssljson_linux-amd64\n    sudo mv cfssl_linux-amd64 /usr/local/bin/cfssl\n    sudo mv cfssljson_linux-amd64 /usr/local/bin/cfssljson\nfi\n\n# -*- Configure Kubernetes master\ncat <<EOF | sudo tee ${KUBE_CONFIG_PATH}/kubelet-config.yaml\nkind: KubeletConfiguration\napiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    enabled: true\n  x509:\n    clientCAFile: \"${KUBE_CERT_PATH}/ca.pem\"\nauthorization:\n  mode: Webhook\nclusterDomain: \"cluster.local\"\nclusterDNS:\n  - \"${KUBE_CLUSTER_DNS}\"\nstaticPodPath: \"${KUBE_MANIFEST_PATH}\"\npodCIDR: \"${CLUSTER_SUBNET}\"\nruntimeRequestTimeout: \"10m\"\ntlsCertFile: \"${KUBE_CERT_PATH}/${NODE_NAME}.pem\"\ntlsPrivateKeyFile: \"${KUBE_CERT_PATH}/${NODE_NAME}-key.pem\"\nreadOnlyPort: 0\nprotectKernelDefaults: false\nmakeIPTablesUtilChains: true\neventRecordQPS: 0\nkubeletCgroups: \"/systemd/system.slice\"\nEOF\n\necho \"[Unit]\nDescription=Kubernetes Kubelet\nDocumentation=https://github.com/GoogleCloudPlatform/kubernetes\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nExecStart=/usr/bin/kubelet \\\\\n  --config=${KUBE_CONFIG_PATH}/kubelet-config.yaml \\\\\n  --container-runtime=docker \\\\\n  --kubeconfig=${KUBE_CERT_PATH}/${NODE_NAME}.kubeconfig \\\\\n  --network-plugin=cni \\\\\n  --register-node=true \\\\\n  --runtime-cgroups=/systemd/system.slice \\\\\n  --node-labels 'node.kubernetes.io/master=true' \\\\\n  --node-labels 'node.kubernetes.io/etcd=true' \\\\\n  --register-with-taints=node.kubernetes.io/master=true:NoSchedule \\\\\n  --node-labels 'node.kubernetes.io/fluentd-ds-ready=true' \\\\\n  --v=2\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\" | sudo tee /etc/systemd/system/kubelet.service\n\necho \"if \\$programname == 'kubelet' then /var/log/kubelet.log\n& stop\" | sudo tee /etc/rsyslog.d/kubelet.conf\n\necho \"apiVersion: v1\nkind: Pod\nmetadata:\n  name: kube-apiserver\n  namespace: kube-system\n  labels:\n    k8s-app: kube-apiserver\nspec:\n  hostNetwork: true\n  containers:\n  - name: kube-apiserver\n    image: gcr.io/google-containers/hyperkube:${KUBE_VERSION}\n    command:\n    - /hyperkube\n    - kube-apiserver\n    - --enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota,DenyEscalatingExec,EventRateLimit\n    - --advertise-address=${INTERNAL_IP}\n    - --allow-privileged=true\n    - --anonymous-auth=false\n    - --secure-port=${MASTER_API_HTTPS}\n    - --profiling=false\n    - --apiserver-count=${CONTROLLER_COUNT}\n    - --audit-log-maxage=30\n    - --audit-log-maxbackup=10\n    - --audit-log-maxsize=100\n    - --audit-log-path=/var/lib/audit.log\n    - --authorization-mode=Node,RBAC\n    - --bind-address=0.0.0.0\n    - --kubelet-preferred-address-types=InternalIP,Hostname,ExternalIP\n    - --event-ttl=1h\n    - --service-account-lookup=true\n    - --storage-backend=etcd3\n    - --etcd-cafile=${ETCD_CERT_PATH}/etcd-ca.pem\n    - --etcd-certfile=${ETCD_CERT_PATH}/etcd-client.pem\n    - --etcd-keyfile=${ETCD_CERT_PATH}/etcd-client-key.pem\n    - --etcd-servers=${ETCD_SERVERS}\n    - --experimental-encryption-provider-config=${KUBE_CERT_PATH}/encryption-config.yaml\n    - --admission-control-config-file=${KUBE_CERT_PATH}/admission-control-config-file.yaml\n    - --tls-cert-file=${KUBE_CERT_PATH}/kubernetes.pem\n    - --tls-private-key-file=${KUBE_CERT_PATH}/kubernetes-key.pem\n    - --kubelet-certificate-authority=${KUBE_CERT_PATH}/ca.pem\n    - --kubelet-client-certificate=${KUBE_CERT_PATH}/kubernetes.pem\n    - --kubelet-client-key=${KUBE_CERT_PATH}/kubernetes-key.pem\n    - --kubelet-https=true\n    - --runtime-config=api/all=true\n    - --service-account-key-file=${KUBE_CERT_PATH}/kubernetes.pem\n    - --service-cluster-ip-range=${SERVICE_SUBNET}\n    - --service-node-port-range=30000-32767\n    - --client-ca-file=${KUBE_CERT_PATH}/ca.pem\n    - --v=2\n    ports:\n    - containerPort: ${MASTER_API_HTTPS}\n      hostPort: ${MASTER_API_HTTPS}\n      name: https\n    - containerPort: 8080\n      hostPort: 8080\n      name: local\n    volumeMounts:\n    - mountPath: ${KUBE_CERT_PATH}\n      name: ssl-certs-kubernetes\n      readOnly: true\n    - mountPath: /etc/ssl/certs\n      name: ssl-certs-host\n      readOnly: true\n    - mountPath: /etc/pki\n      name: ca-certs-etc-pki\n      readOnly: true\n  volumes:\n  - hostPath:\n      path: ${KUBE_CERT_PATH}\n    name: ssl-certs-kubernetes\n  - hostPath:\n      path: /etc/ssl/certs\n    name: ssl-certs-host\n  - hostPath:\n      path: /etc/pki\n    name: ca-certs-etc-pki\" | sudo tee ${KUBE_MANIFEST_PATH}/kube-apiserver.yaml\n\ncat <<EOF | sudo tee ${KUBE_CONFIG_PATH}/kube-proxy-config.yaml\nkind: KubeProxyConfiguration\napiVersion: kubeproxy.config.k8s.io/v1alpha1\nclientConnection:\n  kubeconfig: \"${KUBE_CERT_PATH}/kube-proxy.kubeconfig\"\nmode: \"iptables\"\nclusterCIDR: \"${CLUSTER_SUBNET}\"\niptables:\n  masqueradeAll: true\nEOF\n\necho \"apiVersion: v1\nkind: Pod\nmetadata:\n  name: kube-proxy\n  namespace: kube-system\n  labels:\n    k8s-app: kube-proxy\nspec:\n  hostNetwork: true\n  containers:\n  - name: kube-proxy\n    image: gcr.io/google-containers/hyperkube:${KUBE_VERSION}\n    command:\n    - /hyperkube\n    - kube-proxy\n    - --config=${KUBE_CONFIG_PATH}/kube-proxy-config.yaml\n    securityContext:\n      privileged: true\n    volumeMounts:\n    - mountPath: ${KUBE_CERT_PATH}\n      name: ssl-certs-kubernetes\n      readOnly: true\n    - mountPath: /etc/ssl/certs\n      name: ssl-certs-host\n      readOnly: true\n    - mountPath: /lib/modules\n      name: lib-modules-host\n      readOnly: true\n    - mountPath: ${KUBE_CONFIG_PATH}\n      name: kube-config-path\n      readOnly: true\n  volumes:\n  - hostPath:\n      path: ${KUBE_CERT_PATH}\n    name: ssl-certs-kubernetes\n  - hostPath:\n      path: /etc/ssl/certs\n    name: ssl-certs-host\n  - hostPath:\n      path: /lib/modules\n    name: lib-modules-host\n  - hostPath:\n      path: ${KUBE_CONFIG_PATH}\n    name: kube-config-path\" | sudo tee ${KUBE_MANIFEST_PATH}/kube-proxy.yaml\n    \nif [ \"@@{KUBE_CNI_PLUGIN}@@\" == \"canal\" ] ||  [ \"@@{KUBE_CNI_PLUGIN}@@\" == \"calico\" ]; then\n  sudo sed -i '/masqueradeAll/d' ${KUBE_CONFIG_PATH}/kube-proxy-config.yaml\nfi \n\necho \"apiVersion: v1\nkind: Pod\nmetadata:\n  name: kube-controller-manager\n  namespace: kube-system\n  labels:\n    k8s-app: kube-controller-manager\nspec:\n  hostNetwork: true\n  containers:\n  - name: kube-controller-manager\n    image: gcr.io/google-containers/hyperkube:${KUBE_VERSION}\n    command:\n    - /hyperkube\n    - kube-controller-manager\n    - --bind-address=0.0.0.0  \n    - --allocate-node-cidrs=true  \n    - --cluster-cidr=${CLUSTER_SUBNET}\n    - --cluster-name=${KUBE_CLUSTER_NAME}\n    - --leader-elect=true  \n    - --kubeconfig=${KUBE_CERT_PATH}/kube-controller-manager.kubeconfig  \n    - --service-account-private-key-file=${KUBE_CERT_PATH}/kubernetes-key.pem\n    - --root-ca-file=${KUBE_CERT_PATH}/ca.pem\n    - --service-cluster-ip-range=${SERVICE_SUBNET}\n    - --terminated-pod-gc-threshold=100  \n    - --profiling=false  \n    - --use-service-account-credentials=true\n    - --v=2\n    livenessProbe:\n      httpGet:\n        host: 127.0.0.1\n        path: /healthz\n        port: 10252\n      initialDelaySeconds: 15\n      timeoutSeconds: 1\n    volumeMounts:\n    - mountPath: ${KUBE_CERT_PATH}\n      name: ssl-certs-kubernetes\n      readOnly: true\n    - mountPath: /etc/ssl/certs\n      name: ssl-certs-host\n      readOnly: true\n    - mountPath: /etc/pki\n      name: ca-certs-etc-pki\n      readOnly: true\n  volumes:\n  - hostPath:\n      path: ${KUBE_CERT_PATH}\n    name: ssl-certs-kubernetes\n  - hostPath:\n      path: /etc/ssl/certs\n    name: ssl-certs-host\n  - hostPath:\n      path: /etc/pki\n    name: ca-certs-etc-pki\" | sudo tee ${KUBE_MANIFEST_PATH}/kube-controller-manager.yaml\n   \ncat <<EOF | sudo tee ${KUBE_CONFIG_PATH}/kube-scheduler.yaml\napiVersion: kubescheduler.config.k8s.io/v1alpha1\nkind: KubeSchedulerConfiguration\nclientConnection:\n  kubeconfig: \"${KUBE_CERT_PATH}/kube-scheduler.kubeconfig\"\nleaderElection:\n  leaderElect: true\nEOF\n   \necho \"apiVersion: v1\nkind: Pod\nmetadata:\n  name: kube-scheduler\n  namespace: kube-system\n  labels:\n    k8s-app: kube-scheduler\nspec:\n  hostNetwork: true\n  containers:\n  - name: kube-scheduler\n    image: gcr.io/google-containers/hyperkube:${KUBE_VERSION}\n    command:\n    - /hyperkube\n    - kube-scheduler\n    - --config=${KUBE_CONFIG_PATH}/kube-scheduler.yaml\n    - --v=2\n    livenessProbe:\n      httpGet:\n        host: 127.0.0.1\n        path: /healthz\n        port: 10251\n      initialDelaySeconds: 15\n      timeoutSeconds: 1\n    volumeMounts:\n    - mountPath: ${KUBE_CERT_PATH}\n      name: ssl-certs-kubernetes\n      readOnly: true\n    - mountPath: ${KUBE_CONFIG_PATH}\n      name: kube-config-path\n      readOnly: true\n  volumes:\n  - hostPath:\n      path: ${KUBE_CERT_PATH}\n    name: ssl-certs-kubernetes\n  - hostPath:\n      path: ${KUBE_CONFIG_PATH}\n    name: kube-config-path\" | sudo tee ${KUBE_MANIFEST_PATH}/kube-scheduler.yaml\n    \necho \"kind: AdmissionConfiguration\napiVersion: apiserver.k8s.io/v1alpha1\nplugins:\n- name: EventRateLimit\n  path: eventconfig.yaml\" | sudo tee ${KUBE_CERT_PATH}/admission-control-config-file.yaml\n  \necho \"kind: Configuration\napiVersion: eventratelimit.admission.k8s.io/v1alpha1\nlimits:\n- type: Namespace\n  qps: 50\n  burst: 100\n  cacheSize: 2000\n- type: User\n  qps: 10\n  burst: 50\" | sudo tee ${KUBE_CERT_PATH}/eventconfig.yaml\n\necho '{\n  \"cniVersion\": \"0.3.1\",\n  \"name\": \"cbr0\",\n  \"type\": \"flannel\",\n  \"delegate\": {\n    \"isDefaultGateway\": true\n  }\n}' | sudo tee ${KUBE_CNI_CONF_PATH}/10-flannel.conf\n\nif [ \"${SSL_ON}\" == \"yes\" ]; then\n  if [ @@{calm_array_index}@@ -eq 0 ];then\n    sudo chown -R $USER:$USER /opt/kube-ssl && cd /opt/kube-ssl\n    echo '{\n      \"signing\": {\n        \"default\": {\n          \"expiry\": \"8760h\"\n        },\n        \"profiles\": {\n          \"server\": {\n            \"expiry\": \"8760h\",\n            \"usages\": [ \"signing\", \"key encipherment\", \"server auth\", \"client auth\" ]\n          },\n          \"client\": {\n            \"expiry\": \"8760h\",\n            \"usages\": [ \"key encipherment\", \"client auth\" ]\n          },\n          \"client-server\": {\n            \"expiry\": \"8760h\",\n            \"usages\": [ \"key encipherment\", \"server auth\", \"client auth\" ]\n          }\n        }\n      }\n    }' | tee ca-config.json\n\n    echo '{\n      \"CN\": \"kube-ca\",\n      \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n      },\n      \"names\": [\n        {\n          \"C\": \"US\",\n          \"L\": \"San Jose\",\n          \"O\": \"kube\",\n          \"OU\": \"CA\",\n          \"ST\": \"California\"\n        }\n      ]\n    }' | tee kube-ca-csr.json\n\n    cfssl gencert -initca kube-ca-csr.json | cfssljson -bare ca\n\n    echo '{\n      \"CN\": \"kubernetes\",\n      \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n      },\n      \"names\": [\n        {\n          \"C\": \"US\",\n          \"L\": \"San Jose\",\n          \"O\": \"kube\",\n          \"OU\": \"Cluster\",\n          \"ST\": \"California\"\n        }\n      ]\n    }' | tee kubernetes-csr.json\n\n    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname=${CONTROLLER_NAMES},${MASTER_IPS},${MINION_NAMES},${WORKER_IPS},${FIRST_IP_SERVICE_SUBNET},127.0.0.1,kubernetes.default,kubernetes,kubernetes.default.svc,kubernetes.default.svc.cluster.local -profile=server kubernetes-csr.json | cfssljson -bare kubernetes\n\n    echo '{\n      \"CN\": \"system:kube-controller-manager\",\n      \"hosts\": [],\n      \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n      },\n      \"names\": [\n        {\n          \"C\": \"US\",\n          \"L\": \"San Jose\",\n          \"O\": \"system:kube-controller-manager\",\n          \"OU\": \"Cluster\",\n          \"ST\": \"California\"\n        }\n      ]\n    }' | tee kube-controller-manager-csr.json\n\n    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager\n\n    echo '{\n      \"CN\": \"system:kube-scheduler\",\n      \"hosts\": [],\n      \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n      },\n      \"names\": [\n        {\n          \"C\": \"US\",\n          \"L\": \"San Jose\",\n          \"O\": \"system:kube-scheduler\",\n          \"OU\": \"Cluster\",\n          \"ST\": \"California\"\n        }\n      ]\n    }' | tee kube-scheduler-csr.json\n\n    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server kube-scheduler-csr.json | cfssljson -bare kube-scheduler\n\n    count=0\n    for ip in $(echo ${MASTER_IPS} | tr \",\" \"\\n\"); do\n    instance=\"master${count}\"\n    echo \"{\n      \\\"CN\\\": \\\"system:node:${instance}\\\",\n      \\\"key\\\": {\n        \\\"algo\\\": \\\"rsa\\\",\n        \\\"size\\\": 2048\n      },\n      \\\"names\\\": [\n        {\n          \\\"C\\\": \\\"US\\\",\n          \\\"L\\\": \\\"San Jose\\\",\n          \\\"O\\\": \\\"system:nodes\\\",\n          \\\"OU\\\": \\\"Kubernetes The Hard Way\\\",\n          \\\"ST\\\": \\\"California\\\"\n        }\n      ]\n    }\" | tee ${instance}-csr.json\n    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname=${instance},${ip} -profile=client-server ${instance}-csr.json | cfssljson -bare ${instance}\n    count=$((count+1))\n    done \n\n    # -*- Creating kube-proxy certificates\n    echo '{\n      \"CN\": \"system:kube-proxy\",\n      \"hosts\": [],\n      \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n      },\n      \"names\": [\n        {\n          \"C\": \"US\",\n          \"L\": \"San Jose\",\n          \"O\": \"system:node-proxier\",\n          \"OU\": \"Cluster\",\n          \"ST\": \"California\"\n        }\n      ]\n    }' | tee kube-proxy-csr.json\n\n    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client kube-proxy-csr.json | cfssljson -bare kube-proxy\n\n    echo '{\n      \"CN\": \"admin\",\n      \"hosts\": [],\n      \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n      },\n      \"names\": [\n        {\n          \"C\": \"US\",\n          \"L\": \"San Jose\",\n          \"O\": \"system:masters\",\n          \"OU\": \"Cluster\",\n          \"ST\": \"California\"\n        }\n      ]\n    }' | tee admin-csr.json\n\n    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client admin-csr.json | cfssljson -bare admin\n\n    count=0\n    for ip in $(echo ${MASTER_IPS} | tr \",\" \"\\n\"); do\n    kubectl config set-cluster ${KUBE_CLUSTER_NAME} --certificate-authority=ca.pem --embed-certs=true --server=https://${INTERNAL_IP}:${MASTER_API_HTTPS} --kubeconfig=master${count}.kubeconfig\n    kubectl config set-credentials system:node:master${count} --client-certificate=master${count}.pem --client-key=master${count}-key.pem --embed-certs=true --kubeconfig=master${count}.kubeconfig\n    kubectl config set-context default --cluster=${KUBE_CLUSTER_NAME} --user=system:node:master${count} --kubeconfig=master${count}.kubeconfig\n    kubectl config use-context default --kubeconfig=master${count}.kubeconfig\n    count=$((count+1))\n    done\n\n    kubectl config set-cluster ${KUBE_CLUSTER_NAME} --certificate-authority=ca.pem --embed-certs=true --server=https://${INTERNAL_IP}:${MASTER_API_HTTPS} --kubeconfig=kube-controller-manager.kubeconfig\n    kubectl config set-credentials kube-controller-manager --client-certificate=kube-controller-manager.pem --client-key=kube-controller-manager-key.pem --embed-certs=true --kubeconfig=kube-controller-manager.kubeconfig\n    kubectl config set-context default --cluster=${KUBE_CLUSTER_NAME} --user=kube-controller-manager --kubeconfig=kube-controller-manager.kubeconfig\n    kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig\n\n    kubectl config set-cluster ${KUBE_CLUSTER_NAME} --certificate-authority=ca.pem --embed-certs=true --server=https://${INTERNAL_IP}:${MASTER_API_HTTPS} --kubeconfig=kube-scheduler.kubeconfig\n    kubectl config set-credentials kube-scheduler --client-certificate=kube-scheduler.pem --client-key=kube-scheduler-key.pem --embed-certs=true --kubeconfig=kube-scheduler.kubeconfig\n    kubectl config set-context default --cluster=${KUBE_CLUSTER_NAME} --user=kube-scheduler --kubeconfig=kube-scheduler.kubeconfig\n    kubectl config use-context default --kubeconfig=kube-scheduler.kubeconfig\n\n    kubectl config set-cluster ${KUBE_CLUSTER_NAME} --certificate-authority=ca.pem --embed-certs=true --server=https://${INTERNAL_IP}:${MASTER_API_HTTPS} --kubeconfig=kube-proxy.kubeconfig\n    kubectl config set-credentials kube-proxy --client-certificate=kube-proxy.pem --client-key=kube-proxy-key.pem --embed-certs=true --kubeconfig=kube-proxy.kubeconfig\n    kubectl config set-context default --cluster=${KUBE_CLUSTER_NAME} --user=kube-proxy --kubeconfig=kube-proxy.kubeconfig\n    kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig\n\n    ENCRYPTION_KEY=$(head -c 32 /dev/urandom | base64)\n    echo \"kind: EncryptionConfig\napiVersion: v1\nresources:\n  - resources:\n      - secrets\n    providers:\n      - aescbc:\n          keys:\n            - name: key1\n              secret: ${ENCRYPTION_KEY}\n      - identity: {}\" | tee encryption-config.yaml\n\n    echo \"@@{CENTOS.secret}@@\" | tee ~/.ssh/id_rsa\n    chmod 600 ~/.ssh/id_rsa\n\n    count=0\n    for ip in $(echo ${MASTER_IPS} | tr \",\" \"\\n\"); do\n      instance=\"master${count}\"\n      scp -o stricthostkeychecking=no admin*.pem ca*.pem kubernetes*.pem ${instance}* kube-proxy.kubeconfig kube-controller-manager.kubeconfig kube-scheduler.kubeconfig encryption-config.yaml ${instance}:\n    count=$((count+1))\n    done\n\n  else\n    count=0\n    while [ ! $(ls $HOME/encryption-config.yaml 2>/dev/null) ] ; do  echo \"waiting for certs sleeping 5\" && sleep 5; if [[ $count -eq 600 ]]; then echo \"failed to download certs\" && exit 1; fi; count=$(($count+5)) ; done\n  fi\n\n  cd $HOME\n  sudo cp ca*.pem kubernetes*.pem ${NODE_NAME}* kube-*.kubeconfig encryption-config.yaml ${KUBE_CERT_PATH}/\n  sudo chmod +r ${KUBE_CERT_PATH}/*\nfi\n\nsudo systemctl start kubelet \nsudo systemctl enable kubelet\nsudo systemctl restart rsyslog\n\nmkdir CA\nmv admin*.pem ca*.pem kubernetes*.pem master* kube-*.kubeconfig encryption-config.yaml CA/\nif [ @@{calm_array_index}@@ -ne 0 ];then\n  exit\nfi\n\ncp /opt/kube-ssl/admin*.pem CA/\nCOUNT=0\nwhile [[ $(curl --key CA/admin-key.pem --cert CA/admin.pem --cacert CA/ca.pem https://${INTERNAL_IP}:${MASTER_API_HTTPS}/healthz) != \"ok\" ]] ; do\n    echo \"sleep for 5 secs\"\n  sleep 5\n  COUNT=$(($COUNT+1))\n  if [[ $COUNT -eq 50 ]]; then\n    echo \"Error: creating cluster\"\n    exit 1\n  fi\ndone\n\nkubectl config set-cluster ${KUBE_CLUSTER_NAME}  --certificate-authority=$HOME/CA/ca.pem  --embed-certs=true --server=https://${INTERNAL_IP}:${MASTER_API_HTTPS}\nkubectl config set-credentials admin  --client-certificate=$HOME/CA/admin.pem  --client-key=$HOME/CA/admin-key.pem\nkubectl config set-context ${KUBE_CLUSTER_NAME}  --cluster=${KUBE_CLUSTER_NAME}  --user=admin\nkubectl config use-context ${KUBE_CLUSTER_NAME}\n\ncat <<EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRole\nmetadata:\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate: \"true\"\n  labels:\n    kubernetes.io/bootstrapping: rbac-defaults\n  name: system:kube-apiserver-to-kubelet\nrules:\n  - apiGroups:\n      - \"\"\n    resources:\n      - nodes/proxy\n      - nodes/stats\n      - nodes/log\n      - nodes/spec\n      - nodes/metrics\n    verbs:\n      - \"*\"\nEOF\n\ncat <<EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: system:kube-apiserver\n  namespace: \"\"\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:kube-apiserver-to-kubelet\nsubjects:\n  - apiGroup: rbac.authorization.k8s.io\n    kind: User\n    name: kubernetes\nEOF\n"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "Kubernetes_Master_Install_Configure",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "#!/bin/bash\nset -ex\n\n# - * - Variables and constants.\nKUBE_CLUSTER_NAME=\"@@{KUBE_CLUSTER_NAME}@@\"\nKUBE_VERSION=\"@@{calm_array_VERSION[0]}@@\"\nCNI_VERSION=\"@@{CNI_VERSION}@@\"\nINTERNAL_IP=\"@@{address}@@\"\nMASTER_IPS=\"@@{all_master_ip_address}@@\"\nWORKER_IPS=\"@@{all_worker_ip_address}@@\"\nNODE_NAME=\"master@@{calm_array_index}@@\"\nCLUSTER_SUBNET=\"@@{KUBE_CLUSTER_SUBNET}@@\"\nSERVICE_SUBNET=\"@@{KUBE_SERVICE_SUBNET}@@\"\nKUBE_CLUSTER_DNS=\"@@{KUBE_DNS_IP}@@\"\nSSL_ON=\"@@{SSL_ON}@@\"\nETCD_CERT_PATH=\"/etc/ssl/certs/etcd\"\nKUBE_CERT_PATH=\"/etc/kubernetes/ssl\"\nKUBE_CONFIG_PATH=\"/etc/kubernetes/config\"\nKUBE_MANIFEST_PATH=\"/etc/kubernetes/manifests\"\nKUBE_CNI_BIN_PATH=\"/opt/cni/bin\"\nKUBE_CNI_CONF_PATH=\"/etc/cni/net.d\"\nMASTER_API_HTTPS=6443\nETCD_SERVER_PORT=2379\nHTTP_METHOD=\"http\"\n\nSSL_ON=\"${SSL_ON:-no}\"\n\nsudo easy_install pip\npip install netaddr\n\nFIRST_IP_SERVICE_SUBNET=$(python -c \"from netaddr import * ; print IPNetwork('${SERVICE_SUBNET}')[1]\")\nCONTROLLER_COUNT=$(echo \"@@{calm_array_address}@@\" | tr ',' '\\n' | wc -l)\n\ncount=0\nfor ip in $(echo \"${MASTER_IPS}\" | tr \",\" \"\\n\"); do\n  CONS_NAMES+=\"master${count}\",\n  ETCD+=\"https://${ip}:${ETCD_SERVER_PORT}\",\n  count=$((count+1))\ndone\n\nCONTROLLER_NAMES=$(echo $CONS_NAMES | sed  's/,$//')\nETCD_SERVERS=$(echo $ETCD | sed  's/,$//')\n  \ncount=0\nfor ip in $(echo ${WORKER_IPS} | tr \",\" \"\\n\"); do\n  MIN_NAMES+=\"worker${count}\",\n  count=$((count+1))\ndone\nMINION_NAMES=$(echo $MIN_NAMES | sed  's/,$//')  \n\n# -*- Install Kubernetes master\nsudo mkdir -p /opt/kube-ssl ${KUBE_CERT_PATH} ${KUBE_MANIFEST_PATH} ${KUBE_CONFIG_PATH} ${KUBE_CNI_BIN_PATH} ${KUBE_CNI_CONF_PATH}\nsudo yum update -y --quiet\n\ncurl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://storage.googleapis.com/kubernetes-release/release/${KUBE_VERSION}/bin/linux/amd64/kubelet\ncurl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://storage.googleapis.com/kubernetes-release/release/${KUBE_VERSION}/bin/linux/amd64/kubectl\ncurl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://github.com/containernetworking/plugins/releases/download/${CNI_VERSION}/cni-plugins-linux-amd64-${CNI_VERSION}.tgz\n\nchmod +x kubelet kubectl \nsudo mv kubelet /usr/bin/kubelet\nsudo mv kubectl /usr/local/bin/\n\nsudo tar -zxvf cni-plugins-linux-amd64-*.tgz -C ${KUBE_CNI_BIN_PATH}\nrm -rf cni-plugins-linux-amd64-*.tgz\n\nif [ \"${SSL_ON}\" == \"yes\" ]; then\n    echo \"INFO: Downloading cfssl & cfssljson for creating certs.\"\n    HTTP_METHOD=\"https\"\n    curl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n    curl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n    chmod +x cfssl_linux-amd64 cfssljson_linux-amd64\n    sudo mv cfssl_linux-amd64 /usr/local/bin/cfssl\n    sudo mv cfssljson_linux-amd64 /usr/local/bin/cfssljson\nfi\n\n# -*- Configure Kubernetes master\ncat <<EOF | sudo tee ${KUBE_CONFIG_PATH}/kubelet-config.yaml\nkind: KubeletConfiguration\napiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    enabled: true\n  x509:\n    clientCAFile: \"${KUBE_CERT_PATH}/ca.pem\"\nauthorization:\n  mode: Webhook\nclusterDomain: \"cluster.local\"\nclusterDNS:\n  - \"${KUBE_CLUSTER_DNS}\"\nstaticPodPath: \"${KUBE_MANIFEST_PATH}\"\npodCIDR: \"${CLUSTER_SUBNET}\"\nruntimeRequestTimeout: \"10m\"\ntlsCertFile: \"${KUBE_CERT_PATH}/${NODE_NAME}.pem\"\ntlsPrivateKeyFile: \"${KUBE_CERT_PATH}/${NODE_NAME}-key.pem\"\nreadOnlyPort: 0\nprotectKernelDefaults: false\nmakeIPTablesUtilChains: true\neventRecordQPS: 0\nkubeletCgroups: \"/systemd/system.slice\"\nEOF\n\necho \"[Unit]\nDescription=Kubernetes Kubelet\nDocumentation=https://github.com/GoogleCloudPlatform/kubernetes\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nExecStart=/usr/bin/kubelet \\\\\n  --config=${KUBE_CONFIG_PATH}/kubelet-config.yaml \\\\\n  --container-runtime=docker \\\\\n  --kubeconfig=${KUBE_CERT_PATH}/${NODE_NAME}.kubeconfig \\\\\n  --network-plugin=cni \\\\\n  --register-node=true \\\\\n  --runtime-cgroups=/systemd/system.slice \\\\\n  --node-labels 'node.kubernetes.io/master=true' \\\\\n  --node-labels 'node.kubernetes.io/etcd=true' \\\\\n  --register-with-taints=node.kubernetes.io/master=true:NoSchedule \\\\\n  --node-labels 'node.kubernetes.io/fluentd-ds-ready=true' \\\\\n  --v=2\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\" | sudo tee /etc/systemd/system/kubelet.service\n\necho \"if \\$programname == 'kubelet' then /var/log/kubelet.log\n& stop\" | sudo tee /etc/rsyslog.d/kubelet.conf\n\necho \"apiVersion: v1\nkind: Pod\nmetadata:\n  name: kube-apiserver\n  namespace: kube-system\n  labels:\n    k8s-app: kube-apiserver\nspec:\n  hostNetwork: true\n  containers:\n  - name: kube-apiserver\n    image: gcr.io/google-containers/hyperkube:${KUBE_VERSION}\n    command:\n    - /hyperkube\n    - kube-apiserver\n    - --enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota,DenyEscalatingExec,EventRateLimit\n    - --advertise-address=${INTERNAL_IP}\n    - --allow-privileged=true\n    - --anonymous-auth=false\n    - --secure-port=${MASTER_API_HTTPS}\n    - --profiling=false\n    - --apiserver-count=${CONTROLLER_COUNT}\n    - --audit-log-maxage=30\n    - --audit-log-maxbackup=10\n    - --audit-log-maxsize=100\n    - --audit-log-path=/var/lib/audit.log\n    - --authorization-mode=Node,RBAC\n    - --bind-address=0.0.0.0\n    - --kubelet-preferred-address-types=InternalIP,Hostname,ExternalIP\n    - --event-ttl=1h\n    - --service-account-lookup=true\n    - --storage-backend=etcd3\n    - --etcd-cafile=${ETCD_CERT_PATH}/etcd-ca.pem\n    - --etcd-certfile=${ETCD_CERT_PATH}/etcd-client.pem\n    - --etcd-keyfile=${ETCD_CERT_PATH}/etcd-client-key.pem\n    - --etcd-servers=${ETCD_SERVERS}\n    - --experimental-encryption-provider-config=${KUBE_CERT_PATH}/encryption-config.yaml\n    - --admission-control-config-file=${KUBE_CERT_PATH}/admission-control-config-file.yaml\n    - --tls-cert-file=${KUBE_CERT_PATH}/kubernetes.pem\n    - --tls-private-key-file=${KUBE_CERT_PATH}/kubernetes-key.pem\n    - --kubelet-certificate-authority=${KUBE_CERT_PATH}/ca.pem\n    - --kubelet-client-certificate=${KUBE_CERT_PATH}/kubernetes.pem\n    - --kubelet-client-key=${KUBE_CERT_PATH}/kubernetes-key.pem\n    - --kubelet-https=true\n    - --runtime-config=api/all=true\n    - --service-account-key-file=${KUBE_CERT_PATH}/kubernetes.pem\n    - --service-cluster-ip-range=${SERVICE_SUBNET}\n    - --service-node-port-range=30000-32767\n    - --client-ca-file=${KUBE_CERT_PATH}/ca.pem\n    - --v=2\n    ports:\n    - containerPort: ${MASTER_API_HTTPS}\n      hostPort: ${MASTER_API_HTTPS}\n      name: https\n    - containerPort: 8080\n      hostPort: 8080\n      name: local\n    volumeMounts:\n    - mountPath: ${KUBE_CERT_PATH}\n      name: ssl-certs-kubernetes\n      readOnly: true\n    - mountPath: /etc/ssl/certs\n      name: ssl-certs-host\n      readOnly: true\n    - mountPath: /etc/pki\n      name: ca-certs-etc-pki\n      readOnly: true\n  volumes:\n  - hostPath:\n      path: ${KUBE_CERT_PATH}\n    name: ssl-certs-kubernetes\n  - hostPath:\n      path: /etc/ssl/certs\n    name: ssl-certs-host\n  - hostPath:\n      path: /etc/pki\n    name: ca-certs-etc-pki\" | sudo tee ${KUBE_MANIFEST_PATH}/kube-apiserver.yaml\n\ncat <<EOF | sudo tee ${KUBE_CONFIG_PATH}/kube-proxy-config.yaml\nkind: KubeProxyConfiguration\napiVersion: kubeproxy.config.k8s.io/v1alpha1\nclientConnection:\n  kubeconfig: \"${KUBE_CERT_PATH}/kube-proxy.kubeconfig\"\nmode: \"iptables\"\nclusterCIDR: \"${CLUSTER_SUBNET}\"\niptables:\n  masqueradeAll: true\nEOF\n\necho \"apiVersion: v1\nkind: Pod\nmetadata:\n  name: kube-proxy\n  namespace: kube-system\n  labels:\n    k8s-app: kube-proxy\nspec:\n  hostNetwork: true\n  containers:\n  - name: kube-proxy\n    image: gcr.io/google-containers/hyperkube:${KUBE_VERSION}\n    command:\n    - /hyperkube\n    - kube-proxy\n    - --config=${KUBE_CONFIG_PATH}/kube-proxy-config.yaml\n    securityContext:\n      privileged: true\n    volumeMounts:\n    - mountPath: ${KUBE_CERT_PATH}\n      name: ssl-certs-kubernetes\n      readOnly: true\n    - mountPath: /etc/ssl/certs\n      name: ssl-certs-host\n      readOnly: true\n    - mountPath: /lib/modules\n      name: lib-modules-host\n      readOnly: true\n    - mountPath: ${KUBE_CONFIG_PATH}\n      name: kube-config-path\n      readOnly: true\n  volumes:\n  - hostPath:\n      path: ${KUBE_CERT_PATH}\n    name: ssl-certs-kubernetes\n  - hostPath:\n      path: /etc/ssl/certs\n    name: ssl-certs-host\n  - hostPath:\n      path: /lib/modules\n    name: lib-modules-host\n  - hostPath:\n      path: ${KUBE_CONFIG_PATH}\n    name: kube-config-path\" | sudo tee ${KUBE_MANIFEST_PATH}/kube-proxy.yaml\n    \nif [ \"@@{KUBE_CNI_PLUGIN}@@\" == \"canal\" ] ||  [ \"@@{KUBE_CNI_PLUGIN}@@\" == \"calico\" ]; then\n  sudo sed -i '/masqueradeAll/d' ${KUBE_CONFIG_PATH}/kube-proxy-config.yaml\nfi \n\necho \"apiVersion: v1\nkind: Pod\nmetadata:\n  name: kube-controller-manager\n  namespace: kube-system\n  labels:\n    k8s-app: kube-controller-manager\nspec:\n  hostNetwork: true\n  containers:\n  - name: kube-controller-manager\n    image: gcr.io/google-containers/hyperkube:${KUBE_VERSION}\n    command:\n    - /hyperkube\n    - kube-controller-manager\n    - --bind-address=0.0.0.0  \n    - --allocate-node-cidrs=true  \n    - --cluster-cidr=${CLUSTER_SUBNET}\n    - --cluster-name=${KUBE_CLUSTER_NAME}\n    - --leader-elect=true  \n    - --kubeconfig=${KUBE_CERT_PATH}/kube-controller-manager.kubeconfig  \n    - --service-account-private-key-file=${KUBE_CERT_PATH}/kubernetes-key.pem\n    - --root-ca-file=${KUBE_CERT_PATH}/ca.pem\n    - --service-cluster-ip-range=${SERVICE_SUBNET}\n    - --terminated-pod-gc-threshold=100  \n    - --profiling=false  \n    - --use-service-account-credentials=true\n    - --v=2\n    livenessProbe:\n      httpGet:\n        host: 127.0.0.1\n        path: /healthz\n        port: 10252\n      initialDelaySeconds: 15\n      timeoutSeconds: 1\n    volumeMounts:\n    - mountPath: ${KUBE_CERT_PATH}\n      name: ssl-certs-kubernetes\n      readOnly: true\n    - mountPath: /etc/ssl/certs\n      name: ssl-certs-host\n      readOnly: true\n    - mountPath: /etc/pki\n      name: ca-certs-etc-pki\n      readOnly: true\n  volumes:\n  - hostPath:\n      path: ${KUBE_CERT_PATH}\n    name: ssl-certs-kubernetes\n  - hostPath:\n      path: /etc/ssl/certs\n    name: ssl-certs-host\n  - hostPath:\n      path: /etc/pki\n    name: ca-certs-etc-pki\" | sudo tee ${KUBE_MANIFEST_PATH}/kube-controller-manager.yaml\n   \ncat <<EOF | sudo tee ${KUBE_CONFIG_PATH}/kube-scheduler.yaml\napiVersion: kubescheduler.config.k8s.io/v1alpha1\nkind: KubeSchedulerConfiguration\nclientConnection:\n  kubeconfig: \"${KUBE_CERT_PATH}/kube-scheduler.kubeconfig\"\nleaderElection:\n  leaderElect: true\nEOF\n   \necho \"apiVersion: v1\nkind: Pod\nmetadata:\n  name: kube-scheduler\n  namespace: kube-system\n  labels:\n    k8s-app: kube-scheduler\nspec:\n  hostNetwork: true\n  containers:\n  - name: kube-scheduler\n    image: gcr.io/google-containers/hyperkube:${KUBE_VERSION}\n    command:\n    - /hyperkube\n    - kube-scheduler\n    - --config=${KUBE_CONFIG_PATH}/kube-scheduler.yaml\n    - --v=2\n    livenessProbe:\n      httpGet:\n        host: 127.0.0.1\n        path: /healthz\n        port: 10251\n      initialDelaySeconds: 15\n      timeoutSeconds: 1\n    volumeMounts:\n    - mountPath: ${KUBE_CERT_PATH}\n      name: ssl-certs-kubernetes\n      readOnly: true\n    - mountPath: ${KUBE_CONFIG_PATH}\n      name: kube-config-path\n      readOnly: true\n  volumes:\n  - hostPath:\n      path: ${KUBE_CERT_PATH}\n    name: ssl-certs-kubernetes\n  - hostPath:\n      path: ${KUBE_CONFIG_PATH}\n    name: kube-config-path\" | sudo tee ${KUBE_MANIFEST_PATH}/kube-scheduler.yaml\n    \necho \"kind: AdmissionConfiguration\napiVersion: apiserver.k8s.io/v1alpha1\nplugins:\n- name: EventRateLimit\n  path: eventconfig.yaml\" | sudo tee ${KUBE_CERT_PATH}/admission-control-config-file.yaml\n  \necho \"kind: Configuration\napiVersion: eventratelimit.admission.k8s.io/v1alpha1\nlimits:\n- type: Namespace\n  qps: 50\n  burst: 100\n  cacheSize: 2000\n- type: User\n  qps: 10\n  burst: 50\" | sudo tee ${KUBE_CERT_PATH}/eventconfig.yaml\n\necho '{\n  \"cniVersion\": \"0.3.1\",\n  \"name\": \"cbr0\",\n  \"type\": \"flannel\",\n  \"delegate\": {\n    \"isDefaultGateway\": true\n  }\n}' | sudo tee ${KUBE_CNI_CONF_PATH}/10-flannel.conf\n\nif [ \"${SSL_ON}\" == \"yes\" ]; then\n  if [ @@{calm_array_index}@@ -eq 0 ];then\n    sudo chown -R $USER:$USER /opt/kube-ssl && cd /opt/kube-ssl\n    echo '{\n      \"signing\": {\n        \"default\": {\n          \"expiry\": \"8760h\"\n        },\n        \"profiles\": {\n          \"server\": {\n            \"expiry\": \"8760h\",\n            \"usages\": [ \"signing\", \"key encipherment\", \"server auth\", \"client auth\" ]\n          },\n          \"client\": {\n            \"expiry\": \"8760h\",\n            \"usages\": [ \"key encipherment\", \"client auth\" ]\n          },\n          \"client-server\": {\n            \"expiry\": \"8760h\",\n            \"usages\": [ \"key encipherment\", \"server auth\", \"client auth\" ]\n          }\n        }\n      }\n    }' | tee ca-config.json\n\n    echo '{\n      \"CN\": \"kube-ca\",\n      \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n      },\n      \"names\": [\n        {\n          \"C\": \"US\",\n          \"L\": \"San Jose\",\n          \"O\": \"kube\",\n          \"OU\": \"CA\",\n          \"ST\": \"California\"\n        }\n      ]\n    }' | tee kube-ca-csr.json\n\n    cfssl gencert -initca kube-ca-csr.json | cfssljson -bare ca\n\n    echo '{\n      \"CN\": \"kubernetes\",\n      \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n      },\n      \"names\": [\n        {\n          \"C\": \"US\",\n          \"L\": \"San Jose\",\n          \"O\": \"kube\",\n          \"OU\": \"Cluster\",\n          \"ST\": \"California\"\n        }\n      ]\n    }' | tee kubernetes-csr.json\n\n    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname=${CONTROLLER_NAMES},${MASTER_IPS},${MINION_NAMES},${WORKER_IPS},${FIRST_IP_SERVICE_SUBNET},127.0.0.1,kubernetes.default,kubernetes,kubernetes.default.svc,kubernetes.default.svc.cluster.local -profile=server kubernetes-csr.json | cfssljson -bare kubernetes\n\n    echo '{\n      \"CN\": \"system:kube-controller-manager\",\n      \"hosts\": [],\n      \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n      },\n      \"names\": [\n        {\n          \"C\": \"US\",\n          \"L\": \"San Jose\",\n          \"O\": \"system:kube-controller-manager\",\n          \"OU\": \"Cluster\",\n          \"ST\": \"California\"\n        }\n      ]\n    }' | tee kube-controller-manager-csr.json\n\n    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager\n\n    echo '{\n      \"CN\": \"system:kube-scheduler\",\n      \"hosts\": [],\n      \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n      },\n      \"names\": [\n        {\n          \"C\": \"US\",\n          \"L\": \"San Jose\",\n          \"O\": \"system:kube-scheduler\",\n          \"OU\": \"Cluster\",\n          \"ST\": \"California\"\n        }\n      ]\n    }' | tee kube-scheduler-csr.json\n\n    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server kube-scheduler-csr.json | cfssljson -bare kube-scheduler\n\n    count=0\n    for ip in $(echo ${MASTER_IPS} | tr \",\" \"\\n\"); do\n    instance=\"master${count}\"\n    echo \"{\n      \\\"CN\\\": \\\"system:node:${instance}\\\",\n      \\\"key\\\": {\n        \\\"algo\\\": \\\"rsa\\\",\n        \\\"size\\\": 2048\n      },\n      \\\"names\\\": [\n        {\n          \\\"C\\\": \\\"US\\\",\n          \\\"L\\\": \\\"San Jose\\\",\n          \\\"O\\\": \\\"system:nodes\\\",\n          \\\"OU\\\": \\\"Kubernetes The Hard Way\\\",\n          \\\"ST\\\": \\\"California\\\"\n        }\n      ]\n    }\" | tee ${instance}-csr.json\n    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname=${instance},${ip} -profile=client-server ${instance}-csr.json | cfssljson -bare ${instance}\n    count=$((count+1))\n    done \n\n    # -*- Creating kube-proxy certificates\n    echo '{\n      \"CN\": \"system:kube-proxy\",\n      \"hosts\": [],\n      \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n      },\n      \"names\": [\n        {\n          \"C\": \"US\",\n          \"L\": \"San Jose\",\n          \"O\": \"system:node-proxier\",\n          \"OU\": \"Cluster\",\n          \"ST\": \"California\"\n        }\n      ]\n    }' | tee kube-proxy-csr.json\n\n    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client kube-proxy-csr.json | cfssljson -bare kube-proxy\n\n    echo '{\n      \"CN\": \"admin\",\n      \"hosts\": [],\n      \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n      },\n      \"names\": [\n        {\n          \"C\": \"US\",\n          \"L\": \"San Jose\",\n          \"O\": \"system:masters\",\n          \"OU\": \"Cluster\",\n          \"ST\": \"California\"\n        }\n      ]\n    }' | tee admin-csr.json\n\n    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client admin-csr.json | cfssljson -bare admin\n\n    count=0\n    for ip in $(echo ${MASTER_IPS} | tr \",\" \"\\n\"); do\n    kubectl config set-cluster ${KUBE_CLUSTER_NAME} --certificate-authority=ca.pem --embed-certs=true --server=https://${INTERNAL_IP}:${MASTER_API_HTTPS} --kubeconfig=master${count}.kubeconfig\n    kubectl config set-credentials system:node:master${count} --client-certificate=master${count}.pem --client-key=master${count}-key.pem --embed-certs=true --kubeconfig=master${count}.kubeconfig\n    kubectl config set-context default --cluster=${KUBE_CLUSTER_NAME} --user=system:node:master${count} --kubeconfig=master${count}.kubeconfig\n    kubectl config use-context default --kubeconfig=master${count}.kubeconfig\n    count=$((count+1))\n    done\n\n    kubectl config set-cluster ${KUBE_CLUSTER_NAME} --certificate-authority=ca.pem --embed-certs=true --server=https://${INTERNAL_IP}:${MASTER_API_HTTPS} --kubeconfig=kube-controller-manager.kubeconfig\n    kubectl config set-credentials kube-controller-manager --client-certificate=kube-controller-manager.pem --client-key=kube-controller-manager-key.pem --embed-certs=true --kubeconfig=kube-controller-manager.kubeconfig\n    kubectl config set-context default --cluster=${KUBE_CLUSTER_NAME} --user=kube-controller-manager --kubeconfig=kube-controller-manager.kubeconfig\n    kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig\n\n    kubectl config set-cluster ${KUBE_CLUSTER_NAME} --certificate-authority=ca.pem --embed-certs=true --server=https://${INTERNAL_IP}:${MASTER_API_HTTPS} --kubeconfig=kube-scheduler.kubeconfig\n    kubectl config set-credentials kube-scheduler --client-certificate=kube-scheduler.pem --client-key=kube-scheduler-key.pem --embed-certs=true --kubeconfig=kube-scheduler.kubeconfig\n    kubectl config set-context default --cluster=${KUBE_CLUSTER_NAME} --user=kube-scheduler --kubeconfig=kube-scheduler.kubeconfig\n    kubectl config use-context default --kubeconfig=kube-scheduler.kubeconfig\n\n    kubectl config set-cluster ${KUBE_CLUSTER_NAME} --certificate-authority=ca.pem --embed-certs=true --server=https://${INTERNAL_IP}:${MASTER_API_HTTPS} --kubeconfig=kube-proxy.kubeconfig\n    kubectl config set-credentials kube-proxy --client-certificate=kube-proxy.pem --client-key=kube-proxy-key.pem --embed-certs=true --kubeconfig=kube-proxy.kubeconfig\n    kubectl config set-context default --cluster=${KUBE_CLUSTER_NAME} --user=kube-proxy --kubeconfig=kube-proxy.kubeconfig\n    kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig\n\n    ENCRYPTION_KEY=$(head -c 32 /dev/urandom | base64)\n    echo \"kind: EncryptionConfig\napiVersion: v1\nresources:\n  - resources:\n      - secrets\n    providers:\n      - aescbc:\n          keys:\n            - name: key1\n              secret: ${ENCRYPTION_KEY}\n      - identity: {}\" | tee encryption-config.yaml\n\n    echo \"@@{CENTOS.secret}@@\" | tee ~/.ssh/id_rsa\n    chmod 600 ~/.ssh/id_rsa\n\n    count=0\n    for ip in $(echo ${MASTER_IPS} | tr \",\" \"\\n\"); do\n      instance=\"master${count}\"\n      scp -o stricthostkeychecking=no admin*.pem ca*.pem kubernetes*.pem ${instance}* kube-proxy.kubeconfig kube-controller-manager.kubeconfig kube-scheduler.kubeconfig encryption-config.yaml ${instance}:\n    count=$((count+1))\n    done\n\n  else\n    count=0\n    while [ ! $(ls $HOME/encryption-config.yaml 2>/dev/null) ] ; do  echo \"waiting for certs sleeping 5\" && sleep 5; if [[ $count -eq 600 ]]; then echo \"failed to download certs\" && exit 1; fi; count=$(($count+5)) ; done\n  fi\n\n  cd $HOME\n  sudo cp ca*.pem kubernetes*.pem ${NODE_NAME}* kube-*.kubeconfig encryption-config.yaml ${KUBE_CERT_PATH}/\n  sudo chmod +r ${KUBE_CERT_PATH}/*\nfi\n\nsudo systemctl start kubelet \nsudo systemctl enable kubelet\nsudo systemctl restart rsyslog\n\nmkdir CA\nmv admin*.pem ca*.pem kubernetes*.pem master* kube-*.kubeconfig encryption-config.yaml CA/\nif [ @@{calm_array_index}@@ -ne 0 ];then\n  exit\nfi\n\ncp /opt/kube-ssl/admin*.pem CA/\nCOUNT=0\nwhile [[ $(curl --key CA/admin-key.pem --cert CA/admin.pem --cacert CA/ca.pem https://${INTERNAL_IP}:${MASTER_API_HTTPS}/healthz) != \"ok\" ]] ; do\n    echo \"sleep for 5 secs\"\n  sleep 5\n  COUNT=$(($COUNT+1))\n  if [[ $COUNT -eq 50 ]]; then\n    echo \"Error: creating cluster\"\n    exit 1\n  fi\ndone\n\nkubectl config set-cluster ${KUBE_CLUSTER_NAME}  --certificate-authority=$HOME/CA/ca.pem  --embed-certs=true --server=https://${INTERNAL_IP}:${MASTER_API_HTTPS}\nkubectl config set-credentials admin  --client-certificate=$HOME/CA/admin.pem  --client-key=$HOME/CA/admin-key.pem\nkubectl config set-context ${KUBE_CLUSTER_NAME}  --cluster=${KUBE_CLUSTER_NAME}  --user=admin\nkubectl config use-context ${KUBE_CLUSTER_NAME}\n\ncat <<EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRole\nmetadata:\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate: \"true\"\n  labels:\n    kubernetes.io/bootstrapping: rbac-defaults\n  name: system:kube-apiserver-to-kubelet\nrules:\n  - apiGroups:\n      - \"\"\n    resources:\n      - nodes/proxy\n      - nodes/stats\n      - nodes/log\n      - nodes/spec\n      - nodes/metrics\n    verbs:\n      - \"*\"\nEOF\n\ncat <<EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: system:kube-apiserver\n  namespace: \"\"\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:kube-apiserver-to-kubelet\nsubjects:\n  - apiGroup: rbac.authorization.k8s.io\n    kind: User\n    name: kubernetes\nEOF\n",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150016541133",
    "kind": "app_task",
    "uuid": "29e2fafd-b2af-45ac-8492-b3973a5d0232",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150016541133",
    "name": "Kubernetes_Master_Install_Configure"
  }
}
