{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "PcGetAdGroupUuid",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "#region headers\n# escript-template v20190611 / stephane.bourdeaud@nutanix.com\n# * author:     Bogdan-Nicolae.MITU@ext.eeas.europa.eu,\n# *             stephane.bourdeaud@nutanix.com\n# * version:    2019/09/17\n# task_name:    PcGetAdGroupUuid\n# description:  Given an AD group, return information from the directory.\n# output vars:  ad_group_uuid\n# endregion\n\n#region capture Calm variables\nusername = '@@{pc.username}@@'\nusername_secret = \"@@{pc.secret}@@\"\napi_server = \"@@{pc_ip}@@\"\nproject_vlan_id = \"@@{project_vlan_id}@@\"\ndirectory_uuid = \"@@{directory_uuid}@@\"\nad_group_dn = \"@@{ad_group_dn}@@\"\nad_group_name = \"@@{ad_group_name}@@\"\nnutanix_calm_user_upn = \"@@{calm_username}@@\"\n#endregion\n\n#region define variables\nad_group_uuid = \"\"\n#endregion\n\n# region prepare api call\napi_server_port = \"9440\"\napi_server_endpoint = \"/api/nutanix/v3/user_groups/list\"\nlength = 100\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\n\n# Compose the json payload\npayload = {\n    \"kind\":\"user_group\",\n    \"length\":length,\n    \"offset\":0\n}\n# endregion\n\n#region make the api call\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n#endregion\n\n#region process the results\nif resp.ok:\n    json_resp = json.loads(resp.content)\n    print(\"Processing results from {} to {}\".format(json_resp['metadata']['offset'], json_resp['metadata']['length']))\n    #look at each group and determine if it matches our AD group for this project\n    for directory_group in json_resp['entities']:\n        print(\"Comparing {0} with {1}\".format(ad_group_dn.lower(),directory_group['status']['resources']['directory_service_user_group']['distinguished_name']))\n        if ad_group_dn.lower() == directory_group['status']['resources']['directory_service_user_group']['distinguished_name']:\n            ad_group_uuid = directory_group['metadata']['uuid']\n            print(\"ad_group_uuid={}\".format(ad_group_uuid))\n            exit(0)\n    #adding processing if there is more than 1 page of results returned\n    while json_resp['metadata']['length'] is length:\n        payload = {\n            \"kind\": \"user\",\n            \"length\":length,\n            \"offset\": json_resp['metadata']['length'] + json_resp['metadata']['offset'] + 1\n        }\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            params=json.dumps(payload),\n            headers=headers,\n            verify=False\n        )\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            print(\"Processing results from {} to {}\".format(json_resp['metadata']['offset'], json_resp['metadata']['offset'] + json_resp['metadata']['length']))\n            for directory_group in json_resp['entities']:\n                print(\"Comparing {0} with {1}\".format(ad_group_dn,directory_group['status']['resources']['directory_service_user_group']['distinguished_name']))\n                if ad_group_dn == directory_group['status']['resources']['directory_service_user_group']['distinguished_name']:\n                    ad_group_uuid = directory_group['metadata']['uuid']\n                    print(\"ad_group_uuid={}\".format(ad_group_uuid))\n                    exit(0)\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(json.dumps(payload)))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    if ad_group_uuid == \"\":\n        print(\"Group {} does not have a UUID in Prism Central. Creating UUID...\".format(ad_group_name))\n        #region create idempotence identifier\n        # region prepare api call\n        api_server_port = \"9440\"\n        api_server_endpoint = \"/api/nutanix/v3/idempotence_identifiers\"\n        length = 100\n        url = \"https://{}:{}{}\".format(\n            api_server,\n            api_server_port,\n            api_server_endpoint\n        )\n        method = \"POST\"\n        headers = {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        }\n\n        # Compose the json payload\n        payload = {\n            \"count\": 1,\n            \"client_identifier\": nutanix_calm_user_upn,\n            \"valid_duration_in_minutes\": 2\n        }\n        # endregion\n\n        #region make the api call\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            params=json.dumps(payload),\n            headers=headers,\n            verify=False\n        )\n        #endregion\n\n        #region process results\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            nutanix_calm_idempotence_identifier = json_resp['uuid_list'][0]\n        else:\n            # print the content of the response (which should have the error message)\n            print(\"Request to create idempotence identifier failed\", json.dumps(\n                json.loads(resp.content),\n                indent=4\n            ))\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(payload))\n            exit(1)\n        #endregion\n        #endregion\n\n        #region create AD group UUID\n        # region prepare api call\n        api_server_port = \"9440\"\n        api_server_endpoint = \"/api/nutanix/v3/idempotence_identifiers/salted\"\n        length = 100\n        url = \"https://{}:{}{}\".format(\n            api_server,\n            api_server_port,\n            api_server_endpoint\n        )\n        method = \"POST\"\n        headers = {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        }\n\n        # Compose the json payload\n        payload = {\n            \"name_list\":[ad_group_name]\n        }\n        # endregion\n\n        #region make the api call\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            params=json.dumps(payload),\n            headers=headers,\n            verify=False\n        )\n        #endregion\n\n        #region process results\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            print(\"Successfully created UUID for AD group {}\".format(ad_group_name))\n            print(json_resp)\n            ad_group_uuid = json_resp['name_uuid_list'][0][ad_group_name]\n            print(\"ad_group_uuid={}\".format(ad_group_uuid))\n        else:\n            # print the content of the response (which should have the error message)\n            print(\"Request to create UUID failed\", json.dumps(\n                json.loads(resp.content),\n                indent=4\n            ))\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(payload))\n            exit(1)\n        #endregion\n        #endregion\n    else:\n        exit(0)   \nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(payload))\n    exit(1)\n# endregion"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "PcGetAdGroupUuid",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "#region headers\n# escript-template v20190611 / stephane.bourdeaud@nutanix.com\n# * author:     Bogdan-Nicolae.MITU@ext.eeas.europa.eu,\n# *             stephane.bourdeaud@nutanix.com\n# * version:    2019/09/17\n# task_name:    PcGetAdGroupUuid\n# description:  Given an AD group, return information from the directory.\n# output vars:  ad_group_uuid\n# endregion\n\n#region capture Calm variables\nusername = '@@{pc.username}@@'\nusername_secret = \"@@{pc.secret}@@\"\napi_server = \"@@{pc_ip}@@\"\nproject_vlan_id = \"@@{project_vlan_id}@@\"\ndirectory_uuid = \"@@{directory_uuid}@@\"\nad_group_dn = \"@@{ad_group_dn}@@\"\nad_group_name = \"@@{ad_group_name}@@\"\nnutanix_calm_user_upn = \"@@{calm_username}@@\"\n#endregion\n\n#region define variables\nad_group_uuid = \"\"\n#endregion\n\n# region prepare api call\napi_server_port = \"9440\"\napi_server_endpoint = \"/api/nutanix/v3/user_groups/list\"\nlength = 100\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\n\n# Compose the json payload\npayload = {\n    \"kind\":\"user_group\",\n    \"length\":length,\n    \"offset\":0\n}\n# endregion\n\n#region make the api call\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n#endregion\n\n#region process the results\nif resp.ok:\n    json_resp = json.loads(resp.content)\n    print(\"Processing results from {} to {}\".format(json_resp['metadata']['offset'], json_resp['metadata']['length']))\n    #look at each group and determine if it matches our AD group for this project\n    for directory_group in json_resp['entities']:\n        print(\"Comparing {0} with {1}\".format(ad_group_dn.lower(),directory_group['status']['resources']['directory_service_user_group']['distinguished_name']))\n        if ad_group_dn.lower() == directory_group['status']['resources']['directory_service_user_group']['distinguished_name']:\n            ad_group_uuid = directory_group['metadata']['uuid']\n            print(\"ad_group_uuid={}\".format(ad_group_uuid))\n            exit(0)\n    #adding processing if there is more than 1 page of results returned\n    while json_resp['metadata']['length'] is length:\n        payload = {\n            \"kind\": \"user\",\n            \"length\":length,\n            \"offset\": json_resp['metadata']['length'] + json_resp['metadata']['offset'] + 1\n        }\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            params=json.dumps(payload),\n            headers=headers,\n            verify=False\n        )\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            print(\"Processing results from {} to {}\".format(json_resp['metadata']['offset'], json_resp['metadata']['offset'] + json_resp['metadata']['length']))\n            for directory_group in json_resp['entities']:\n                print(\"Comparing {0} with {1}\".format(ad_group_dn,directory_group['status']['resources']['directory_service_user_group']['distinguished_name']))\n                if ad_group_dn == directory_group['status']['resources']['directory_service_user_group']['distinguished_name']:\n                    ad_group_uuid = directory_group['metadata']['uuid']\n                    print(\"ad_group_uuid={}\".format(ad_group_uuid))\n                    exit(0)\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(json.dumps(payload)))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    if ad_group_uuid == \"\":\n        print(\"Group {} does not have a UUID in Prism Central. Creating UUID...\".format(ad_group_name))\n        #region create idempotence identifier\n        # region prepare api call\n        api_server_port = \"9440\"\n        api_server_endpoint = \"/api/nutanix/v3/idempotence_identifiers\"\n        length = 100\n        url = \"https://{}:{}{}\".format(\n            api_server,\n            api_server_port,\n            api_server_endpoint\n        )\n        method = \"POST\"\n        headers = {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        }\n\n        # Compose the json payload\n        payload = {\n            \"count\": 1,\n            \"client_identifier\": nutanix_calm_user_upn,\n            \"valid_duration_in_minutes\": 2\n        }\n        # endregion\n\n        #region make the api call\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            params=json.dumps(payload),\n            headers=headers,\n            verify=False\n        )\n        #endregion\n\n        #region process results\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            nutanix_calm_idempotence_identifier = json_resp['uuid_list'][0]\n        else:\n            # print the content of the response (which should have the error message)\n            print(\"Request to create idempotence identifier failed\", json.dumps(\n                json.loads(resp.content),\n                indent=4\n            ))\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(payload))\n            exit(1)\n        #endregion\n        #endregion\n\n        #region create AD group UUID\n        # region prepare api call\n        api_server_port = \"9440\"\n        api_server_endpoint = \"/api/nutanix/v3/idempotence_identifiers/salted\"\n        length = 100\n        url = \"https://{}:{}{}\".format(\n            api_server,\n            api_server_port,\n            api_server_endpoint\n        )\n        method = \"POST\"\n        headers = {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        }\n\n        # Compose the json payload\n        payload = {\n            \"name_list\":[ad_group_name]\n        }\n        # endregion\n\n        #region make the api call\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            params=json.dumps(payload),\n            headers=headers,\n            verify=False\n        )\n        #endregion\n\n        #region process results\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            print(\"Successfully created UUID for AD group {}\".format(ad_group_name))\n            print(json_resp)\n            ad_group_uuid = json_resp['name_uuid_list'][0][ad_group_name]\n            print(\"ad_group_uuid={}\".format(ad_group_uuid))\n        else:\n            # print the content of the response (which should have the error message)\n            print(\"Request to create UUID failed\", json.dumps(\n                json.loads(resp.content),\n                indent=4\n            ))\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(payload))\n            exit(1)\n        #endregion\n        #endregion\n    else:\n        exit(0)   \nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(payload))\n    exit(1)\n# endregion",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150293206340",
    "kind": "app_task",
    "uuid": "9ce9ccd3-d6e9-4eb0-9216-1c979f86f2af",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150293206340",
    "name": "PcGetAdGroupUuid"
  }
}
