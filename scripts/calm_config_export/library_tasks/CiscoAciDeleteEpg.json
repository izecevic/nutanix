{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "CiscoAciDeleteEpg",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "# region headers\n# escript-template v20190611 / stephane.bourdeaud@nutanix.com\n# * author:     jose.gomez@nutanix.com, stephane.bourdeaud@nutanix.com\n# * version:    2019/06/12 - v1\n# task_name:    CiscoAciDeleteEpg\n# description:  Deletes the specified EPG object in the Cisco ACI fabric in the\n#               specified tenant and application profile.\n# endregion\n\n# region capture Calm variables\nusername = \"@@{aci_user.username}@@\"\nusername_secret = \"@@{aci_user.secret}@@\"\napi_server = \"@@{aci_ip}@@\"\naci_tenant_name = \"@@{aci_tenant_name}@@\"\naci_ap_name = \"@@{aci_ap_name}@@\"\naci_epg_name = \"@@{aci_epg_name}@@\"\n# endregion\n\n# region prepare variables\naci_ap_dn = \"uni/tn-{}/ap-{}\".format(aci_tenant_name, aci_ap_name)\naci_epg_dn = \"uni/tn-{}/ap-{}/epg-{}\".format(\n    aci_tenant_name,\n    aci_ap_name,\n    aci_epg_name\n)\n# endregion\n\n# region generic prepare api call\napi_server_port = \"443\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\n# endregion\n\n# region login\n# prepare\napi_server_endpoint = \"/api/aaaLogin.json\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\n\n# Compose the json payload\npayload = {\n    \"aaaUser\": {\n        \"attributes\": {\n            \"name\": username,\n            \"pwd\": username_secret\n        }\n    }\n}\n\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\n# ! Get rid of verify=False if you're using proper certificates\nresp = urlreq(\n    url,\n    verb=method,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n\n# deal with the result/response\nif resp.ok:\n    print(\"Login request was successful\")\n    json_resp = json.loads(resp.content)\n    aci_token = json_resp['imdata'][0]['aaaLogin']['attributes']['token']\n    headers = {'content-type': 'application/json', 'Cookie': 'APIC-Cookie=' + aci_token}\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(json.dumps(payload)))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n\n# region POST to delete EPG in application profile in tenant\n# prepare\napi_server_endpoint = \"/api/node/mo/{}.json\".format(aci_ap_dn)\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\n\n# Compose the json payload\npayload = {\n    \"fvAp\": {\n        \"attributes\": {\n            \"dn\": aci_ap_dn,\n            \"status\": \"modified\"\n        },\n        \"children\": [\n            {\n                \"fvAEPg\": {\n                    \"attributes\": {\n                        \"dn\": aci_epg_dn,\n                        \"status\": \"deleted\"\n                    },\n                    \"children\": []\n                }\n            }\n        ]\n    }\n}\n\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\n# ! Get rid of verify=False if you're using proper certificates\nresp = urlreq(\n    url,\n    verb=method,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request to delete EPG {} in application profile {} in tenant {} was successful\".format(\n        aci_epg_name,\n        aci_ap_name,\n        aci_tenant_name\n        )\n    )\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(json.dumps(payload)))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n\n# region logout\n# prepare\napi_server_endpoint = \"/api/aaaLogout.json\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\n\n# Compose the json payload\npayload = {\n    \"aaaUser\": {\n        \"attributes\": {\n            \"name\": username,\n            \"pwd\": username_secret\n        }\n    }\n}\n\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\n# ! Get rid of verify=False if you're using proper certificates\nresp = urlreq(\n    url,\n    verb=method,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n\n# deal with the result/response\nif resp.ok:\n    print(\"Logout request was successful\")\n    exit(0)\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(json.dumps(payload)))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "CiscoAciDeleteEpg",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "# region headers\n# escript-template v20190611 / stephane.bourdeaud@nutanix.com\n# * author:     jose.gomez@nutanix.com, stephane.bourdeaud@nutanix.com\n# * version:    2019/06/12 - v1\n# task_name:    CiscoAciDeleteEpg\n# description:  Deletes the specified EPG object in the Cisco ACI fabric in the\n#               specified tenant and application profile.\n# endregion\n\n# region capture Calm variables\nusername = \"@@{aci_user.username}@@\"\nusername_secret = \"@@{aci_user.secret}@@\"\napi_server = \"@@{aci_ip}@@\"\naci_tenant_name = \"@@{aci_tenant_name}@@\"\naci_ap_name = \"@@{aci_ap_name}@@\"\naci_epg_name = \"@@{aci_epg_name}@@\"\n# endregion\n\n# region prepare variables\naci_ap_dn = \"uni/tn-{}/ap-{}\".format(aci_tenant_name, aci_ap_name)\naci_epg_dn = \"uni/tn-{}/ap-{}/epg-{}\".format(\n    aci_tenant_name,\n    aci_ap_name,\n    aci_epg_name\n)\n# endregion\n\n# region generic prepare api call\napi_server_port = \"443\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\n# endregion\n\n# region login\n# prepare\napi_server_endpoint = \"/api/aaaLogin.json\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\n\n# Compose the json payload\npayload = {\n    \"aaaUser\": {\n        \"attributes\": {\n            \"name\": username,\n            \"pwd\": username_secret\n        }\n    }\n}\n\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\n# ! Get rid of verify=False if you're using proper certificates\nresp = urlreq(\n    url,\n    verb=method,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n\n# deal with the result/response\nif resp.ok:\n    print(\"Login request was successful\")\n    json_resp = json.loads(resp.content)\n    aci_token = json_resp['imdata'][0]['aaaLogin']['attributes']['token']\n    headers = {'content-type': 'application/json', 'Cookie': 'APIC-Cookie=' + aci_token}\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(json.dumps(payload)))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n\n# region POST to delete EPG in application profile in tenant\n# prepare\napi_server_endpoint = \"/api/node/mo/{}.json\".format(aci_ap_dn)\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\n\n# Compose the json payload\npayload = {\n    \"fvAp\": {\n        \"attributes\": {\n            \"dn\": aci_ap_dn,\n            \"status\": \"modified\"\n        },\n        \"children\": [\n            {\n                \"fvAEPg\": {\n                    \"attributes\": {\n                        \"dn\": aci_epg_dn,\n                        \"status\": \"deleted\"\n                    },\n                    \"children\": []\n                }\n            }\n        ]\n    }\n}\n\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\n# ! Get rid of verify=False if you're using proper certificates\nresp = urlreq(\n    url,\n    verb=method,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request to delete EPG {} in application profile {} in tenant {} was successful\".format(\n        aci_epg_name,\n        aci_ap_name,\n        aci_tenant_name\n        )\n    )\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(json.dumps(payload)))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n\n# region logout\n# prepare\napi_server_endpoint = \"/api/aaaLogout.json\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\n\n# Compose the json payload\npayload = {\n    \"aaaUser\": {\n        \"attributes\": {\n            \"name\": username,\n            \"pwd\": username_secret\n        }\n    }\n}\n\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\n# ! Get rid of verify=False if you're using proper certificates\nresp = urlreq(\n    url,\n    verb=method,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n\n# deal with the result/response\nif resp.ok:\n    print(\"Logout request was successful\")\n    exit(0)\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(json.dumps(payload)))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150183449003",
    "kind": "app_task",
    "uuid": "abf6bc1d-2a0d-4c96-bcc2-57fef4f2a5bd",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150183449003",
    "name": "CiscoAciDeleteEpg"
  }
}
