{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "PhpIPAMGetSubnet",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "# region headers\n# escript-template v20190611 / stephane.bourdeaud@nutanix.com\n# * author:     stephane.bourdeaud@nutanix.com\n# * version:    v1.0/20200129 - initial version\n# task_name:    PhpIPAMGetSubnet\n# description:  Given a php-ipam server ip/fqdn, and a subnet id, return\n#               information about that subnet (mask, gateway, used IPs, \n#               total IPs, free IPs). It assumes the gateway and nameservers\n#               have been defined on the subnet.\n# output vars:  phpipam_subnet_mask, phpipam_subnet_bitmask,  \n#               phpipam_subnet_gateway, phpipam_subnet_total_ips,\n#               phpipam_subnet_nameservers\n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\napi_server = \"@@{phpipam_ip}@@\"\nphpipam_token = \"@@{phpipam_token}@@\"\nphpipam_app_id = \"@@{phpipam_app_id}@@\"\nphpipam_subnet_id = \"@@{phpipam_subnet_id}@@\"\n# endregion\n\n# region prepare api call\n#! note that if your app security in php-ipam is set to 'none'\n#! you will have to change the port to 80 and url to http.\napi_server_port = \"443\"\napi_server_endpoint = \"/api/{}/subnets/{}/\".format(phpipam_app_id,phpipam_subnet_id)\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"GET\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'token' : phpipam_token\n}\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\n# ! Get rid of verify=False if you're using proper certificates\nresp = urlreq(\n    url,\n    verb=method,\n    headers=headers,\n    verify=False\n)\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful. Status code: {}\".format(resp.status_code))\n    #print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    print(\"phpipam_subnet_mask: {}\".format(json.loads(resp.content)['data']['calculation']['Subnet netmask']))\n    print(\"phpipam_subnet_bitmask: {}\".format(json.loads(resp.content)['data']['calculation']['Subnet bitmask']))\n    print(\"phpipam_subnet_gateway: {}\".format(json.loads(resp.content)['data']['gateway']['ip_addr']))\n    print(\"phpipam_subnet_total_ips: {}\".format(json.loads(resp.content)['data']['calculation']['Number of hosts']))\n    print(\"phpipam_subnet_nameservers: {}\".format(json.loads(resp.content)['data']['nameservers']['namesrv1']))\n    exit(0)\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "PhpIPAMGetSubnet",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "# region headers\n# escript-template v20190611 / stephane.bourdeaud@nutanix.com\n# * author:     stephane.bourdeaud@nutanix.com\n# * version:    v1.0/20200129 - initial version\n# task_name:    PhpIPAMGetSubnet\n# description:  Given a php-ipam server ip/fqdn, and a subnet id, return\n#               information about that subnet (mask, gateway, used IPs, \n#               total IPs, free IPs). It assumes the gateway and nameservers\n#               have been defined on the subnet.\n# output vars:  phpipam_subnet_mask, phpipam_subnet_bitmask,  \n#               phpipam_subnet_gateway, phpipam_subnet_total_ips,\n#               phpipam_subnet_nameservers\n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\napi_server = \"@@{phpipam_ip}@@\"\nphpipam_token = \"@@{phpipam_token}@@\"\nphpipam_app_id = \"@@{phpipam_app_id}@@\"\nphpipam_subnet_id = \"@@{phpipam_subnet_id}@@\"\n# endregion\n\n# region prepare api call\n#! note that if your app security in php-ipam is set to 'none'\n#! you will have to change the port to 80 and url to http.\napi_server_port = \"443\"\napi_server_endpoint = \"/api/{}/subnets/{}/\".format(phpipam_app_id,phpipam_subnet_id)\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"GET\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'token' : phpipam_token\n}\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\n# ! Get rid of verify=False if you're using proper certificates\nresp = urlreq(\n    url,\n    verb=method,\n    headers=headers,\n    verify=False\n)\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful. Status code: {}\".format(resp.status_code))\n    #print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    print(\"phpipam_subnet_mask: {}\".format(json.loads(resp.content)['data']['calculation']['Subnet netmask']))\n    print(\"phpipam_subnet_bitmask: {}\".format(json.loads(resp.content)['data']['calculation']['Subnet bitmask']))\n    print(\"phpipam_subnet_gateway: {}\".format(json.loads(resp.content)['data']['gateway']['ip_addr']))\n    print(\"phpipam_subnet_total_ips: {}\".format(json.loads(resp.content)['data']['calculation']['Number of hosts']))\n    print(\"phpipam_subnet_nameservers: {}\".format(json.loads(resp.content)['data']['nameservers']['namesrv1']))\n    exit(0)\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150285983485",
    "kind": "app_task",
    "uuid": "99a3583b-89ba-453f-be6a-59915d886b63",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150285983485",
    "name": "PhpIPAMGetSubnet"
  }
}
