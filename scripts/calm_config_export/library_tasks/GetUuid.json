{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "GetUuid",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": " #script\n# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    14082019\n# task_name:    GetUuid\n# description:  this task is used to grab all the required uuid\n# endregion\n\ncontroller_url = \"@@{CONTROLLER_URL}@@\"\n# setting up object names that we would like to get their uuid\ncloud_name = \"@@{CLOUD_NAME}@@\"\nnetwork_name = \"@@{NETWORK_NAME}@@\"\nwaf_policy = \"@@{WAF_POLICY}@@\"\napplication_profile = \"@@{APP_PROFILE_NAME}@@\"\nse_group_name = \"@@{SE_GROUP_NAME}@@\"\nvrf_context = \"@@{VRF_CONTEXT}@@\"\n# list of all urls that you need to get uuid from\n# key is calm variable name, item is the url endpoint for the api call, and the last element is the object name\nuuid_url = {\"CLOUD_UUID\":{\"/api/cloud?name=\":cloud_name}, \"NETWORK_UUID\":{\"/api/network?name=\":network_name},\\\n            \"WAF_UUID\":{\"/api/wafpolicy?name=\":waf_policy}, \"APP_PROFILE_UUID\":{\"/api/applicationprofile?name=\":application_profile},\n\t\t\t\"SE_GROUP_UUID\": {\"/api/serviceenginegroup?name=\": se_group_name},\"VRF_UUID\":{\"/api//vrfcontext?name=\":vrf_context}\n           }\n\ndef get_uuid(controller_url,uuid_url):\n    \"\"\" This function return the uuid of the object name specified on uuid_url \n        Args:\n         controller_url: http://avi_controller_ip\n         uuid_url: list of Calm variable, urls and object name that we would like to get\n\t\tReturns:\n\t\t print Calm variable name with the corresponding uuid\n    \n    \"\"\"\n\n    # setting up header\n    h_api_version = \"@@{API_VERSION}@@\"\n    h_encoding = \"@@{ENCODING}@@\"\n    h_content = \"@@{CONTENT}@@\"\n    h_sessionid = \"@@{SESSION_ID}@@\"\n    h_csrftoken = \"@@{CSRF_TOKEN}@@\"\n    \n\n    headers = {\n        'cookie': \"sessionid=\" + h_sessionid +\"; csrftoken=\" + h_csrftoken,\n        'X-Avi-Version': h_api_version,\n        'Accept-Encoding': h_encoding,\n        'Content-type': h_content\n        }\n        \n    # endregion\n\t# going through the uuid_url to get the uuid\n    for var_name, url in uuid_url.items():\n        for endpoint, object_name in url.items():\n            endpoint_url = controller_url + endpoint + object_name\n            #print(\"{}={}\".format(var_name, object_name))\n            print \"Enpoint url =\", endpoint_url\n        response = urlreq(endpoint_url, verb='GET', headers=headers, verify=False)\n    \n        # deal with the result/response\n        if response.ok:\n            print \"Request was successfully\"\n            result = json.loads(response.content)\n            print \"{}={}\".format(var_name,result['results'][0]['uuid'])\n            \n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(response.status_code))\n            print('Response: {}'.format(response.text))\n            exit(1)\n        \n        # endregion\n        \nif \"@@{AVI_INTEGRATION}@@\" == \"yes\":\n    get_uuid(controller_url,uuid_url)\n"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "GetUuid",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": " #script\n# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    14082019\n# task_name:    GetUuid\n# description:  this task is used to grab all the required uuid\n# endregion\n\ncontroller_url = \"@@{CONTROLLER_URL}@@\"\n# setting up object names that we would like to get their uuid\ncloud_name = \"@@{CLOUD_NAME}@@\"\nnetwork_name = \"@@{NETWORK_NAME}@@\"\nwaf_policy = \"@@{WAF_POLICY}@@\"\napplication_profile = \"@@{APP_PROFILE_NAME}@@\"\nse_group_name = \"@@{SE_GROUP_NAME}@@\"\nvrf_context = \"@@{VRF_CONTEXT}@@\"\n# list of all urls that you need to get uuid from\n# key is calm variable name, item is the url endpoint for the api call, and the last element is the object name\nuuid_url = {\"CLOUD_UUID\":{\"/api/cloud?name=\":cloud_name}, \"NETWORK_UUID\":{\"/api/network?name=\":network_name},\\\n            \"WAF_UUID\":{\"/api/wafpolicy?name=\":waf_policy}, \"APP_PROFILE_UUID\":{\"/api/applicationprofile?name=\":application_profile},\n\t\t\t\"SE_GROUP_UUID\": {\"/api/serviceenginegroup?name=\": se_group_name},\"VRF_UUID\":{\"/api//vrfcontext?name=\":vrf_context}\n           }\n\ndef get_uuid(controller_url,uuid_url):\n    \"\"\" This function return the uuid of the object name specified on uuid_url \n        Args:\n         controller_url: http://avi_controller_ip\n         uuid_url: list of Calm variable, urls and object name that we would like to get\n\t\tReturns:\n\t\t print Calm variable name with the corresponding uuid\n    \n    \"\"\"\n\n    # setting up header\n    h_api_version = \"@@{API_VERSION}@@\"\n    h_encoding = \"@@{ENCODING}@@\"\n    h_content = \"@@{CONTENT}@@\"\n    h_sessionid = \"@@{SESSION_ID}@@\"\n    h_csrftoken = \"@@{CSRF_TOKEN}@@\"\n    \n\n    headers = {\n        'cookie': \"sessionid=\" + h_sessionid +\"; csrftoken=\" + h_csrftoken,\n        'X-Avi-Version': h_api_version,\n        'Accept-Encoding': h_encoding,\n        'Content-type': h_content\n        }\n        \n    # endregion\n\t# going through the uuid_url to get the uuid\n    for var_name, url in uuid_url.items():\n        for endpoint, object_name in url.items():\n            endpoint_url = controller_url + endpoint + object_name\n            #print(\"{}={}\".format(var_name, object_name))\n            print \"Enpoint url =\", endpoint_url\n        response = urlreq(endpoint_url, verb='GET', headers=headers, verify=False)\n    \n        # deal with the result/response\n        if response.ok:\n            print \"Request was successfully\"\n            result = json.loads(response.content)\n            print \"{}={}\".format(var_name,result['results'][0]['uuid'])\n            \n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(response.status_code))\n            print('Response: {}'.format(response.text))\n            exit(1)\n        \n        # endregion\n        \nif \"@@{AVI_INTEGRATION}@@\" == \"yes\":\n    get_uuid(controller_url,uuid_url)\n",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150135976142",
    "kind": "app_task",
    "uuid": "9be12489-3096-42ef-87b7-ae8a86a94cf4",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150135976142",
    "name": "GetUuid"
  }
}
