{
  "status": {
    "state": "DRAFT",
    "message_list": [
      {
        "message": "Macro syntax error in field: script",
        "reason": "INVALID_MACRO",
        "details": []
      }
    ],
    "name": "create_vpc",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "'''\nCreates:\n    An Elastic IP for NAT Gateway(external connection for private subnet)\n    VPC\n    Private and Public subnets for the VPC\n    Internet gateway\n    Route tables for private and public subnets\n    NAT Gateway\n\n* Access to VMs in public subnet will be restricted based on security group policies\n* VMs created under private subnet will only be accessible from VMs in public subnet\n* Direct access would require creation of a VPN(Site-to-Site VPN) under VPC\n'''\n\nACCESS_KEY = '@@{cred_aws.username}@@'\nSECRET_KEY = '@@{cred_aws.secret}@@'\nAWS_REGION = '@@{clusters_geolocation}@@'\nELASTIC_IP_NAME_TAG = '@@{elastic_ip_name_tag}@@'\nVPC_NAME = '@@{vpc_name}@@'\nVPC_CIDR_BLOCK = '@@{vpc_cidr_block}@@'\nPUBLIC_SUBNET_NAME = '@@{public_subnet_name}@@'\nPUBLIC_SUBNET_CIDR = '@@{public_subnet_cidr}'\nPRIVATE_SUBNET_NAME = '@@{private_subnet_name}@@'\nPRIVATE_SUBNET_CIDR = '@@{private_subnet_cidr}@@'\nINTERNET_GATEWAY_NAME = '@@{internet_gateway_name}@@'\nPUBLIC_ROUTE_TABLE_NAME = '@@{public_route_table_name}@@'\nPRIVATE_ROUTE_TABLE_NAME = '@@{private_route_table_name}@@'\nNAT_GATEWAY_NAME = '@@{nat_gateway_name}@@'\n\nimport boto3\nfrom botocore.exceptions import ClientError\nfrom botocore.exceptions import WaiterError\n\ndef setup():\n    '''create client'''\n    boto3.setup_default_session(\n        aws_access_key_id=ACCESS_KEY,\n        aws_secret_access_key=SECRET_KEY,\n        region_name=AWS_REGION\n    )\n    return boto3.client('ec2'), boto3.resource('ec2')\n\ndef allocate_elastic_ip(client):\n    '''allocate elastic IP for VPC internet gateway'''\n    print(\"Allocating Elastic IP for for NAT Gateway\")\n    allocation = client.allocate_address(Domain='vpc')\n    print(\"Allocation Id: \"+ allocation['AllocationId'] + \" Public IP: \" + allocation['PublicIp'])\n    client.create_tags(Resources=[allocation['AllocationId']], Tags=[{\"Key\": \"Name\", \"Value\": ELASTIC_IP_NAME_TAG}])\n    print(\"Added Name tag: \" + ELASTIC_IP_NAME_TAG + \" to Elastic IP\")\n    return allocation['AllocationId']\n\ndef create_vpc_and_dependencies(resource):\n\n    print(\"Creating VPC\")\n    # create VPC\n    vpc = resource.create_vpc(CidrBlock=VPC_CIDR_BLOCK)\n    vpc.create_tags(Tags=[{\"Key\": \"Name\", \"Value\": VPC_NAME}])\n    vpc.wait_until_available()\n    print(\"Created VPC: \" + vpc.id)\n\n    print(\"Creating Subnets and Internet Gateway\")\n    # Create public and private subnets\n    public_subnet = resource.create_subnet(CidrBlock=PUBLIC_SUBNET_CIDR, VpcId=vpc.id)\n    public_subnet.create_tags(Tags=[{\"Key\": \"Name\", \"Value\": PUBLIC_SUBNET_NAME}])\n    private_subnet = resource.create_subnet(CidrBlock=PRIVATE_SUBNET_CIDR, VpcId=vpc.id)\n    private_subnet.create_tags(Tags=[{\"Key\": \"Name\", \"Value\": PRIVATE_SUBNET_NAME}])\n\n    # Create internet gateway\n    internet_gateway = resource.create_internet_gateway()\n    internet_gateway.create_tags(Tags=[{\"Key\": \"Name\", \"Value\": INTERNET_GATEWAY_NAME}])\n    vpc.attach_internet_gateway(InternetGatewayId=internet_gateway.id)\n\n    print(\"Creating route tables\")\n    # Create a route table and route for public subnet\n    public_route_table = vpc.create_route_table()\n    public_route_table.create_tags(Tags=[{\"Key\": \"Name\", \"Value\": PUBLIC_ROUTE_TABLE_NAME}])\n    public_route_table.create_route(DestinationCidrBlock='0.0.0.0/0', GatewayId=internet_gateway.id)\n    # Associate the route table with public subnet\n    public_route_table.associate_with_subnet(SubnetId=public_subnet.id)\n\n    # Create private route table and assosiate it with the private subnet\n    private_route_table = vpc.create_route_table()\n    private_route_table.create_tags(Tags=[{\"Key\": \"Name\", \"Value\": PRIVATE_ROUTE_TABLE_NAME}])\n    private_route_table.associate_with_subnet(SubnetId=private_subnet.id)\n\n    return public_subnet.id, private_route_table\n\ndef create_gateway(waiter, client, eip, public_sub, private_rt):\n    # Create NAT gateway for private subnet\n    print(\"Creating NAT Gateway for private subnet\")\n    gateway_creation_response = client.create_nat_gateway(AllocationId=eip, SubnetId=public_sub)\n    gateway_id = gateway_creation_response['NatGateway']['NatGatewayId']\n    client.create_tags(Resources=[gateway_id], Tags=[{\"Key\": \"Name\", \"Value\": NAT_GATEWAY_NAME}])\n    print(\"Waiting for NAT gateway to be available\")\n    waiter.wait(NatGatewayIds=[gateway_id])\n    print(\"Created NAT Gateway: \" + gateway_id)\n\n    # Add destiantion route with NAT gateway to private route table\n    private_rt.create_route(DestinationCidrBlock='0.0.0.0/0', NatGatewayId=gateway_id)\n    print(\"##### VPC creation is complete #####\")\n\ndef main():\n    try:\n        ec2_client, ec2_resource = setup()\n        waiter = ec2_client.get_waiter('nat_gateway_available')\n        elastic_ip_allocation_id = allocate_elastic_ip(ec2_client)\n        pub_subnet_id, priv_route_table = create_vpc_and_dependencies(ec2_resource)\n        create_gateway(waiter, ec2_client, elastic_ip_allocation_id, pub_subnet_id, priv_route_table)\n    except ClientError as e:\n        print(\"Unexpected error: \" + str(e))\n        raise\n    except WaiterError as e:\n        print(\"NAT Gateway creation failed to complete in 10 minutes\")\n        print(str(e))\n        raise\n\nif __name__ == '__main__':\n    main()\n"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "create_vpc",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "'''\nCreates:\n    An Elastic IP for NAT Gateway(external connection for private subnet)\n    VPC\n    Private and Public subnets for the VPC\n    Internet gateway\n    Route tables for private and public subnets\n    NAT Gateway\n\n* Access to VMs in public subnet will be restricted based on security group policies\n* VMs created under private subnet will only be accessible from VMs in public subnet\n* Direct access would require creation of a VPN(Site-to-Site VPN) under VPC\n'''\n\nACCESS_KEY = '@@{cred_aws.username}@@'\nSECRET_KEY = '@@{cred_aws.secret}@@'\nAWS_REGION = '@@{clusters_geolocation}@@'\nELASTIC_IP_NAME_TAG = '@@{elastic_ip_name_tag}@@'\nVPC_NAME = '@@{vpc_name}@@'\nVPC_CIDR_BLOCK = '@@{vpc_cidr_block}@@'\nPUBLIC_SUBNET_NAME = '@@{public_subnet_name}@@'\nPUBLIC_SUBNET_CIDR = '@@{public_subnet_cidr}'\nPRIVATE_SUBNET_NAME = '@@{private_subnet_name}@@'\nPRIVATE_SUBNET_CIDR = '@@{private_subnet_cidr}@@'\nINTERNET_GATEWAY_NAME = '@@{internet_gateway_name}@@'\nPUBLIC_ROUTE_TABLE_NAME = '@@{public_route_table_name}@@'\nPRIVATE_ROUTE_TABLE_NAME = '@@{private_route_table_name}@@'\nNAT_GATEWAY_NAME = '@@{nat_gateway_name}@@'\n\nimport boto3\nfrom botocore.exceptions import ClientError\nfrom botocore.exceptions import WaiterError\n\ndef setup():\n    '''create client'''\n    boto3.setup_default_session(\n        aws_access_key_id=ACCESS_KEY,\n        aws_secret_access_key=SECRET_KEY,\n        region_name=AWS_REGION\n    )\n    return boto3.client('ec2'), boto3.resource('ec2')\n\ndef allocate_elastic_ip(client):\n    '''allocate elastic IP for VPC internet gateway'''\n    print(\"Allocating Elastic IP for for NAT Gateway\")\n    allocation = client.allocate_address(Domain='vpc')\n    print(\"Allocation Id: \"+ allocation['AllocationId'] + \" Public IP: \" + allocation['PublicIp'])\n    client.create_tags(Resources=[allocation['AllocationId']], Tags=[{\"Key\": \"Name\", \"Value\": ELASTIC_IP_NAME_TAG}])\n    print(\"Added Name tag: \" + ELASTIC_IP_NAME_TAG + \" to Elastic IP\")\n    return allocation['AllocationId']\n\ndef create_vpc_and_dependencies(resource):\n\n    print(\"Creating VPC\")\n    # create VPC\n    vpc = resource.create_vpc(CidrBlock=VPC_CIDR_BLOCK)\n    vpc.create_tags(Tags=[{\"Key\": \"Name\", \"Value\": VPC_NAME}])\n    vpc.wait_until_available()\n    print(\"Created VPC: \" + vpc.id)\n\n    print(\"Creating Subnets and Internet Gateway\")\n    # Create public and private subnets\n    public_subnet = resource.create_subnet(CidrBlock=PUBLIC_SUBNET_CIDR, VpcId=vpc.id)\n    public_subnet.create_tags(Tags=[{\"Key\": \"Name\", \"Value\": PUBLIC_SUBNET_NAME}])\n    private_subnet = resource.create_subnet(CidrBlock=PRIVATE_SUBNET_CIDR, VpcId=vpc.id)\n    private_subnet.create_tags(Tags=[{\"Key\": \"Name\", \"Value\": PRIVATE_SUBNET_NAME}])\n\n    # Create internet gateway\n    internet_gateway = resource.create_internet_gateway()\n    internet_gateway.create_tags(Tags=[{\"Key\": \"Name\", \"Value\": INTERNET_GATEWAY_NAME}])\n    vpc.attach_internet_gateway(InternetGatewayId=internet_gateway.id)\n\n    print(\"Creating route tables\")\n    # Create a route table and route for public subnet\n    public_route_table = vpc.create_route_table()\n    public_route_table.create_tags(Tags=[{\"Key\": \"Name\", \"Value\": PUBLIC_ROUTE_TABLE_NAME}])\n    public_route_table.create_route(DestinationCidrBlock='0.0.0.0/0', GatewayId=internet_gateway.id)\n    # Associate the route table with public subnet\n    public_route_table.associate_with_subnet(SubnetId=public_subnet.id)\n\n    # Create private route table and assosiate it with the private subnet\n    private_route_table = vpc.create_route_table()\n    private_route_table.create_tags(Tags=[{\"Key\": \"Name\", \"Value\": PRIVATE_ROUTE_TABLE_NAME}])\n    private_route_table.associate_with_subnet(SubnetId=private_subnet.id)\n\n    return public_subnet.id, private_route_table\n\ndef create_gateway(waiter, client, eip, public_sub, private_rt):\n    # Create NAT gateway for private subnet\n    print(\"Creating NAT Gateway for private subnet\")\n    gateway_creation_response = client.create_nat_gateway(AllocationId=eip, SubnetId=public_sub)\n    gateway_id = gateway_creation_response['NatGateway']['NatGatewayId']\n    client.create_tags(Resources=[gateway_id], Tags=[{\"Key\": \"Name\", \"Value\": NAT_GATEWAY_NAME}])\n    print(\"Waiting for NAT gateway to be available\")\n    waiter.wait(NatGatewayIds=[gateway_id])\n    print(\"Created NAT Gateway: \" + gateway_id)\n\n    # Add destiantion route with NAT gateway to private route table\n    private_rt.create_route(DestinationCidrBlock='0.0.0.0/0', NatGatewayId=gateway_id)\n    print(\"##### VPC creation is complete #####\")\n\ndef main():\n    try:\n        ec2_client, ec2_resource = setup()\n        waiter = ec2_client.get_waiter('nat_gateway_available')\n        elastic_ip_allocation_id = allocate_elastic_ip(ec2_client)\n        pub_subnet_id, priv_route_table = create_vpc_and_dependencies(ec2_resource)\n        create_gateway(waiter, ec2_client, elastic_ip_allocation_id, pub_subnet_id, priv_route_table)\n    except ClientError as e:\n        print(\"Unexpected error: \" + str(e))\n        raise\n    except WaiterError as e:\n        print(\"NAT Gateway creation failed to complete in 10 minutes\")\n        print(str(e))\n        raise\n\nif __name__ == '__main__':\n    main()\n",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150138014881",
    "kind": "app_task",
    "uuid": "6b5e01f6-9ecd-4efc-b0f9-439d327c9308",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150138014881",
    "name": "create_vpc"
  }
}
