{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "CreatePool",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "#script\n# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    14082019\n# task_name:    CreatePool\n# description:  this task is used to create a pool that include all the servers deployed through Calm\n# endregion\n\n# setting up variables and header\ncontroller_url = \"@@{CONTROLLER_URL}@@\"\nh_referer = \"@@{REFERER}@@\"\nh_api_version = \"@@{API_VERSION}@@\"\nh_encoding = \"@@{ENCODING}@@\"\nh_content = \"@@{CONTENT}@@\"\nr_csrftoken = \"@@{CSRF_TOKEN}@@\"\nr_sessionid = \"@@{SESSION_ID}@@\"\npool_port = \"@@{POOL_PORT}@@\"\n\nheaders_post = {\n    'cookie': \"sessionid=\" + r_sessionid +\"; csrftoken=\" + r_csrftoken,\n    'X-Avi-Version': h_api_version,\n    'Accept-Encoding': h_encoding,\n    'Content-type': h_content,\n    'X-CSRFToken': r_csrftoken,\n    'Referer': h_referer\n    }\n    \nmy_servers = [\"@@{Node1.address}@@\"] #\"@@{calm_array_address}@@\"\nprint \"my_servers = {}\".format(my_servers)\n# endregion\n\ndef create_pool(controller_url,headers_post,cloud_uuid, name, description, vrf_uuid, servers, port):\n    \"\"\" This function create a pool and return it's uuid to be used later \n        Args:\n         controller_url: http://avi_controller_ip\n         headers_post: header with the sessionid and csrftoken\n         cloud_uuid: the cloud uuid that will host the pool\n\t\t name: pool name\n\t\t description: pool description\n\t\t servers: array containing the list of server to be included\n\t\t port: port number\n\t\tReturns:\n\t\t POOL_UUID: uuid of the created pool\n    \n    \"\"\"\n    pool_url = controller_url + \"/api/pool\"\n    create_pool_payload = {}\n    create_pool_payload['cloud_ref'] = cloud_uuid\n    create_pool_payload['vrf_ref'] = vrf_uuid\n    create_pool_payload['description'] = description\n    create_pool_payload['name'] = name\n    create_pool_payload['servers'] = []\n\n    for server in servers:\n        create_pool_payload['servers'].append({'ip':{\"addr\": server,\"type\": \"V4\"},'port':port})\n    \n    response = urlreq(pool_url, verb='POST', params=json.dumps(create_pool_payload), headers=headers_post, verify=False)\n    # deal with the result/response\n    if response.ok:\n        print(\"Request was successful\")\n        pool = response.json()\n        print('POOL_UUID={}'.format(pool['uuid']))        \n\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers_post))\n        print(\"Payload: {}\".format(create_pool_payload))\n        print('Status code: {}'.format(response.status_code))\n        print('Response: {}'.format(response.text))\n        exit(1)\n    \n    # endregion\n\nif \"@@{AVI_INTEGRATION}@@\" == \"yes\":\n    create_pool(controller_url,headers_post,\"@@{CLOUD_UUID}@@\",\"Pool_@@{calm_application_name}@@\",\n                \"@@{calm_application_name}@@ servers pool\", \"@@{VRF_UUID}@@\", my_servers,pool_port)\n"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "CreatePool",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "#script\n# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    14082019\n# task_name:    CreatePool\n# description:  this task is used to create a pool that include all the servers deployed through Calm\n# endregion\n\n# setting up variables and header\ncontroller_url = \"@@{CONTROLLER_URL}@@\"\nh_referer = \"@@{REFERER}@@\"\nh_api_version = \"@@{API_VERSION}@@\"\nh_encoding = \"@@{ENCODING}@@\"\nh_content = \"@@{CONTENT}@@\"\nr_csrftoken = \"@@{CSRF_TOKEN}@@\"\nr_sessionid = \"@@{SESSION_ID}@@\"\npool_port = \"@@{POOL_PORT}@@\"\n\nheaders_post = {\n    'cookie': \"sessionid=\" + r_sessionid +\"; csrftoken=\" + r_csrftoken,\n    'X-Avi-Version': h_api_version,\n    'Accept-Encoding': h_encoding,\n    'Content-type': h_content,\n    'X-CSRFToken': r_csrftoken,\n    'Referer': h_referer\n    }\n    \nmy_servers = [\"@@{Node1.address}@@\"] #\"@@{calm_array_address}@@\"\nprint \"my_servers = {}\".format(my_servers)\n# endregion\n\ndef create_pool(controller_url,headers_post,cloud_uuid, name, description, vrf_uuid, servers, port):\n    \"\"\" This function create a pool and return it's uuid to be used later \n        Args:\n         controller_url: http://avi_controller_ip\n         headers_post: header with the sessionid and csrftoken\n         cloud_uuid: the cloud uuid that will host the pool\n\t\t name: pool name\n\t\t description: pool description\n\t\t servers: array containing the list of server to be included\n\t\t port: port number\n\t\tReturns:\n\t\t POOL_UUID: uuid of the created pool\n    \n    \"\"\"\n    pool_url = controller_url + \"/api/pool\"\n    create_pool_payload = {}\n    create_pool_payload['cloud_ref'] = cloud_uuid\n    create_pool_payload['vrf_ref'] = vrf_uuid\n    create_pool_payload['description'] = description\n    create_pool_payload['name'] = name\n    create_pool_payload['servers'] = []\n\n    for server in servers:\n        create_pool_payload['servers'].append({'ip':{\"addr\": server,\"type\": \"V4\"},'port':port})\n    \n    response = urlreq(pool_url, verb='POST', params=json.dumps(create_pool_payload), headers=headers_post, verify=False)\n    # deal with the result/response\n    if response.ok:\n        print(\"Request was successful\")\n        pool = response.json()\n        print('POOL_UUID={}'.format(pool['uuid']))        \n\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers_post))\n        print(\"Payload: {}\".format(create_pool_payload))\n        print('Status code: {}'.format(response.status_code))\n        print('Response: {}'.format(response.text))\n        exit(1)\n    \n    # endregion\n\nif \"@@{AVI_INTEGRATION}@@\" == \"yes\":\n    create_pool(controller_url,headers_post,\"@@{CLOUD_UUID}@@\",\"Pool_@@{calm_application_name}@@\",\n                \"@@{calm_application_name}@@ servers pool\", \"@@{VRF_UUID}@@\", my_servers,pool_port)\n",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150132333173",
    "kind": "app_task",
    "uuid": "35c60dd2-5be4-44b2-adf5-7bed9f9a2519",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150132333173",
    "name": "CreatePool"
  }
}
