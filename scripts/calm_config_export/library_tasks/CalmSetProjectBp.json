{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "CalmSetProjectBp",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "#region headers\n# escript-template v20190611 / stephane.bourdeaud@nutanix.com\n# * author:     MITU Bogdan Nicolae (EEAS-EXT) <Bogdan-Nicolae.MITU@ext.eeas.europa.eu>\n# * version:    2019/09/17\n# task_name:    CalmSetProjectBp\n# description:  Publish existing CALM Blueprints on the new project created. \n#               Blueprints will be added into a list, which will be populated by\n#               Nutanix Admins and stored on a CALM macro.\n# endregion\n\n#region capture Calm variables\nusername = \"@@{pc.username}@@\"\nusername_secret = \"@@{pc.secret}@@\"\napi_server = \"@@{pc_ip}@@\"\nproject_name = \"@@{project_name}@@\"\nproject_uuid = \"@@{project_uuid}@@\"\n# endregion\n\n#region prepare api call (get marketplace items)\napi_server_port = \"9440\"\napi_server_endpoint = \"/api/nutanix/v3/marketplace_items/list\"\nlength = 100\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\n\n# Compose the json payload\npayload = {\n    \"filter\":\"app_state==PUBLISHED\",\n    \"length\":length\n}\n# endregion\n#region make the api call (get marketplace items)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n# endregion\n#region process the results (get marketplace items)\nif resp.ok:\n    print (\"Request status code {} on {}\".format(resp.status_code,resp.request.url))\n    json_resp = json.loads(resp.content)\n    marketplace_items = json_resp['entities']\n    #process each marketplace item\n    for marketplace_item in marketplace_items:\n        marketplace_item_uuid = marketplace_item['metadata']['uuid']\n        #region prepare api call (get marketplace information)\n        api_server_endpoint = \"/api/nutanix/v3/calm_marketplace_items/{}\".format(marketplace_item_uuid)\n        url = \"https://{}:{}{}\".format(\n            api_server,\n            api_server_port,\n            api_server_endpoint\n        )\n        method = \"GET\"\n        #endregion\n        #region make the api call (get marketplace information)\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            headers=headers,\n            verify=False\n        )\n        #endregion\n        #region process results (get marketplace information)\n        if resp.ok:\n            print (\"Request status code {} on {}\".format(resp.status_code,resp.request.url))\n            json_resp = json.loads(resp.content)\n            json_resp['metadata'].pop('owner_reference', None)\n            json_resp.pop('status', None)\n            json_resp['metadata'].pop('create_time', None)\n            marketplace_item_project =  {\n                \"kind\": \"project\",\n                \"name\": project_name,\n                \"uuid\": project_uuid\n            }\n            json_resp['spec']['resources']['project_reference_list'].append(marketplace_item_project)\n            #region prepare the api call (publish marketplace item to project)\n            payload = json_resp\n            method = \"PUT\"\n            #endregion\n            #region make the api call (publish marketplace item to project)\n            print(\"Making a {} API call to {}\".format(method, url))\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                params=json.dumps(payload),\n                headers=headers,\n                verify=False\n            )\n            #endregion\n            #region process results (publish marketplace item to project)\n            if resp.ok:\n                print (\"Request status code {} on {}\".format(resp.status_code,resp.request.url))\n                print \"Marketplace item with uuid {} is published.\".format(marketplace_item_uuid)\n            else:\n                print (\"Request failed with status code {}\".format(resp.status_code))\n                print (\"Response content:\")\n                print(json.dumps(json.loads(resp.content),indent=4))\n                print(\"Headers: {}\".format(headers))\n                print(\"Payload: {}\".format(payload))\n                exit(1)\n            #endregion\n        else:\n            print (\"Request failed with status code {}\".format(resp.status_code))\n            print (\"Response content:\")\n            print(json.dumps(json.loads(resp.content),indent=4))\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(payload))\n            exit(1)\n        #endregion\nelse:\n    print (\"Request failed with status code {}\".format(resp.status_code))\n    print (\"Response content:\")\n    print(json.dumps(json.loads(resp.content),indent=4))\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(payload))\n    exit(1)\n#endregion"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "CalmSetProjectBp",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "#region headers\n# escript-template v20190611 / stephane.bourdeaud@nutanix.com\n# * author:     MITU Bogdan Nicolae (EEAS-EXT) <Bogdan-Nicolae.MITU@ext.eeas.europa.eu>\n# * version:    2019/09/17\n# task_name:    CalmSetProjectBp\n# description:  Publish existing CALM Blueprints on the new project created. \n#               Blueprints will be added into a list, which will be populated by\n#               Nutanix Admins and stored on a CALM macro.\n# endregion\n\n#region capture Calm variables\nusername = \"@@{pc.username}@@\"\nusername_secret = \"@@{pc.secret}@@\"\napi_server = \"@@{pc_ip}@@\"\nproject_name = \"@@{project_name}@@\"\nproject_uuid = \"@@{project_uuid}@@\"\n# endregion\n\n#region prepare api call (get marketplace items)\napi_server_port = \"9440\"\napi_server_endpoint = \"/api/nutanix/v3/marketplace_items/list\"\nlength = 100\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\n\n# Compose the json payload\npayload = {\n    \"filter\":\"app_state==PUBLISHED\",\n    \"length\":length\n}\n# endregion\n#region make the api call (get marketplace items)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n# endregion\n#region process the results (get marketplace items)\nif resp.ok:\n    print (\"Request status code {} on {}\".format(resp.status_code,resp.request.url))\n    json_resp = json.loads(resp.content)\n    marketplace_items = json_resp['entities']\n    #process each marketplace item\n    for marketplace_item in marketplace_items:\n        marketplace_item_uuid = marketplace_item['metadata']['uuid']\n        #region prepare api call (get marketplace information)\n        api_server_endpoint = \"/api/nutanix/v3/calm_marketplace_items/{}\".format(marketplace_item_uuid)\n        url = \"https://{}:{}{}\".format(\n            api_server,\n            api_server_port,\n            api_server_endpoint\n        )\n        method = \"GET\"\n        #endregion\n        #region make the api call (get marketplace information)\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            headers=headers,\n            verify=False\n        )\n        #endregion\n        #region process results (get marketplace information)\n        if resp.ok:\n            print (\"Request status code {} on {}\".format(resp.status_code,resp.request.url))\n            json_resp = json.loads(resp.content)\n            json_resp['metadata'].pop('owner_reference', None)\n            json_resp.pop('status', None)\n            json_resp['metadata'].pop('create_time', None)\n            marketplace_item_project =  {\n                \"kind\": \"project\",\n                \"name\": project_name,\n                \"uuid\": project_uuid\n            }\n            json_resp['spec']['resources']['project_reference_list'].append(marketplace_item_project)\n            #region prepare the api call (publish marketplace item to project)\n            payload = json_resp\n            method = \"PUT\"\n            #endregion\n            #region make the api call (publish marketplace item to project)\n            print(\"Making a {} API call to {}\".format(method, url))\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                params=json.dumps(payload),\n                headers=headers,\n                verify=False\n            )\n            #endregion\n            #region process results (publish marketplace item to project)\n            if resp.ok:\n                print (\"Request status code {} on {}\".format(resp.status_code,resp.request.url))\n                print \"Marketplace item with uuid {} is published.\".format(marketplace_item_uuid)\n            else:\n                print (\"Request failed with status code {}\".format(resp.status_code))\n                print (\"Response content:\")\n                print(json.dumps(json.loads(resp.content),indent=4))\n                print(\"Headers: {}\".format(headers))\n                print(\"Payload: {}\".format(payload))\n                exit(1)\n            #endregion\n        else:\n            print (\"Request failed with status code {}\".format(resp.status_code))\n            print (\"Response content:\")\n            print(json.dumps(json.loads(resp.content),indent=4))\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(payload))\n            exit(1)\n        #endregion\nelse:\n    print (\"Request failed with status code {}\".format(resp.status_code))\n    print (\"Response content:\")\n    print(json.dumps(json.loads(resp.content),indent=4))\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(payload))\n    exit(1)\n#endregion",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150171297293",
    "kind": "app_task",
    "uuid": "47c36b1b-ca31-4b2c-b2f5-213caa206eed",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150171297293",
    "name": "CalmSetProjectBp"
  }
}
