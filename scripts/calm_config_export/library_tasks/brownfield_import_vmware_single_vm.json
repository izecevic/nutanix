{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "brownfield_import_vmware_single_vm",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "\nBP_SPEC = {\n    \"api_version\": \"3.0\",\n    \"metadata\": {\n      \"kind\": \"blueprint\",\n      \"categories\": {\n          \"TemplateType\": \"Vm\"\n      },\n      \"project_reference\": {\n        \"kind\": \"project\",\n        \"uuid\": \"f0f8a738-ca91-49b3-8dd6-1e79bcd98fb7\"\n      },\n      \"uuid\": \"67ff4eaf-f7e3-4563-b1da-f42de3113402\"\n    },\n    \"spec\": {\n      \"resources\": {\n        \"substrate_definition_list\": [\n          {\n            \"variable_list\": [],\n            \"type\": \"VMWARE_VM\",\n            \"os_type\": \"Linux\",\n            \"action_list\": [],\n            \"create_spec\": {\n              \"type\": \"PROVISION_VMWARE_VM\",\n              \"name\": \"vm1\",\n              \"datastore\": \"\",\n              \"host\": \"\",\n              \"resources\": {\n                \"guest_customization\": {\n                  \"customization_type\": \"GUEST_OS_LINUX\"\n                },\n                \"account_uuid\": \"763f3491-99b0-49ac-af3e-2588a6c61a41\",\n                \"num_vcpus_per_socket\": 1,\n                \"num_sockets\": 2,\n                \"memory_size_mib\": 2048,\n                \"nic_list\": []\n              }\n            },\n            \"name\": \"VMSubstrate\",\n            \"readiness_probe\": {\n              \"disable_readiness_probe\": True\n            },\n            \"editables\": {\n              \"create_spec\": {\n                \"resources\": {\n                  \"nic_list\": {},\n                  \"controller_list\": {},\n                  \"template_nic_list\": {},\n                  \"template_controller_list\": {},\n                  \"template_disk_list\": {}\n                }\n              }\n            },\n            \"uuid\": \"61520e7a-67cc-e521-2853-fe249c92de18\"\n          }\n        ],\n        \"client_attrs\": {\n        },\n        \"app_profile_list\": [\n          {\n            \"name\": \"VMware\",\n            \"action_list\": [],\n            \"variable_list\": [],\n            \"deployment_create_list\": [\n              {\n                \"variable_list\": [],\n                \"action_list\": [],\n                \"min_replicas\": \"1\",\n                \"name\": \"a7aadef7_deployment\",\n                \"brownfield_instance_list\": [\n                  {\n                    \"instance_id\": \"50133a6d-f952-30b9-b760-842e7c70a198\",\n                    \"instance_name\": \"vm-0-190618-024859\",\n                    \"address\": [\n                      \"10.46.140.178\"\n                    ],\n                    \"platform_data\": {}\n                  }\n                ],\n                \"max_replicas\": \"1\",\n                \"substrate_local_reference\": {\n                  \"kind\": \"app_substrate\",\n                  \"uuid\": \"61520e7a-67cc-e521-2853-fe249c92de18\"\n                },\n                \"type\": \"BROWNFIELD\",\n                \"uuid\": \"48a70045-d71a-4486-0d03-e15a871372b5\"\n              }\n            ],\n            \"uuid\": \"bc40ba37-6e84-49af-1ad3-280a5c3c1af4\"\n          }\n        ],\n        \"type\": \"BROWNFIELD\"\n      },\n      \"name\": \"singlebrownfieldVmware\"\n    }\n}\n\ndef esxi_single_vm_run(spec):\n\n    pc_ip = '@@{pc_ip}@@'\n    auth = { \"username\": '@@{pc_cred.username}@@', \"password\": '@@{pc_cred.secret}@@'}\n    base_url = \"https://{}:9440/api/nutanix/v3\".format(pc_ip)\n\n    vcenter_ip = \"@@{vCenter_IP}@@\"\n    vcenter_auth = { \"username\": '@@{vcenter_cred.username}@@', \"password\": '@@{vcenter_cred.secret}@@'}\n    vcenter_url = \"https://{}/rest\".format(vcenter_ip)\n\n    vm_ip = \"@@{vm_ip}@@\"\n    bp_name = \"app-{}\".format(vm_ip.replace(\".\", \"-\"))\n    project_name = \"@@{project_name}@@\"\n    account_name = \"@@{account_name}@@\"\n\n    headers = {'content-type': 'application/json', 'Accept': 'application/json'}\n\n    ### --------------------------------------------------------------------------------- ###\n    def change_uuids(bp, context):\n        \"\"\"\n        Helper function to change uuids\n        Args:\n            bp (dict): BP dict\n            context (dict) : context to recursively change uuid references\n        \"\"\"\n        if isinstance(bp, dict):\n            for key, val in bp.iteritems():\n                if key == 'uuid':\n                    old_uuid = val\n                    if old_uuid in context:\n                        bp[key] = context[old_uuid]\n                    else:\n                        new_uuid = str(uuid.uuid4())\n                        context[old_uuid] = new_uuid\n                        bp[key] = new_uuid\n                else:\n                    change_uuids(val, context)\n        elif isinstance(bp, list):\n            for item in bp:\n                if isinstance(item, str):\n                    try:\n                        uuid.UUID(hex=str(item), version=4)\n                    except Exception:\n                        change_uuids(item, context)\n                        continue\n                    old_uuid = item\n                    if old_uuid in context:\n                        new_uuid = context[old_uuid]\n                        bp[bp.index(item)] = new_uuid\n                    else:\n                        new_uuid = str(uuid.uuid4())\n                        context[old_uuid] = new_uuid\n                        bp[bp.index(item)] = new_uuid\n                else:\n                    change_uuids(item, context)\n        return bp\n    ### --------------------------------------------------------------------------------- ###\n\n    ### --------------------------------------------------------------------------------- ###\n    def get_vmware_sid(vcenter_url, vcenter_auth):\n        method = 'POST'\n        url = vcenter_url + \"/com/vmware/cis/session\"\n        payload = {}\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers=headers,\n            auth='BASIC',\n            user=vcenter_auth[\"username\"],\n            passwd=vcenter_auth[\"password\"],\n            verify=False\n        )\n\n        if resp.ok:\n            resp_out = json.loads(resp.content)\n            return resp.json()['value']\n\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ### \n\n    ### --------------------------------------------------------------------------------- ###\n    def get_vmware_vm_id(vcenter_url, vcenter_auth, sid, vm_name):\n        method = 'GET'\n        url = vcenter_url + '/vcenter/vm?filter.names.1=' + vm_name\n        payload = {}\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers={'vmware-api-session-id':sid},\n            auth='BASIC',\n            user=vcenter_auth[\"username\"],\n            passwd=vcenter_auth[\"password\"],\n            verify=False\n        )\n\n        if resp.ok:\n            resp_out = json.loads(resp.content)\n            return resp_out['value'][0][\"vm\"]\n\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ###\n\n    ### --------------------------------------------------------------------------------- ###\n    def get_vmware_vm_info(vcenter_url, vcenter_auth, sid, vm_id):\n        method = 'GET'\n        url = vcenter_url + '/vcenter/vm/'+vm_id\n        payload = {}\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers={'vmware-api-session-id':sid},\n            auth='BASIC',\n            user=vcenter_auth[\"username\"],\n            passwd=vcenter_auth[\"password\"],\n            verify=False\n        )\n\n        if resp.ok:\n            resp_out = json.loads(resp.content)\n            return resp_out[\"value\"]\n\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ###\n\n    ### --------------------------------------------------------------------------------- ###\n    def get_project_uuid(base_url, auth, project_name):\n        method = 'POST'\n        url = base_url + \"/projects/list\"\n        payload = {\n            \"length\":100,\n            \"offset\":0,\n            \"filter\":\"name=={0}\".format(project_name)\n        }\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers=headers,\n            auth='BASIC',\n            user=auth[\"username\"],\n            passwd=auth[\"password\"],\n            verify=False\n        )\n\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            if json_resp['metadata']['total_matches'] > 0:\n                project = json_resp['entities'][0]\n                return project[\"metadata\"][\"uuid\"]\n            else:\n                print(\"Could not find project\")\n                exit(1)\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ###\n\n    ### --------------------------------------------------------------------------------- ###\n    def get_vmware_account_uuid(base_url, auth, account_name):\n        method = 'POST'\n        url = base_url + \"/accounts/list\"\n        payload = {\n            \"length\":100,\n            \"offset\":0,\n            \"filter\":\"name=={0};type==vmware\".format(account_name)\n        }\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers=headers,\n            auth='BASIC',\n            user=auth[\"username\"],\n            passwd=auth[\"password\"],\n            verify=False\n        )\n\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            if json_resp['metadata']['total_matches'] > 0:\n                account = json_resp['entities'][0]\n                return account[\"metadata\"][\"uuid\"]\n            else:\n                print(\"Could not find account\")\n                exit(1)\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ###\n\n    ### --------------------------------------------------------------------------------- ###\n    def get_host_networks(base_url, auth, account_uuid, host_id):\n        method = 'POST'\n        url = base_url + \"/vmware/v6/network/list\"\n        payload = {\n            \"length\":100,\n            \"offset\":0,\n            \"filter\":\"account_uuid=={0};host_id=={1}\".format(account_uuid, host_id)\n        }\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers=headers,\n            auth='BASIC',\n            user=auth[\"username\"],\n            passwd=auth[\"password\"],\n            verify=False\n        )\n\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            net_dict = {}\n            if len(json_resp['entities']) > 0:\n                for net in json_resp['entities']:\n                    net_dict[net['status']['resources']['name']] = net['status']['resources'][\"id\"]\n                return net_dict\n            else:\n                print(\"Could not find network for host {}.\".format(host_id))\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ###\n\n    ### --------------------------------------------------------------------------------- ###\n    def get_hosts(base_url, auth, account_uuid):\n        method = 'POST'\n        url = base_url + \"/vmware/v6/host/list\"\n        payload = {\n            \"length\":100,\n            \"offset\":0,\n            \"filter\":\"account_uuid=={0}\".format(account_uuid)\n        }\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers=headers,\n            auth='BASIC',\n            user=auth[\"username\"],\n            passwd=auth[\"password\"],\n            verify=False\n        )\n\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            host_dict = {}\n            if len(json_resp['entities']) > 0:\n                for host in json_resp['entities']:\n                    id = host['status']['resources']['summary']['hardware']['uuid']\n                    host_dict[id] = host['status']['resources'][\"name\"]\n                return host_dict\n            else:\n                print(\"No host found\")\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ###\n\n    ### --------------------------------------------------------------------------------- ###\n    def get_brownfield_vms_list(base_url, auth, project_uuid, account_uuid, vm_ip):\n        method = 'POST'\n        url = base_url + \"/blueprints/brownfield_import/vms/list\"\n        payload = {\n            \"length\":100,\n            \"offset\":0,\n            \"filter\":\"guest.ipAddress=={0};project_uuid=={1};account_uuid=={2}\".format(vm_ip, project_uuid, account_uuid)\n        }\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers=headers,\n            auth='BASIC',\n            user=auth[\"username\"],\n            passwd=auth[\"password\"],\n            verify=False\n        )\n        ### It assumes that vm['status']['resources']['address'] will be list having only one ip.\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            brownfield_instance_list = []\n            vm_host = \"\"\n            datastore = \"\"\n            if json_resp['metadata']['total_matches'] > 0:\n                for vm in json_resp['entities']:\n                    print(\"IP: \", vm['status']['resources']['guest.ipAddress'])\n                    if len(set(vm['status']['resources']['guest.ipAddress']) & set([vm_ip])) > 0:\n                        vm_info = {\n                            \"instance_name\": vm['status']['resources']['instance_name'],\n                            \"instance_id\": vm['status']['resources']['instance_id'],\n                            \"address\": vm['status']['resources']['address'],\n                            \"platform_data\": {}\n                        }\n                        vm_host = vm['status']['resources']['host']\n                        datastore = vm['status']['resources']['datastore']\n                        brownfield_instance_list.append(vm_info)\n\n                if brownfield_instance_list:\n                    return brownfield_instance_list, vm_host, datastore\n                else:\n                    print(\"Could not find brownfield vms.\")\n                    exit(1)\n            else:\n                print(\"Could not find brownfield vms.\")\n                exit(1)\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ###\n\n    ### --------------------------------------------------------------------------------- ###\n    def create_single_vm_bp(base_url, auth, payload):\n        method = 'POST'\n        url = base_url + \"/blueprints\"\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers=headers,\n            auth='BASIC',\n            user=auth[\"username\"],\n            passwd=auth[\"password\"],\n            verify=False\n        )\n\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            if json_resp[\"status\"][\"state\"] != \"ACTIVE\":\n                print(\"Blueprint state is not Active. It is : {}\".format(json_resp[\"status\"][\"state\"]))\n                print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n                exit(1)\n            return json_resp\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ###\n\n    ### --------------------------------------------------------------------------------- ###\n    def launch_single_vm_bp(base_url, auth, blueprint_uuid, payload):\n        method = 'POST'\n        url = base_url + \"/blueprints/{}/launch\".format(blueprint_uuid)\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers=headers,\n            auth='BASIC',\n            user=auth[\"username\"],\n            passwd=auth[\"password\"],\n            verify=False\n        )\n\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            print(\"Single VM Blueprint launched successfully\")\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ###\n\n    ### Get project and account uuid\n    project_uuid = get_project_uuid(base_url, auth, project_name)\n    account_uuid = get_vmware_account_uuid(base_url, auth, account_name)\n\n    ### Get host dict\n    host_dict = get_hosts(base_url, auth, account_uuid)\n\n    ### Build network dict\n    network = {}\n    for host in host_dict.keys():\n        net_dict = get_host_networks(base_url, auth, account_uuid, host)\n        for key, val in net_dict.items():\n            network[key] = val\n\n\n    ### Get brownfield vms dict\n    brownfield_instance_list, vm_host, datastore = get_brownfield_vms_list(base_url, auth, project_uuid, account_uuid, vm_ip)\n    vm_name = brownfield_instance_list[0][\"instance_name\"][0:25]\n\n    ### Build required vm info from vcenter\n    sid = get_vmware_sid(vcenter_url, vcenter_auth)\n    vm_id = get_vmware_vm_id(vcenter_url, vcenter_auth, sid, brownfield_instance_list[0][\"instance_name\"])\n    vm = get_vmware_vm_info(vcenter_url, vcenter_auth, sid, vm_id)\n    vm_info = {\n        \"vm_name\": vm_name,\n        \"num_vcpus_per_socket\": vm[\"cpu\"][\"cores_per_socket\"] ,\n        \"num_sockets\": vm[\"cpu\"][\"count\"],\n        \"memory_size_mib\": vm[\"memory\"][\"size_MiB\"]\n    }\n    vm_info[\"nic_list\"] = []\n    for nic in vm[\"nics\"]:\n        key = nic[\"key\"]\n        val = nic[\"value\"]\n        vm_info[\"nic_list\"].append({\n            \"net_name\": network[val[\"backing\"][\"network_name\"]],\n            \"nic_type\": val[\"type\"].lower()\n        })\n\n    ### Update uuids, project ref, account ref, bp name, vm-info etc.\n    updated_spec = change_uuids(spec, {})\n    updated_spec[\"metadata\"][\"project_reference\"][\"uuid\"] = project_uuid\n    substrate = updated_spec[\"spec\"][\"resources\"][\"substrate_definition_list\"][0]\n\n    substrate[\"create_spec\"][\"name\"] = vm_name\n    substrate[\"create_spec\"][\"host\"] = vm_host[\"uuid\"]\n    substrate[\"create_spec\"][\"datastore\"] = datastore[\"0\"][\"url\"]\n    substrate[\"create_spec\"][\"resources\"][\"account_uuid\"] = account_uuid\n    substrate[\"create_spec\"][\"resources\"][\"num_vcpus_per_socket\"] = vm_info[\"num_vcpus_per_socket\"]\n    substrate[\"create_spec\"][\"resources\"][\"num_sockets\"] = vm_info[\"num_sockets\"]\n    substrate[\"create_spec\"][\"resources\"][\"memory_size_mib\"] = vm_info[\"memory_size_mib\"]\n    substrate[\"create_spec\"][\"resources\"][\"nic_list\"] = vm_info[\"nic_list\"]\n\n    updated_spec[\"spec\"][\"resources\"][\"substrate_definition_list\"][0] = substrate\n    updated_spec[\"spec\"][\"name\"] = bp_name\n    brownfield_instance_list[0][\"instance_name\"] = vm_name\n    updated_spec[\"spec\"][\"resources\"][\"app_profile_list\"][0][\"deployment_create_list\"][0][\"brownfield_instance_list\"] = brownfield_instance_list\n\n    ### Create a single vm bp\n    resp = create_single_vm_bp(base_url, auth, updated_spec)\n\n    ### Update single vm bp spec\n    del resp[\"status\"]\n    blueprint_uuid = resp[\"metadata\"][\"uuid\"]\n\n    app_uuid = resp[\"spec\"][\"resources\"][\"app_profile_list\"][0][\"uuid\"]\n    resp[\"spec\"][\"application_name\"] =  resp[\"spec\"][\"name\"]\n    resp[\"spec\"][\"app_profile_reference\"] = {\n        \"kind\": \"app_profile\",\n        \"uuid\": app_uuid\n    }\n\n    del resp[\"spec\"][\"name\"]\n\n    ### Launch a single vm bp\n    launch_single_vm_bp(base_url, auth, blueprint_uuid, resp)\n\n\nesxi_single_vm_run(BP_SPEC)"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "brownfield_import_vmware_single_vm",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "\nBP_SPEC = {\n    \"api_version\": \"3.0\",\n    \"metadata\": {\n      \"kind\": \"blueprint\",\n      \"categories\": {\n          \"TemplateType\": \"Vm\"\n      },\n      \"project_reference\": {\n        \"kind\": \"project\",\n        \"uuid\": \"f0f8a738-ca91-49b3-8dd6-1e79bcd98fb7\"\n      },\n      \"uuid\": \"67ff4eaf-f7e3-4563-b1da-f42de3113402\"\n    },\n    \"spec\": {\n      \"resources\": {\n        \"substrate_definition_list\": [\n          {\n            \"variable_list\": [],\n            \"type\": \"VMWARE_VM\",\n            \"os_type\": \"Linux\",\n            \"action_list\": [],\n            \"create_spec\": {\n              \"type\": \"PROVISION_VMWARE_VM\",\n              \"name\": \"vm1\",\n              \"datastore\": \"\",\n              \"host\": \"\",\n              \"resources\": {\n                \"guest_customization\": {\n                  \"customization_type\": \"GUEST_OS_LINUX\"\n                },\n                \"account_uuid\": \"763f3491-99b0-49ac-af3e-2588a6c61a41\",\n                \"num_vcpus_per_socket\": 1,\n                \"num_sockets\": 2,\n                \"memory_size_mib\": 2048,\n                \"nic_list\": []\n              }\n            },\n            \"name\": \"VMSubstrate\",\n            \"readiness_probe\": {\n              \"disable_readiness_probe\": True\n            },\n            \"editables\": {\n              \"create_spec\": {\n                \"resources\": {\n                  \"nic_list\": {},\n                  \"controller_list\": {},\n                  \"template_nic_list\": {},\n                  \"template_controller_list\": {},\n                  \"template_disk_list\": {}\n                }\n              }\n            },\n            \"uuid\": \"61520e7a-67cc-e521-2853-fe249c92de18\"\n          }\n        ],\n        \"client_attrs\": {\n        },\n        \"app_profile_list\": [\n          {\n            \"name\": \"VMware\",\n            \"action_list\": [],\n            \"variable_list\": [],\n            \"deployment_create_list\": [\n              {\n                \"variable_list\": [],\n                \"action_list\": [],\n                \"min_replicas\": \"1\",\n                \"name\": \"a7aadef7_deployment\",\n                \"brownfield_instance_list\": [\n                  {\n                    \"instance_id\": \"50133a6d-f952-30b9-b760-842e7c70a198\",\n                    \"instance_name\": \"vm-0-190618-024859\",\n                    \"address\": [\n                      \"10.46.140.178\"\n                    ],\n                    \"platform_data\": {}\n                  }\n                ],\n                \"max_replicas\": \"1\",\n                \"substrate_local_reference\": {\n                  \"kind\": \"app_substrate\",\n                  \"uuid\": \"61520e7a-67cc-e521-2853-fe249c92de18\"\n                },\n                \"type\": \"BROWNFIELD\",\n                \"uuid\": \"48a70045-d71a-4486-0d03-e15a871372b5\"\n              }\n            ],\n            \"uuid\": \"bc40ba37-6e84-49af-1ad3-280a5c3c1af4\"\n          }\n        ],\n        \"type\": \"BROWNFIELD\"\n      },\n      \"name\": \"singlebrownfieldVmware\"\n    }\n}\n\ndef esxi_single_vm_run(spec):\n\n    pc_ip = '@@{pc_ip}@@'\n    auth = { \"username\": '@@{pc_cred.username}@@', \"password\": '@@{pc_cred.secret}@@'}\n    base_url = \"https://{}:9440/api/nutanix/v3\".format(pc_ip)\n\n    vcenter_ip = \"@@{vCenter_IP}@@\"\n    vcenter_auth = { \"username\": '@@{vcenter_cred.username}@@', \"password\": '@@{vcenter_cred.secret}@@'}\n    vcenter_url = \"https://{}/rest\".format(vcenter_ip)\n\n    vm_ip = \"@@{vm_ip}@@\"\n    bp_name = \"app-{}\".format(vm_ip.replace(\".\", \"-\"))\n    project_name = \"@@{project_name}@@\"\n    account_name = \"@@{account_name}@@\"\n\n    headers = {'content-type': 'application/json', 'Accept': 'application/json'}\n\n    ### --------------------------------------------------------------------------------- ###\n    def change_uuids(bp, context):\n        \"\"\"\n        Helper function to change uuids\n        Args:\n            bp (dict): BP dict\n            context (dict) : context to recursively change uuid references\n        \"\"\"\n        if isinstance(bp, dict):\n            for key, val in bp.iteritems():\n                if key == 'uuid':\n                    old_uuid = val\n                    if old_uuid in context:\n                        bp[key] = context[old_uuid]\n                    else:\n                        new_uuid = str(uuid.uuid4())\n                        context[old_uuid] = new_uuid\n                        bp[key] = new_uuid\n                else:\n                    change_uuids(val, context)\n        elif isinstance(bp, list):\n            for item in bp:\n                if isinstance(item, str):\n                    try:\n                        uuid.UUID(hex=str(item), version=4)\n                    except Exception:\n                        change_uuids(item, context)\n                        continue\n                    old_uuid = item\n                    if old_uuid in context:\n                        new_uuid = context[old_uuid]\n                        bp[bp.index(item)] = new_uuid\n                    else:\n                        new_uuid = str(uuid.uuid4())\n                        context[old_uuid] = new_uuid\n                        bp[bp.index(item)] = new_uuid\n                else:\n                    change_uuids(item, context)\n        return bp\n    ### --------------------------------------------------------------------------------- ###\n\n    ### --------------------------------------------------------------------------------- ###\n    def get_vmware_sid(vcenter_url, vcenter_auth):\n        method = 'POST'\n        url = vcenter_url + \"/com/vmware/cis/session\"\n        payload = {}\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers=headers,\n            auth='BASIC',\n            user=vcenter_auth[\"username\"],\n            passwd=vcenter_auth[\"password\"],\n            verify=False\n        )\n\n        if resp.ok:\n            resp_out = json.loads(resp.content)\n            return resp.json()['value']\n\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ### \n\n    ### --------------------------------------------------------------------------------- ###\n    def get_vmware_vm_id(vcenter_url, vcenter_auth, sid, vm_name):\n        method = 'GET'\n        url = vcenter_url + '/vcenter/vm?filter.names.1=' + vm_name\n        payload = {}\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers={'vmware-api-session-id':sid},\n            auth='BASIC',\n            user=vcenter_auth[\"username\"],\n            passwd=vcenter_auth[\"password\"],\n            verify=False\n        )\n\n        if resp.ok:\n            resp_out = json.loads(resp.content)\n            return resp_out['value'][0][\"vm\"]\n\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ###\n\n    ### --------------------------------------------------------------------------------- ###\n    def get_vmware_vm_info(vcenter_url, vcenter_auth, sid, vm_id):\n        method = 'GET'\n        url = vcenter_url + '/vcenter/vm/'+vm_id\n        payload = {}\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers={'vmware-api-session-id':sid},\n            auth='BASIC',\n            user=vcenter_auth[\"username\"],\n            passwd=vcenter_auth[\"password\"],\n            verify=False\n        )\n\n        if resp.ok:\n            resp_out = json.loads(resp.content)\n            return resp_out[\"value\"]\n\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ###\n\n    ### --------------------------------------------------------------------------------- ###\n    def get_project_uuid(base_url, auth, project_name):\n        method = 'POST'\n        url = base_url + \"/projects/list\"\n        payload = {\n            \"length\":100,\n            \"offset\":0,\n            \"filter\":\"name=={0}\".format(project_name)\n        }\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers=headers,\n            auth='BASIC',\n            user=auth[\"username\"],\n            passwd=auth[\"password\"],\n            verify=False\n        )\n\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            if json_resp['metadata']['total_matches'] > 0:\n                project = json_resp['entities'][0]\n                return project[\"metadata\"][\"uuid\"]\n            else:\n                print(\"Could not find project\")\n                exit(1)\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ###\n\n    ### --------------------------------------------------------------------------------- ###\n    def get_vmware_account_uuid(base_url, auth, account_name):\n        method = 'POST'\n        url = base_url + \"/accounts/list\"\n        payload = {\n            \"length\":100,\n            \"offset\":0,\n            \"filter\":\"name=={0};type==vmware\".format(account_name)\n        }\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers=headers,\n            auth='BASIC',\n            user=auth[\"username\"],\n            passwd=auth[\"password\"],\n            verify=False\n        )\n\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            if json_resp['metadata']['total_matches'] > 0:\n                account = json_resp['entities'][0]\n                return account[\"metadata\"][\"uuid\"]\n            else:\n                print(\"Could not find account\")\n                exit(1)\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ###\n\n    ### --------------------------------------------------------------------------------- ###\n    def get_host_networks(base_url, auth, account_uuid, host_id):\n        method = 'POST'\n        url = base_url + \"/vmware/v6/network/list\"\n        payload = {\n            \"length\":100,\n            \"offset\":0,\n            \"filter\":\"account_uuid=={0};host_id=={1}\".format(account_uuid, host_id)\n        }\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers=headers,\n            auth='BASIC',\n            user=auth[\"username\"],\n            passwd=auth[\"password\"],\n            verify=False\n        )\n\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            net_dict = {}\n            if len(json_resp['entities']) > 0:\n                for net in json_resp['entities']:\n                    net_dict[net['status']['resources']['name']] = net['status']['resources'][\"id\"]\n                return net_dict\n            else:\n                print(\"Could not find network for host {}.\".format(host_id))\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ###\n\n    ### --------------------------------------------------------------------------------- ###\n    def get_hosts(base_url, auth, account_uuid):\n        method = 'POST'\n        url = base_url + \"/vmware/v6/host/list\"\n        payload = {\n            \"length\":100,\n            \"offset\":0,\n            \"filter\":\"account_uuid=={0}\".format(account_uuid)\n        }\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers=headers,\n            auth='BASIC',\n            user=auth[\"username\"],\n            passwd=auth[\"password\"],\n            verify=False\n        )\n\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            host_dict = {}\n            if len(json_resp['entities']) > 0:\n                for host in json_resp['entities']:\n                    id = host['status']['resources']['summary']['hardware']['uuid']\n                    host_dict[id] = host['status']['resources'][\"name\"]\n                return host_dict\n            else:\n                print(\"No host found\")\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ###\n\n    ### --------------------------------------------------------------------------------- ###\n    def get_brownfield_vms_list(base_url, auth, project_uuid, account_uuid, vm_ip):\n        method = 'POST'\n        url = base_url + \"/blueprints/brownfield_import/vms/list\"\n        payload = {\n            \"length\":100,\n            \"offset\":0,\n            \"filter\":\"guest.ipAddress=={0};project_uuid=={1};account_uuid=={2}\".format(vm_ip, project_uuid, account_uuid)\n        }\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers=headers,\n            auth='BASIC',\n            user=auth[\"username\"],\n            passwd=auth[\"password\"],\n            verify=False\n        )\n        ### It assumes that vm['status']['resources']['address'] will be list having only one ip.\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            brownfield_instance_list = []\n            vm_host = \"\"\n            datastore = \"\"\n            if json_resp['metadata']['total_matches'] > 0:\n                for vm in json_resp['entities']:\n                    print(\"IP: \", vm['status']['resources']['guest.ipAddress'])\n                    if len(set(vm['status']['resources']['guest.ipAddress']) & set([vm_ip])) > 0:\n                        vm_info = {\n                            \"instance_name\": vm['status']['resources']['instance_name'],\n                            \"instance_id\": vm['status']['resources']['instance_id'],\n                            \"address\": vm['status']['resources']['address'],\n                            \"platform_data\": {}\n                        }\n                        vm_host = vm['status']['resources']['host']\n                        datastore = vm['status']['resources']['datastore']\n                        brownfield_instance_list.append(vm_info)\n\n                if brownfield_instance_list:\n                    return brownfield_instance_list, vm_host, datastore\n                else:\n                    print(\"Could not find brownfield vms.\")\n                    exit(1)\n            else:\n                print(\"Could not find brownfield vms.\")\n                exit(1)\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ###\n\n    ### --------------------------------------------------------------------------------- ###\n    def create_single_vm_bp(base_url, auth, payload):\n        method = 'POST'\n        url = base_url + \"/blueprints\"\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers=headers,\n            auth='BASIC',\n            user=auth[\"username\"],\n            passwd=auth[\"password\"],\n            verify=False\n        )\n\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            if json_resp[\"status\"][\"state\"] != \"ACTIVE\":\n                print(\"Blueprint state is not Active. It is : {}\".format(json_resp[\"status\"][\"state\"]))\n                print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n                exit(1)\n            return json_resp\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ###\n\n    ### --------------------------------------------------------------------------------- ###\n    def launch_single_vm_bp(base_url, auth, blueprint_uuid, payload):\n        method = 'POST'\n        url = base_url + \"/blueprints/{}/launch\".format(blueprint_uuid)\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers=headers,\n            auth='BASIC',\n            user=auth[\"username\"],\n            passwd=auth[\"password\"],\n            verify=False\n        )\n\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            print(\"Single VM Blueprint launched successfully\")\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ###\n\n    ### Get project and account uuid\n    project_uuid = get_project_uuid(base_url, auth, project_name)\n    account_uuid = get_vmware_account_uuid(base_url, auth, account_name)\n\n    ### Get host dict\n    host_dict = get_hosts(base_url, auth, account_uuid)\n\n    ### Build network dict\n    network = {}\n    for host in host_dict.keys():\n        net_dict = get_host_networks(base_url, auth, account_uuid, host)\n        for key, val in net_dict.items():\n            network[key] = val\n\n\n    ### Get brownfield vms dict\n    brownfield_instance_list, vm_host, datastore = get_brownfield_vms_list(base_url, auth, project_uuid, account_uuid, vm_ip)\n    vm_name = brownfield_instance_list[0][\"instance_name\"][0:25]\n\n    ### Build required vm info from vcenter\n    sid = get_vmware_sid(vcenter_url, vcenter_auth)\n    vm_id = get_vmware_vm_id(vcenter_url, vcenter_auth, sid, brownfield_instance_list[0][\"instance_name\"])\n    vm = get_vmware_vm_info(vcenter_url, vcenter_auth, sid, vm_id)\n    vm_info = {\n        \"vm_name\": vm_name,\n        \"num_vcpus_per_socket\": vm[\"cpu\"][\"cores_per_socket\"] ,\n        \"num_sockets\": vm[\"cpu\"][\"count\"],\n        \"memory_size_mib\": vm[\"memory\"][\"size_MiB\"]\n    }\n    vm_info[\"nic_list\"] = []\n    for nic in vm[\"nics\"]:\n        key = nic[\"key\"]\n        val = nic[\"value\"]\n        vm_info[\"nic_list\"].append({\n            \"net_name\": network[val[\"backing\"][\"network_name\"]],\n            \"nic_type\": val[\"type\"].lower()\n        })\n\n    ### Update uuids, project ref, account ref, bp name, vm-info etc.\n    updated_spec = change_uuids(spec, {})\n    updated_spec[\"metadata\"][\"project_reference\"][\"uuid\"] = project_uuid\n    substrate = updated_spec[\"spec\"][\"resources\"][\"substrate_definition_list\"][0]\n\n    substrate[\"create_spec\"][\"name\"] = vm_name\n    substrate[\"create_spec\"][\"host\"] = vm_host[\"uuid\"]\n    substrate[\"create_spec\"][\"datastore\"] = datastore[\"0\"][\"url\"]\n    substrate[\"create_spec\"][\"resources\"][\"account_uuid\"] = account_uuid\n    substrate[\"create_spec\"][\"resources\"][\"num_vcpus_per_socket\"] = vm_info[\"num_vcpus_per_socket\"]\n    substrate[\"create_spec\"][\"resources\"][\"num_sockets\"] = vm_info[\"num_sockets\"]\n    substrate[\"create_spec\"][\"resources\"][\"memory_size_mib\"] = vm_info[\"memory_size_mib\"]\n    substrate[\"create_spec\"][\"resources\"][\"nic_list\"] = vm_info[\"nic_list\"]\n\n    updated_spec[\"spec\"][\"resources\"][\"substrate_definition_list\"][0] = substrate\n    updated_spec[\"spec\"][\"name\"] = bp_name\n    brownfield_instance_list[0][\"instance_name\"] = vm_name\n    updated_spec[\"spec\"][\"resources\"][\"app_profile_list\"][0][\"deployment_create_list\"][0][\"brownfield_instance_list\"] = brownfield_instance_list\n\n    ### Create a single vm bp\n    resp = create_single_vm_bp(base_url, auth, updated_spec)\n\n    ### Update single vm bp spec\n    del resp[\"status\"]\n    blueprint_uuid = resp[\"metadata\"][\"uuid\"]\n\n    app_uuid = resp[\"spec\"][\"resources\"][\"app_profile_list\"][0][\"uuid\"]\n    resp[\"spec\"][\"application_name\"] =  resp[\"spec\"][\"name\"]\n    resp[\"spec\"][\"app_profile_reference\"] = {\n        \"kind\": \"app_profile\",\n        \"uuid\": app_uuid\n    }\n\n    del resp[\"spec\"][\"name\"]\n\n    ### Launch a single vm bp\n    launch_single_vm_bp(base_url, auth, blueprint_uuid, resp)\n\n\nesxi_single_vm_run(BP_SPEC)",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150154670499",
    "kind": "app_task",
    "uuid": "8aca2744-e955-40d9-86b1-5224cbd156eb",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150154670499",
    "name": "brownfield_import_vmware_single_vm"
  }
}
