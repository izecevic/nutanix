{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "EipReserveHost",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "# region headers\n# * authors:    igor.zecevic@nutanix.com\n# * date:       30/03/2020\n# task_name:    EipReserveHost\n# description:  Reserve an Hostname\n#               check if hostname is not already exising on the DNS\n#               if present, increment the suffix number\n# input vars:   eip_site_id, app_prefix, source_app, app_status\n#               eip_dns_zone, instance_count, rr_type\n# output vars:  eip_host_list\n#endregion\n\n# Important:\n# the script is being executed only on the first instance/replica during provisioning\n# if you deploy an application with multiples instances, the script is executed only on the instance[0]\n# the script is also being executed during ScaleOut/ScaleUp\n# That was done in that way in order to avoid replica trying to reserve the same hostname name\n# Reserved hostname are pushed to the variable: eip_host_list\n\n#region capture Calm variables\nusername = \"@@{eip.username}@@\"\npassword = \"@@{eip.secret}@@\"\napi_server = \"@@{eip_endpoint}@@\"\ndns_zone = \"@@{eip_dns_zone}@@\"\napp_prefix = \"@@{app_prefix}@@\"\napp_source = \"@@{source_app}@@\"\napp_status = \"@@{app_status}@@\"\nhost_index = int(\"@@{calm_array_index}@@\")\nnumber_instance = int(\"@@{instance_count}@@\")\nrr_type = \"A\"\n#endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest\"\nmethod = \"GET\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n# endregion\n\n#region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n#endregion\n\n# region check dns hostname\ndef eip_dns_check(hostname_dns, rr_type):\n    api_server_port = \"443\"\n    api_server_endpoint = \"/rest\"\n    method = \"GET\"\n    base_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\n    headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    # make the api call\n    url = \"{0}/dns_rr_list?WHERE={1}='{2}'&WHERE={3}='{4}'\".format(base_url, \"rr_type\", rr_type, \"rr_full_name\", hostname_dns)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n    return resp\n# endregion\n\n#region main processing\ni = 1\nhost_list = []\nif ((host_index > 0) and (app_status == \"provisioning\")):\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\nelif ((app_status == \"provisioning\") and (host_index == 0)):\n    for instance in range(0,number_instance):\n        loop_break = 0\n        while True:\n            #checking if hostname exists on DNS\n            hostname = app_prefix+\"-\"+app_source+\"-0\"+str(i)\n            hostname_dns = hostname+\".\"+dns_zone\n            check_dns = eip_dns_check(hostname_dns, rr_type)\n            if (check_dns.status_code == 204) or (check_dns.status_code == 200 and json.loads(check_dns.content)[0]['delayed_delete_time'] == \"1\"):\n                host_list.append(format(hostname))\n                loop_break = 1\n                i = i +1\n                break\n            elif (check_dns.status_code == 200 and json.loads(check_dns.content)[0]['delayed_delete_time'] == \"0\" and json.loads(check_dns.content)[0]['delayed_create_time'] == \"0\"):\n                print (\"DNS already exists.. looping\")\n                i = i + 1\n        if ((loop_break == 1) and (instance == number_instance)):\n            break\nelif ((host_index > 0) and (app_status == \"running\")):\n    while True:\n            #checking if hostname exists on DNS\n            hostname = app_prefix+\"-\"+app_source+\"-0\"+str(i)\n            hostname_dns = hostname+\".\"+dns_zone\n            check_dns = eip_dns_check(hostname_dns, rr_type)\n            if (check_dns.status_code == 204) or (check_dns.status_code == 200 and json.loads(check_dns.content)[0]['delayed_delete_time'] == \"1\"):\n                host_list.append(format(hostname))\n                loop_break = 1\n                i = i +1\n                break\n            elif (check_dns.status_code == 200 and json.loads(check_dns.content)[0]['delayed_delete_time'] == \"0\" and json.loads(check_dns.content)[0]['delayed_create_time'] == \"0\"):\n                print (\"DNS already exists.. looping\")\n                i = i + 1\n\nprint(\"eip_host_list={}\".format(host_list))\n# endregion\nexit(0)\n"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "EipReserveHost",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "# region headers\n# * authors:    igor.zecevic@nutanix.com\n# * date:       30/03/2020\n# task_name:    EipReserveHost\n# description:  Reserve an Hostname\n#               check if hostname is not already exising on the DNS\n#               if present, increment the suffix number\n# input vars:   eip_site_id, app_prefix, source_app, app_status\n#               eip_dns_zone, instance_count, rr_type\n# output vars:  eip_host_list\n#endregion\n\n# Important:\n# the script is being executed only on the first instance/replica during provisioning\n# if you deploy an application with multiples instances, the script is executed only on the instance[0]\n# the script is also being executed during ScaleOut/ScaleUp\n# That was done in that way in order to avoid replica trying to reserve the same hostname name\n# Reserved hostname are pushed to the variable: eip_host_list\n\n#region capture Calm variables\nusername = \"@@{eip.username}@@\"\npassword = \"@@{eip.secret}@@\"\napi_server = \"@@{eip_endpoint}@@\"\ndns_zone = \"@@{eip_dns_zone}@@\"\napp_prefix = \"@@{app_prefix}@@\"\napp_source = \"@@{source_app}@@\"\napp_status = \"@@{app_status}@@\"\nhost_index = int(\"@@{calm_array_index}@@\")\nnumber_instance = int(\"@@{instance_count}@@\")\nrr_type = \"A\"\n#endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest\"\nmethod = \"GET\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n# endregion\n\n#region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n#endregion\n\n# region check dns hostname\ndef eip_dns_check(hostname_dns, rr_type):\n    api_server_port = \"443\"\n    api_server_endpoint = \"/rest\"\n    method = \"GET\"\n    base_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\n    headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    # make the api call\n    url = \"{0}/dns_rr_list?WHERE={1}='{2}'&WHERE={3}='{4}'\".format(base_url, \"rr_type\", rr_type, \"rr_full_name\", hostname_dns)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n    return resp\n# endregion\n\n#region main processing\ni = 1\nhost_list = []\nif ((host_index > 0) and (app_status == \"provisioning\")):\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\nelif ((app_status == \"provisioning\") and (host_index == 0)):\n    for instance in range(0,number_instance):\n        loop_break = 0\n        while True:\n            #checking if hostname exists on DNS\n            hostname = app_prefix+\"-\"+app_source+\"-0\"+str(i)\n            hostname_dns = hostname+\".\"+dns_zone\n            check_dns = eip_dns_check(hostname_dns, rr_type)\n            if (check_dns.status_code == 204) or (check_dns.status_code == 200 and json.loads(check_dns.content)[0]['delayed_delete_time'] == \"1\"):\n                host_list.append(format(hostname))\n                loop_break = 1\n                i = i +1\n                break\n            elif (check_dns.status_code == 200 and json.loads(check_dns.content)[0]['delayed_delete_time'] == \"0\" and json.loads(check_dns.content)[0]['delayed_create_time'] == \"0\"):\n                print (\"DNS already exists.. looping\")\n                i = i + 1\n        if ((loop_break == 1) and (instance == number_instance)):\n            break\nelif ((host_index > 0) and (app_status == \"running\")):\n    while True:\n            #checking if hostname exists on DNS\n            hostname = app_prefix+\"-\"+app_source+\"-0\"+str(i)\n            hostname_dns = hostname+\".\"+dns_zone\n            check_dns = eip_dns_check(hostname_dns, rr_type)\n            if (check_dns.status_code == 204) or (check_dns.status_code == 200 and json.loads(check_dns.content)[0]['delayed_delete_time'] == \"1\"):\n                host_list.append(format(hostname))\n                loop_break = 1\n                i = i +1\n                break\n            elif (check_dns.status_code == 200 and json.loads(check_dns.content)[0]['delayed_delete_time'] == \"0\" and json.loads(check_dns.content)[0]['delayed_create_time'] == \"0\"):\n                print (\"DNS already exists.. looping\")\n                i = i + 1\n\nprint(\"eip_host_list={}\".format(host_list))\n# endregion\nexit(0)\n",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150225147363",
    "kind": "app_task",
    "uuid": "09b2080b-92f8-4659-93d5-7ca94d838653",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150225147363",
    "name": "EipReserveHost"
  }
}
