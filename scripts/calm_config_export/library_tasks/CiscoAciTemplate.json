{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "CiscoAciTemplate",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "# region headers\n# escript-template v20190611 / stephane.bourdeaud@nutanix.com\n# * author:    stephane.bourdeaud@nutanix.com\n# * version:   2019/06/11 - v0.2\n# task_name: n/a (template)\n# notes:     Cisco ACI API documentation can be found here:\n#            https://www.cisco.com/c/en/us/td/docs/switches/datacenter/aci/apic/sw/4-x/rest-api-config/Cisco-APIC-REST-API-Configuration-Guide-401.html\n#            As a general guideline, the object model of the API can be\n#            directly from the APIC UI. We also strongly encourage using the\n#            API inspector available in the APIC to figure out calls and\n#            payloads easily.\n# endregion\n\n# region capture Calm variables\nusername = '@@{aci_user.username}@@'\nusername_secret = \"@@{aci_user.secret}@@\"\napi_server = \"@@{aci_ip}@@\"\n# endregion\n\n# region generic prepare api call\napi_server_port = \"443\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\n# endregion\n\n# region login\n# prepare\napi_server_endpoint = \"/api/aaaLogin.json\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\n\n# Compose the json payload\npayload = {\n    \"aaaUser\": {\n        \"attributes\": {\n            \"name\": username,\n            \"pwd\": username_secret\n        }\n    }\n}\n\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\n# ! Get rid of verify=False if you're using proper certificates\nresp = urlreq(\n    url,\n    verb=method,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n\n# deal with the result/response\nif resp.ok:\n    print(\"Login request was successful\")\n    json_resp = json.loads(resp.content)\n    aci_token = json_resp['imdata'][0]['aaaLogin']['attributes']['token']\n    headers = {'content-type': 'application/json', 'Cookie': 'APIC-Cookie=' + aci_token}\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(json.dumps(payload)))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n\n# region do something\n# prepare\napi_server_endpoint = \"/api/someendpoint.json\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\n\n# Compose the json payload\npayload = {\n    \"example\": {\n        \"example\": {\n            \"example\": \"example\",\n            \"example\": \"example\"\n        }\n    }\n}\n\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\n# ! Get rid of verify=False if you're using proper certificates\nresp = urlreq(\n    url,\n    verb=method,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful\")\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(json.dumps(payload)))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n\n# region logout\n# prepare\napi_server_endpoint = \"/api/aaaLogout.json\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\n\n# Compose the json payload\npayload = {\n    \"aaaUser\": {\n        \"attributes\": {\n            \"name\": username,\n            \"pwd\": username_secret\n        }\n    }\n}\n\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\n# ! Get rid of verify=False if you're using proper certificates\nresp = urlreq(\n    url,\n    verb=method,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n\n# deal with the result/response\nif resp.ok:\n    print(\"Logout request was successful\")\n    exit(0)\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(json.dumps(payload)))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "CiscoAciTemplate",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "# region headers\n# escript-template v20190611 / stephane.bourdeaud@nutanix.com\n# * author:    stephane.bourdeaud@nutanix.com\n# * version:   2019/06/11 - v0.2\n# task_name: n/a (template)\n# notes:     Cisco ACI API documentation can be found here:\n#            https://www.cisco.com/c/en/us/td/docs/switches/datacenter/aci/apic/sw/4-x/rest-api-config/Cisco-APIC-REST-API-Configuration-Guide-401.html\n#            As a general guideline, the object model of the API can be\n#            directly from the APIC UI. We also strongly encourage using the\n#            API inspector available in the APIC to figure out calls and\n#            payloads easily.\n# endregion\n\n# region capture Calm variables\nusername = '@@{aci_user.username}@@'\nusername_secret = \"@@{aci_user.secret}@@\"\napi_server = \"@@{aci_ip}@@\"\n# endregion\n\n# region generic prepare api call\napi_server_port = \"443\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\n# endregion\n\n# region login\n# prepare\napi_server_endpoint = \"/api/aaaLogin.json\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\n\n# Compose the json payload\npayload = {\n    \"aaaUser\": {\n        \"attributes\": {\n            \"name\": username,\n            \"pwd\": username_secret\n        }\n    }\n}\n\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\n# ! Get rid of verify=False if you're using proper certificates\nresp = urlreq(\n    url,\n    verb=method,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n\n# deal with the result/response\nif resp.ok:\n    print(\"Login request was successful\")\n    json_resp = json.loads(resp.content)\n    aci_token = json_resp['imdata'][0]['aaaLogin']['attributes']['token']\n    headers = {'content-type': 'application/json', 'Cookie': 'APIC-Cookie=' + aci_token}\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(json.dumps(payload)))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n\n# region do something\n# prepare\napi_server_endpoint = \"/api/someendpoint.json\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\n\n# Compose the json payload\npayload = {\n    \"example\": {\n        \"example\": {\n            \"example\": \"example\",\n            \"example\": \"example\"\n        }\n    }\n}\n\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\n# ! Get rid of verify=False if you're using proper certificates\nresp = urlreq(\n    url,\n    verb=method,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful\")\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(json.dumps(payload)))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n\n# region logout\n# prepare\napi_server_endpoint = \"/api/aaaLogout.json\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\n\n# Compose the json payload\npayload = {\n    \"aaaUser\": {\n        \"attributes\": {\n            \"name\": username,\n            \"pwd\": username_secret\n        }\n    }\n}\n\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\n# ! Get rid of verify=False if you're using proper certificates\nresp = urlreq(\n    url,\n    verb=method,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n\n# deal with the result/response\nif resp.ok:\n    print(\"Logout request was successful\")\n    exit(0)\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(json.dumps(payload)))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150184499548",
    "kind": "app_task",
    "uuid": "0916f738-9764-425b-96b9-363c99930eb1",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150184499548",
    "name": "CiscoAciTemplate"
  }
}
