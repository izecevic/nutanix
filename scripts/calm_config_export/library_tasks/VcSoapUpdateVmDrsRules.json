{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "VcSoapUpdateVmDrsRules",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "# region headers\n# * author:     igor.zecevic@nutanix.com, stephane.bourdeaud@nutanix.com\n# * version:    v1.0 - initial version (igor)\n# *             v1.1 - added login/logout (stephane)\n# * date:       17/03/2020\n# task_name:    VcSoapUpdateVmDrsRules\n# description:  Update a ClusterAntiAffinity Rules (Separate VMs)\n#               This script retreives an existing drs rules and update it\n#               Add a VM into an existing drs rules using drs_vm_update=add\n#               Remove a VM from an existing drs rules using drs_vm_update=remove\n# input vars:   vc_cookie, api_server, cluster_id, vm_id\n#               drs_rule_name, drs_operation, drs_vm_update\n# output vars:  none\n# endregion\n\n# region dealing with Scaling In/Out the application\nnb_replicas = str(len(\"@@{calm_array_name}@@\".split(\",\")) - 1)\nif ((\"@@{calm_array_index}@@\" != nb_replicas) or (\"@@{calm_array_index}@@\" < \"2\")):\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\ncluster_id = \"@@{vc_cluster_id}@@\" #retreived from VcSoapGetObjects\ndrs_rule_name = \"@@{calm_application_name}@@\"\ndrs_operation = \"edit\" #add / edit / remove\ndrs_vm_update = \"add\" #add or remove VM from drsrules\napi_server = \"@@{vc_endpoint}@@\"\nvm_id = \"@@{vc_vm_id}@@\"  #retreived from VcSoapGetObjects\nref_vm_list = \"@@{calm_array_vc_vm_id}@@\".split(\",\")\n# endregion\n\n#region API call function\ndef process_request(url, method, headers, payload):\n    r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status Code: {}\".format(r))\n    else:\n        print(\"Request failed\")\n        print(\"Status Code: {}\".format(r))\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(payload))\n        print(\"Response: {}\".format(r.text))\n        resp_parse = ET.fromstring(r.text)\n        for element in resp_parse.iter('*'):\n          if \"faultstring\" in element.tag:\n            print(\"\")\n            print(\"Error: {}\".format(element.text))\n            break\n        exit(1)\n    return r\n#endregion\n\n#region login\n#region prepare login API call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml'}\n#endregion\n\n#region login API call\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Login>\n         <_this type=\"SessionManager\">SessionManager</_this>\n         <userName>'''+username+'''</userName>\n         <password>'''+password+'''</password>\n      </Login>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# pass the cookie in vc_soap_session so that it may be captured by Calm.\nvc_cookie = resp.headers.get('Set-Cookie').replace('\"','').split(\";\")[0]\n#endregion\n#endregion\n\n#region main processing\n# region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n# endregion\n\n# region get application drs rules\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n   <soapenv:Body> \n    <RetrieveProperties>  \n      <_this xsi:type=\"ManagedObjectReference\" type=\"PropertyCollector\">propertyCollector</_this>  \n      <specSet> \n        <propSet> \n          <type>ClusterComputeResource</type>  \n          <all>false</all>  \n          <pathSet>configuration.rule</pathSet>\n        </propSet>  \n        <objectSet> \n          <obj xsi:type=\"ManagedObjectReference\" type=\"ClusterComputeResource\">'''+cluster_id+'''</obj>  \n          <skip>false</skip> \n        </objectSet> \n      </specSet> \n    </RetrieveProperties> \n  </soapenv:Body> \n</soapenv:Envelope>'''\n\n# make the api call\nprint(\"STEP: Fetching drs rule...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# getting drs rules\nresp_parse = ET.fromstring(resp.text)\npayload_find = resp_parse.findall(\".//{urn:vim25}ClusterRuleInfo\")\nfor element in payload_find:\n    for name in element.findall(\"{urn:vim25}name\"):\n        if name.text == drs_rule_name:\n            print(\"Found DRS rule: {}\".format(name.text))\n            vm_list = []\n            drs_rule_key = format(element.find(\"{urn:vim25}key\").text)\n            drs_rule_element = element #this element will be pushed to the update drs rules\n            for vm in element.findall(\"{urn:vim25}vm\"):\n                print(\"This vm is a member of the drs rule: {}\".format(vm.text))\n                vm_list.append(vm.text)\n\nvms_to_add = list(set(ref_vm_list) - set(vm_list))\nprint(\"The following vms are not in DRS: {}\".format(vms_to_add))\ntry:\n    drs_rule_key\n    drs_rule_element\nexcept:\n    for element in payload_find:\n        for name in element.findall(\"{urn:vim25}name\"):\n            print(\"Existing DRS rule: {}\".format(name.text))\n    print(\"Could not find drs rule!\")\n    exit(1)\n# endregion\n\n# region update drs rules\npayload ='''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> \n  <soapenv:Body> \n    <ReconfigureComputeResource_Task>  \n      <_this type=\"ClusterComputeResource\">'''+cluster_id+'''</_this>\n        <spec xsi:type=\"ClusterConfigSpecEx\">\n          <rulesSpec> \n            <operation>'''+drs_operation+'''</operation>\n          </rulesSpec>  \n        </spec>  \n      <modify>true</modify> \n    </ReconfigureComputeResource_Task> \n  </soapenv:Body> \n</soapenv:Envelope>'''\n\n# push the retreived drs_rule_obj into the payload\npayload_parse = ET.fromstring(payload)\npayload_find = payload_parse.find(\".//{urn:vim25}rulesSpec\")\npayload_push = ET.SubElement(payload_find,\"info\")\npayload_push.attrib[\"xsi:type\"]=\"ClusterAntiAffinityRuleSpec\"\nfor element in drs_rule_element:\n    payload_push.append(element)\n\n# push the drs_vm_update to the payload (either add or delete vm)\nif drs_vm_update == \"add\":\n      for vm in vms_to_add:\n            print (\"Adding vm {}\".format(vm))\n            vm_push = ET.SubElement(payload_push,\"vm\")\n            vm_push.attrib[\"type\"]=\"VirtualMachine\"\n            vm_push.text = vm\nelif drs_vm_update == \"remove\":\n  for element in drs_rule_element:\n      if element.text == vm_id:\n        payload_push.remove(element)\n\n# make the api call\nprint(\"STEP: Updating drs rule...\")\npayload = ET.tostring(payload_parse)\n#print(\"payload: {}\".format(payload))\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n#endregion\n\n#region logout\n#region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n#endregion\n\n#region logout API call\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Logout>\n         <_this type=\"SessionManager\">SessionManager</_this>\n      </Logout>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n#endregion\n#endregion\n\nexit(0)"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "VcSoapUpdateVmDrsRules",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "# region headers\n# * author:     igor.zecevic@nutanix.com, stephane.bourdeaud@nutanix.com\n# * version:    v1.0 - initial version (igor)\n# *             v1.1 - added login/logout (stephane)\n# * date:       17/03/2020\n# task_name:    VcSoapUpdateVmDrsRules\n# description:  Update a ClusterAntiAffinity Rules (Separate VMs)\n#               This script retreives an existing drs rules and update it\n#               Add a VM into an existing drs rules using drs_vm_update=add\n#               Remove a VM from an existing drs rules using drs_vm_update=remove\n# input vars:   vc_cookie, api_server, cluster_id, vm_id\n#               drs_rule_name, drs_operation, drs_vm_update\n# output vars:  none\n# endregion\n\n# region dealing with Scaling In/Out the application\nnb_replicas = str(len(\"@@{calm_array_name}@@\".split(\",\")) - 1)\nif ((\"@@{calm_array_index}@@\" != nb_replicas) or (\"@@{calm_array_index}@@\" < \"2\")):\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\ncluster_id = \"@@{vc_cluster_id}@@\" #retreived from VcSoapGetObjects\ndrs_rule_name = \"@@{calm_application_name}@@\"\ndrs_operation = \"edit\" #add / edit / remove\ndrs_vm_update = \"add\" #add or remove VM from drsrules\napi_server = \"@@{vc_endpoint}@@\"\nvm_id = \"@@{vc_vm_id}@@\"  #retreived from VcSoapGetObjects\nref_vm_list = \"@@{calm_array_vc_vm_id}@@\".split(\",\")\n# endregion\n\n#region API call function\ndef process_request(url, method, headers, payload):\n    r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status Code: {}\".format(r))\n    else:\n        print(\"Request failed\")\n        print(\"Status Code: {}\".format(r))\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(payload))\n        print(\"Response: {}\".format(r.text))\n        resp_parse = ET.fromstring(r.text)\n        for element in resp_parse.iter('*'):\n          if \"faultstring\" in element.tag:\n            print(\"\")\n            print(\"Error: {}\".format(element.text))\n            break\n        exit(1)\n    return r\n#endregion\n\n#region login\n#region prepare login API call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml'}\n#endregion\n\n#region login API call\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Login>\n         <_this type=\"SessionManager\">SessionManager</_this>\n         <userName>'''+username+'''</userName>\n         <password>'''+password+'''</password>\n      </Login>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# pass the cookie in vc_soap_session so that it may be captured by Calm.\nvc_cookie = resp.headers.get('Set-Cookie').replace('\"','').split(\";\")[0]\n#endregion\n#endregion\n\n#region main processing\n# region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n# endregion\n\n# region get application drs rules\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n   <soapenv:Body> \n    <RetrieveProperties>  \n      <_this xsi:type=\"ManagedObjectReference\" type=\"PropertyCollector\">propertyCollector</_this>  \n      <specSet> \n        <propSet> \n          <type>ClusterComputeResource</type>  \n          <all>false</all>  \n          <pathSet>configuration.rule</pathSet>\n        </propSet>  \n        <objectSet> \n          <obj xsi:type=\"ManagedObjectReference\" type=\"ClusterComputeResource\">'''+cluster_id+'''</obj>  \n          <skip>false</skip> \n        </objectSet> \n      </specSet> \n    </RetrieveProperties> \n  </soapenv:Body> \n</soapenv:Envelope>'''\n\n# make the api call\nprint(\"STEP: Fetching drs rule...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# getting drs rules\nresp_parse = ET.fromstring(resp.text)\npayload_find = resp_parse.findall(\".//{urn:vim25}ClusterRuleInfo\")\nfor element in payload_find:\n    for name in element.findall(\"{urn:vim25}name\"):\n        if name.text == drs_rule_name:\n            print(\"Found DRS rule: {}\".format(name.text))\n            vm_list = []\n            drs_rule_key = format(element.find(\"{urn:vim25}key\").text)\n            drs_rule_element = element #this element will be pushed to the update drs rules\n            for vm in element.findall(\"{urn:vim25}vm\"):\n                print(\"This vm is a member of the drs rule: {}\".format(vm.text))\n                vm_list.append(vm.text)\n\nvms_to_add = list(set(ref_vm_list) - set(vm_list))\nprint(\"The following vms are not in DRS: {}\".format(vms_to_add))\ntry:\n    drs_rule_key\n    drs_rule_element\nexcept:\n    for element in payload_find:\n        for name in element.findall(\"{urn:vim25}name\"):\n            print(\"Existing DRS rule: {}\".format(name.text))\n    print(\"Could not find drs rule!\")\n    exit(1)\n# endregion\n\n# region update drs rules\npayload ='''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> \n  <soapenv:Body> \n    <ReconfigureComputeResource_Task>  \n      <_this type=\"ClusterComputeResource\">'''+cluster_id+'''</_this>\n        <spec xsi:type=\"ClusterConfigSpecEx\">\n          <rulesSpec> \n            <operation>'''+drs_operation+'''</operation>\n          </rulesSpec>  \n        </spec>  \n      <modify>true</modify> \n    </ReconfigureComputeResource_Task> \n  </soapenv:Body> \n</soapenv:Envelope>'''\n\n# push the retreived drs_rule_obj into the payload\npayload_parse = ET.fromstring(payload)\npayload_find = payload_parse.find(\".//{urn:vim25}rulesSpec\")\npayload_push = ET.SubElement(payload_find,\"info\")\npayload_push.attrib[\"xsi:type\"]=\"ClusterAntiAffinityRuleSpec\"\nfor element in drs_rule_element:\n    payload_push.append(element)\n\n# push the drs_vm_update to the payload (either add or delete vm)\nif drs_vm_update == \"add\":\n      for vm in vms_to_add:\n            print (\"Adding vm {}\".format(vm))\n            vm_push = ET.SubElement(payload_push,\"vm\")\n            vm_push.attrib[\"type\"]=\"VirtualMachine\"\n            vm_push.text = vm\nelif drs_vm_update == \"remove\":\n  for element in drs_rule_element:\n      if element.text == vm_id:\n        payload_push.remove(element)\n\n# make the api call\nprint(\"STEP: Updating drs rule...\")\npayload = ET.tostring(payload_parse)\n#print(\"payload: {}\".format(payload))\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n#endregion\n\n#region logout\n#region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n#endregion\n\n#region logout API call\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Logout>\n         <_this type=\"SessionManager\">SessionManager</_this>\n      </Logout>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n#endregion\n#endregion\n\nexit(0)",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150422396143",
    "kind": "app_task",
    "uuid": "0fe6a279-3f3a-4044-9958-3c65d60053e9",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150422396143",
    "name": "VcSoapUpdateVmDrsRules"
  }
}
