{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "PcMountNgt",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "# region headers\n# escript-template v20190523 / stephane.bourdeaud@nutanix.com\n# * author:       stephane.bourdeaud@nutanix.com\n# * version:      2019/06/04\n# task_name:      PcMountNgt\n# description:    This script mounts the Nutanix Guest Tools on the AHV\n#                 virtual machine provisioned by Calm.\n# endregion\n\n# region capture Calm macros\npc_user = \"@@{pc.username}@@\"\npc_password = \"@@{pc.secret}@@\"\nvm_uuid = \"@@{platform.metadata.uuid}@@\"\ncluster_uuid = \"@@{platform.status.cluster_reference.uuid}@@\"\npc_ip = \"@@{pc_ip}@@\"\n# endregion\n\n# region prepare variables\ncluster_uuid_url = \"https://{}:9440/api/nutanix/v3/clusters/{}\".format(\n    pc_ip,\n    cluster_uuid\n)\nheaders = {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json; charset=UTF-8'\n}\n# endregion\n\n\n# region functions\ndef process_request(url, method, user, password, headers, payload=None):\n    if payload is not None:\n        payload = json.dumps(payload)\n    r = urlreq(\n            url,\n            verb=method,\n            auth=\"BASIC\",\n            user=user,\n            passwd=password,\n            params=payload,\n            verify=False,\n            headers=headers\n        )\n    return r\n# endregion\n\nprint(\"Mounting NGT...\")\n\n# region get the AHV cluster IP address\nmethod = 'GET'\nurl = cluster_uuid_url\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, pc_user, pc_password, headers)\nresult = json.loads(resp.content)\n\nif resp.ok:\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    cluster_ip = result[\"status\"][\"resources\"][\"network\"][\"external_ip\"]\n    print(\"The AHV cluster IP address is {}\".format(cluster_ip))\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    exit(1)\n# endregion\n\n# region mount the NGT image (to regenerate the certificates)\nmethod = 'POST'\nurl = \"https://{}:9440/PrismGateway/services/rest/v1/vms/{}/guest_tools/mount\".format(\n    cluster_ip,\n    vm_uuid\n)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, pc_user, pc_password, headers)\nresult = json.loads(resp.content)\n\nif resp.ok:\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"NGT mounted\")\n    exit(0)\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    exit(1)\n# endregion\n"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "PcMountNgt",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "# region headers\n# escript-template v20190523 / stephane.bourdeaud@nutanix.com\n# * author:       stephane.bourdeaud@nutanix.com\n# * version:      2019/06/04\n# task_name:      PcMountNgt\n# description:    This script mounts the Nutanix Guest Tools on the AHV\n#                 virtual machine provisioned by Calm.\n# endregion\n\n# region capture Calm macros\npc_user = \"@@{pc.username}@@\"\npc_password = \"@@{pc.secret}@@\"\nvm_uuid = \"@@{platform.metadata.uuid}@@\"\ncluster_uuid = \"@@{platform.status.cluster_reference.uuid}@@\"\npc_ip = \"@@{pc_ip}@@\"\n# endregion\n\n# region prepare variables\ncluster_uuid_url = \"https://{}:9440/api/nutanix/v3/clusters/{}\".format(\n    pc_ip,\n    cluster_uuid\n)\nheaders = {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json; charset=UTF-8'\n}\n# endregion\n\n\n# region functions\ndef process_request(url, method, user, password, headers, payload=None):\n    if payload is not None:\n        payload = json.dumps(payload)\n    r = urlreq(\n            url,\n            verb=method,\n            auth=\"BASIC\",\n            user=user,\n            passwd=password,\n            params=payload,\n            verify=False,\n            headers=headers\n        )\n    return r\n# endregion\n\nprint(\"Mounting NGT...\")\n\n# region get the AHV cluster IP address\nmethod = 'GET'\nurl = cluster_uuid_url\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, pc_user, pc_password, headers)\nresult = json.loads(resp.content)\n\nif resp.ok:\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    cluster_ip = result[\"status\"][\"resources\"][\"network\"][\"external_ip\"]\n    print(\"The AHV cluster IP address is {}\".format(cluster_ip))\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    exit(1)\n# endregion\n\n# region mount the NGT image (to regenerate the certificates)\nmethod = 'POST'\nurl = \"https://{}:9440/PrismGateway/services/rest/v1/vms/{}/guest_tools/mount\".format(\n    cluster_ip,\n    vm_uuid\n)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, pc_user, pc_password, headers)\nresult = json.loads(resp.content)\n\nif resp.ok:\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"NGT mounted\")\n    exit(0)\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    exit(1)\n# endregion\n",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150299323329",
    "kind": "app_task",
    "uuid": "2c38ae0e-7c93-4c58-ac39-c2033d35d2df",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150299323329",
    "name": "PcMountNgt"
  }
}
