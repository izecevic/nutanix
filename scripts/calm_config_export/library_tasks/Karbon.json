{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "Karbon",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "#!/usr/bin/python\n##############################################\n# Name        : Karbon.py\n# Author      : Calm Devops\n# Version     : 1.0\n# Description : Script will enable Karbon,download image and create cluster\n##############################################\nimport requests\nimport json\nimport re\nimport time\nimport sys\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\nclass RestUtilException(Exception):\n    pass\n\ndef _wrap(resp):\n    if resp.status_code == 200 :\n        try:\n           return resp.json()\n        except:\n           return None\n    else:\n        try:\n            resp_json = resp.json()\n            if 'message' in resp_json:\n                raise RestUtilException(\"Rest API request failed with error: %s\" % resp_json['message'])\n        except Exception:\n            print(resp)\n            raise RestUtilException(\"Rest API request failed : %s\" % resp.reason)\n\ndef _do_get(url, cookies=None, params=None, auth=None, timeout=120):\n    try:\n        session = RestUtil(BASE_URL).get_session()\n        headers = {'Content-Type': 'application/json'}\n        for i in range(3):\n            resp = session.get(url, params=params,\n                            auth=_auth(), timeout=timeout,\n                            headers=headers,cookies=cookies, verify=False)\n            if resp.status_code in [500,503] :\n                print(\"Sleeping for 60s because of status code\",resp.status_code)\n                time.sleep(60)\n            else:\n                break\n        return _wrap(resp),resp\n    except Exception:\n        print(\"Rest API GET request failed\")\n        raise\n\ndef _do_post(url,params=None, cookies=None,auth=None, timeout=120):\n    try:\n        session = RestUtil(BASE_URL).get_session()\n        headers = {'Content-Type': 'application/json'}\n        for i in range(3):\n            resp = session.post(url, data=json.dumps(params),\n                            auth=_auth(), timeout=timeout,\n                            headers=headers, cookies=cookies, verify=False)\n            if resp.status_code in [500]:\n                time.sleep(300)\n            else:\n                break\n        #print(resp.json())\n        return _wrap(resp),resp\n    except Exception:\n        print(\"Rest API POST request failed\")\n        raise\n\ndef _do_put(url, params=None, auth=None, timeout=120):\n    try:\n        session = RestUtil(BASE_URL).get_session()\n        headers = {'Content-Type': 'application/json'}\n        for i in range(3):\n            resp = session.put(url, data=json.dumps(params),\n                            auth=_auth(), timeout=timeout,\n                            headers=headers, verify=False)\n            if resp.status_code in [500] :\n                time.sleep(300)\n            else:\n                break\n        return _wrap(resp)\n    except Exception:\n        print(\"Rest API PUT request failed\")\n        raise\n\ndef _do_delete(url, params=None, auth=None, timeout=120):\n    try:\n        session = RestUtil(BASE_URL).get_session()\n        headers = {'Content-Type': 'application/json'}\n        for i in range(3):\n            resp = session.delete(url, auth=_auth(), timeout=timeout,\n                              headers=headers, verify=False)\n            if resp.status_code in [500] :\n                time.sleep(300)\n            else:\n                break\n        return _wrap(resp)\n    except Exception:\n        print(\"Rest API DELETE request failed\")\n        raise\n\ndef _get_session(server):\n    http_req_adapter = requests.adapters.HTTPAdapter(max_retries=3, pool_maxsize=30, pool_connections=1)\n    s = requests.Session()\n    s.mount(server, http_req_adapter)\n    return s\n\nclass RestUtil(object):\n    __instance = None\n    def __new__(cls, server):\n        if RestUtil.__instance is None:\n            RestUtil.__instance = object.__new__(cls)\n        RestUtil.__instance.session = _get_session(server)\n        return RestUtil.__instance\n\n    def get_session(self):\n        return self.session\n\ndef _v3_api_url(path):\n    return BASE_URL+path\n\ndef _v2_api_url(path):\n    return BASE_URL+'/api/nutanix/v2'+path\n\ndef _auth():\n    return (USER_NAME, PASSWORD)\n\ndef connect(url, user_name, password):\n    global BASE_URL, USER_NAME, PASSWORD\n    BASE_URL = url\n    USER_NAME = user_name\n    PASSWORD = password\n    _s = RestUtil(url)\n\n_url = _v3_api_url\n\npcip=\"<PC_IP>\"\nUSER_NAME=\"<username>\"\nPASSWORD=\"<password>\"\nClusterName=\"<clustername>\"  # MyCluster1\nVLAN_ID = \"<vlan_id>\"  # eg. 889\nstorage_container = \"<clusternae>\" #eg. default-container-168023\nKubVersion = \"<version>\" #eg 1.16.8-0\"\n\nBASE_URL=\"https://\"+pcip+\":9440\"\n\npath = \"/PrismGateway/services/rest/v1/genesis\"\nenable_payload = {\"value\":\"{\\\".oid\\\":\\\"ClusterManager\\\",\\\".method\\\":\\\"enable_service_with_prechecks\\\",\\\".kwargs\\\":{\\\"service_list_json\\\":\\\"{\\\\\\\"service_list\\\\\\\":[\\\\\\\"KarbonUIService\\\\\\\",\\\\\\\"KarbonCoreService\\\\\\\"]}\\\"}}\"}\njson_resp,resp = _do_post(_url(path),enable_payload)\nif \"true\" not in json_resp['value']:\n  print(\"Karbon Could not be enabled\")\n  exit(1)\nprint(\"Karbon service Enabled\")\n#time.sleep(60)\n\nSubnetURL = \"/api/nutanix/v3/subnets/list\"\nSubnetPayload = { \"kind\": \"subnet\", \"filter\": \"vlan_id=={}\".format(VLAN_ID), \"length\": 100 }\nout,resp  = _do_post(_url(SubnetURL),SubnetPayload)\nif len(out['entities']) == 0:\n  print(VLAN_ID,\" not found\")\n  exit(1)\nvlan_uuid = out['entities'][0]['metadata']['uuid']\ncluster_uuid = out['entities'][0]['spec']['cluster_reference']['uuid']\nprint(\"Vlan uuid is\", vlan_uuid)\n\ndummypath = \"/api/nutanix/v3/users/me\"\njson_resp,resp = _do_get(_url(dummypath))\ncookies = resp.cookies\n\npath = \"/karbon/acs/image/list\"\nimage_uuid = []\nwhile len(image_uuid) == 0:\n  out,resp  = _do_get(_url(path),cookies=cookies)\n  image_uuid = [ (i[\"uuid\"],i[\"os_flavor\"]) for i in out if i[\"uuid\"].strip()!=\"\"]\n  if len(image_uuid) == 0 :\n    print(\"Enable in process, Image not found\")\n    karbonget = \"/karbon/\"\n    out,resp  = _do_get(_url(karbonget),cookies=cookies)\n    time.sleep(60)\nprint(\"Image uuid is \",image_uuid)\nos_flavor = image_uuid[0][1]\nprint(\"Os flavor\",image_uuid[0][1])\n\nKarbonImageDownload = \"/karbon/acs/image/download\"\ndownload_payload = {\"uuid\":image_uuid[0][0] }\nout,resp  = _do_post(_url(KarbonImageDownload),download_payload,cookies=cookies)\nimage_uuid2 = json.loads(resp.text)['image_uuid']\nprint(\"Download Resp: \",resp.text)\n\ndlstatus = \"Downloading\"\nwhile dlstatus == \"Downloading\":\n  out,resp  = _do_get(_url(path),cookies=cookies)\n  dlstatus = out[0]['status']\n  time.sleep(20)\n  print(\"Status is: \",dlstatus)\n\ntime.sleep(10)\nClusterUrl = \"/karbon/acs/k8s/cluster\"\nDevClusterPayload = {\"name\":ClusterName,\"description\":\"\",\"vm_network\":vlan_uuid,\"k8s_config\":{\"service_cluster_ip_range\":\"172.19.0.0/16\",\"network_cidr\":\"172.20.0.0/16\",\"fqdn\":\"\",\"workers\":[{\"node_pool_name\":\"\",\"name\":\"\",\"uuid\":\"\",\"resource_config\":{\"cpu\":8,\"memory_mib\":8192,\"image\":image_uuid2,\"disk_mib\":122880}}],\"masters\":[{\"node_pool_name\":\"\",\"name\":\"\",\"uuid\":\"\",\"resource_config\":{\"cpu\":2,\"memory_mib\":4096,\"image\":image_uuid2,\"disk_mib\":122880}}],\"os_flavor\":os_flavor,\"network_subnet_len\":24,\"version\":KubVersion},\"cluster_ref\":cluster_uuid,\"logging_config\":{\"enable_app_logging\":False},\"storage_class_config\":{\"metadata\":{\"name\":\"default-storageclass\"},\"spec\":{\"reclaim_policy\":\"Delete\",\"sc_volumes_spec\":{\"cluster_ref\":cluster_uuid ,\"user\":USER_NAME,\"password\":PASSWORD,\"storage_container\":storage_container,\"file_system\":\"ext4\",\"flash_mode\":False}}},\"etcd_config\":{\"num_instances\":1,\"name\":ClusterName,\"nodes\":[{\"node_pool_name\":\"\",\"name\":\"\",\"uuid\":\"\",\"resource_config\":{\"cpu\":4,\"memory_mib\":8192,\"image\":image_uuid2,\"disk_mib\":40960}}]}}\nout,resp  = _do_post(_url(ClusterUrl),DevClusterPayload,cookies=cookies)\nprint(resp.text)\n"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "Karbon",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "#!/usr/bin/python\n##############################################\n# Name        : Karbon.py\n# Author      : Calm Devops\n# Version     : 1.0\n# Description : Script will enable Karbon,download image and create cluster\n##############################################\nimport requests\nimport json\nimport re\nimport time\nimport sys\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\nclass RestUtilException(Exception):\n    pass\n\ndef _wrap(resp):\n    if resp.status_code == 200 :\n        try:\n           return resp.json()\n        except:\n           return None\n    else:\n        try:\n            resp_json = resp.json()\n            if 'message' in resp_json:\n                raise RestUtilException(\"Rest API request failed with error: %s\" % resp_json['message'])\n        except Exception:\n            print(resp)\n            raise RestUtilException(\"Rest API request failed : %s\" % resp.reason)\n\ndef _do_get(url, cookies=None, params=None, auth=None, timeout=120):\n    try:\n        session = RestUtil(BASE_URL).get_session()\n        headers = {'Content-Type': 'application/json'}\n        for i in range(3):\n            resp = session.get(url, params=params,\n                            auth=_auth(), timeout=timeout,\n                            headers=headers,cookies=cookies, verify=False)\n            if resp.status_code in [500,503] :\n                print(\"Sleeping for 60s because of status code\",resp.status_code)\n                time.sleep(60)\n            else:\n                break\n        return _wrap(resp),resp\n    except Exception:\n        print(\"Rest API GET request failed\")\n        raise\n\ndef _do_post(url,params=None, cookies=None,auth=None, timeout=120):\n    try:\n        session = RestUtil(BASE_URL).get_session()\n        headers = {'Content-Type': 'application/json'}\n        for i in range(3):\n            resp = session.post(url, data=json.dumps(params),\n                            auth=_auth(), timeout=timeout,\n                            headers=headers, cookies=cookies, verify=False)\n            if resp.status_code in [500]:\n                time.sleep(300)\n            else:\n                break\n        #print(resp.json())\n        return _wrap(resp),resp\n    except Exception:\n        print(\"Rest API POST request failed\")\n        raise\n\ndef _do_put(url, params=None, auth=None, timeout=120):\n    try:\n        session = RestUtil(BASE_URL).get_session()\n        headers = {'Content-Type': 'application/json'}\n        for i in range(3):\n            resp = session.put(url, data=json.dumps(params),\n                            auth=_auth(), timeout=timeout,\n                            headers=headers, verify=False)\n            if resp.status_code in [500] :\n                time.sleep(300)\n            else:\n                break\n        return _wrap(resp)\n    except Exception:\n        print(\"Rest API PUT request failed\")\n        raise\n\ndef _do_delete(url, params=None, auth=None, timeout=120):\n    try:\n        session = RestUtil(BASE_URL).get_session()\n        headers = {'Content-Type': 'application/json'}\n        for i in range(3):\n            resp = session.delete(url, auth=_auth(), timeout=timeout,\n                              headers=headers, verify=False)\n            if resp.status_code in [500] :\n                time.sleep(300)\n            else:\n                break\n        return _wrap(resp)\n    except Exception:\n        print(\"Rest API DELETE request failed\")\n        raise\n\ndef _get_session(server):\n    http_req_adapter = requests.adapters.HTTPAdapter(max_retries=3, pool_maxsize=30, pool_connections=1)\n    s = requests.Session()\n    s.mount(server, http_req_adapter)\n    return s\n\nclass RestUtil(object):\n    __instance = None\n    def __new__(cls, server):\n        if RestUtil.__instance is None:\n            RestUtil.__instance = object.__new__(cls)\n        RestUtil.__instance.session = _get_session(server)\n        return RestUtil.__instance\n\n    def get_session(self):\n        return self.session\n\ndef _v3_api_url(path):\n    return BASE_URL+path\n\ndef _v2_api_url(path):\n    return BASE_URL+'/api/nutanix/v2'+path\n\ndef _auth():\n    return (USER_NAME, PASSWORD)\n\ndef connect(url, user_name, password):\n    global BASE_URL, USER_NAME, PASSWORD\n    BASE_URL = url\n    USER_NAME = user_name\n    PASSWORD = password\n    _s = RestUtil(url)\n\n_url = _v3_api_url\n\npcip=\"<PC_IP>\"\nUSER_NAME=\"<username>\"\nPASSWORD=\"<password>\"\nClusterName=\"<clustername>\"  # MyCluster1\nVLAN_ID = \"<vlan_id>\"  # eg. 889\nstorage_container = \"<clusternae>\" #eg. default-container-168023\nKubVersion = \"<version>\" #eg 1.16.8-0\"\n\nBASE_URL=\"https://\"+pcip+\":9440\"\n\npath = \"/PrismGateway/services/rest/v1/genesis\"\nenable_payload = {\"value\":\"{\\\".oid\\\":\\\"ClusterManager\\\",\\\".method\\\":\\\"enable_service_with_prechecks\\\",\\\".kwargs\\\":{\\\"service_list_json\\\":\\\"{\\\\\\\"service_list\\\\\\\":[\\\\\\\"KarbonUIService\\\\\\\",\\\\\\\"KarbonCoreService\\\\\\\"]}\\\"}}\"}\njson_resp,resp = _do_post(_url(path),enable_payload)\nif \"true\" not in json_resp['value']:\n  print(\"Karbon Could not be enabled\")\n  exit(1)\nprint(\"Karbon service Enabled\")\n#time.sleep(60)\n\nSubnetURL = \"/api/nutanix/v3/subnets/list\"\nSubnetPayload = { \"kind\": \"subnet\", \"filter\": \"vlan_id=={}\".format(VLAN_ID), \"length\": 100 }\nout,resp  = _do_post(_url(SubnetURL),SubnetPayload)\nif len(out['entities']) == 0:\n  print(VLAN_ID,\" not found\")\n  exit(1)\nvlan_uuid = out['entities'][0]['metadata']['uuid']\ncluster_uuid = out['entities'][0]['spec']['cluster_reference']['uuid']\nprint(\"Vlan uuid is\", vlan_uuid)\n\ndummypath = \"/api/nutanix/v3/users/me\"\njson_resp,resp = _do_get(_url(dummypath))\ncookies = resp.cookies\n\npath = \"/karbon/acs/image/list\"\nimage_uuid = []\nwhile len(image_uuid) == 0:\n  out,resp  = _do_get(_url(path),cookies=cookies)\n  image_uuid = [ (i[\"uuid\"],i[\"os_flavor\"]) for i in out if i[\"uuid\"].strip()!=\"\"]\n  if len(image_uuid) == 0 :\n    print(\"Enable in process, Image not found\")\n    karbonget = \"/karbon/\"\n    out,resp  = _do_get(_url(karbonget),cookies=cookies)\n    time.sleep(60)\nprint(\"Image uuid is \",image_uuid)\nos_flavor = image_uuid[0][1]\nprint(\"Os flavor\",image_uuid[0][1])\n\nKarbonImageDownload = \"/karbon/acs/image/download\"\ndownload_payload = {\"uuid\":image_uuid[0][0] }\nout,resp  = _do_post(_url(KarbonImageDownload),download_payload,cookies=cookies)\nimage_uuid2 = json.loads(resp.text)['image_uuid']\nprint(\"Download Resp: \",resp.text)\n\ndlstatus = \"Downloading\"\nwhile dlstatus == \"Downloading\":\n  out,resp  = _do_get(_url(path),cookies=cookies)\n  dlstatus = out[0]['status']\n  time.sleep(20)\n  print(\"Status is: \",dlstatus)\n\ntime.sleep(10)\nClusterUrl = \"/karbon/acs/k8s/cluster\"\nDevClusterPayload = {\"name\":ClusterName,\"description\":\"\",\"vm_network\":vlan_uuid,\"k8s_config\":{\"service_cluster_ip_range\":\"172.19.0.0/16\",\"network_cidr\":\"172.20.0.0/16\",\"fqdn\":\"\",\"workers\":[{\"node_pool_name\":\"\",\"name\":\"\",\"uuid\":\"\",\"resource_config\":{\"cpu\":8,\"memory_mib\":8192,\"image\":image_uuid2,\"disk_mib\":122880}}],\"masters\":[{\"node_pool_name\":\"\",\"name\":\"\",\"uuid\":\"\",\"resource_config\":{\"cpu\":2,\"memory_mib\":4096,\"image\":image_uuid2,\"disk_mib\":122880}}],\"os_flavor\":os_flavor,\"network_subnet_len\":24,\"version\":KubVersion},\"cluster_ref\":cluster_uuid,\"logging_config\":{\"enable_app_logging\":False},\"storage_class_config\":{\"metadata\":{\"name\":\"default-storageclass\"},\"spec\":{\"reclaim_policy\":\"Delete\",\"sc_volumes_spec\":{\"cluster_ref\":cluster_uuid ,\"user\":USER_NAME,\"password\":PASSWORD,\"storage_container\":storage_container,\"file_system\":\"ext4\",\"flash_mode\":False}}},\"etcd_config\":{\"num_instances\":1,\"name\":ClusterName,\"nodes\":[{\"node_pool_name\":\"\",\"name\":\"\",\"uuid\":\"\",\"resource_config\":{\"cpu\":4,\"memory_mib\":8192,\"image\":image_uuid2,\"disk_mib\":40960}}]}}\nout,resp  = _do_post(_url(ClusterUrl),DevClusterPayload,cookies=cookies)\nprint(resp.text)\n",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150119618287",
    "kind": "app_task",
    "uuid": "93601c5d-99b1-44cd-ad88-6075d2d31cd6",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150119618287",
    "name": "Karbon"
  }
}
