{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "escript-template",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "# region DELETE ME AFTER READING\n# ! Meant to be edited in VSCode w/ the BetterComments extension installed\n\n# * Conventions:\n# * Golden Rule: Adhere to https://pep8.org/ Anything listed below which is\n# * in contradiction with PEP8 is a lie.\n# 1. use all lower case for variable names.\n# 2. when composing variable names, use underscore to separate words.\n#    Exp: username_secret. Use this same convention in Calm.\n# 3. name sections with comments, and comment code where deemed useful.\n# 4. don't print secrets, including tokens. Favor authentication\n#    (login/logout) in each task.\n# 5. when saving your script, name it as the task name appears in Calm,\n#    using the following convention: NameOfIntegrationPointAPIendpointMethod.py\n# 6. use double quotes first, then single quotes.\n# 7. Try your best and keep line length under 80 characters, even though\n#    it makes your eyes bleed.\n# endregion\n\n# region headers\n# escript-template v20200316 / stephane.bourdeaud@nutanix.com\n# TODO Fill in this section with your information\n# * author:     <your email address here>\n# * version:    <date / notes>\n# task_name:    <enter the name of the task this script is for as it appears\n# in your blueprint>\n# description:\n# task type:    SetVariable or Execute\n# input_vars:   credname (credentials), endpoint_ip\n# output_vars:\n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\nusername = '@@{credname.username}@@'\nusername_secret = \"@@{credname.secret}@@\"\napi_server = \"@@{endpoint_ip}@@\"\n# endregion\n\n# region api call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    #* using basic authentication if no cookie was passed in the headers\n    if \"Cookie\" not in headers:\n        # ! Get rid of verify=False if you're using proper certificates\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        # ! Get rid of verify=False if you're using proper certificates\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    #* now dealing with the response\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n        if (r.content and ('/rest/com/vmware/cis/session' not in url)):\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n    #* use this to deal with specific api error code\n    #elif ((r.status_code == 400):\n    #    print(\"Status code: {}\".format(r.status_code))\n    #    print(\"Object already exists: skipping\")\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        #* printing headers can be a security breach if you expose the cookie\n        if \"Cookie\" not in headers:\n            print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/apis/batch/v1/\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\n\n# Compose the json payload\npayload = {\n    \"example\": \"example\",\n    \"example\": {\n        \"example\": \"example\"\n    }\n}\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# ! If you are passing on a variable you will need to print it\n# ! example: print(\"calm_variable_name={}\".format(python_variable))\n# endregion\n"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "escript-template",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "# region DELETE ME AFTER READING\n# ! Meant to be edited in VSCode w/ the BetterComments extension installed\n\n# * Conventions:\n# * Golden Rule: Adhere to https://pep8.org/ Anything listed below which is\n# * in contradiction with PEP8 is a lie.\n# 1. use all lower case for variable names.\n# 2. when composing variable names, use underscore to separate words.\n#    Exp: username_secret. Use this same convention in Calm.\n# 3. name sections with comments, and comment code where deemed useful.\n# 4. don't print secrets, including tokens. Favor authentication\n#    (login/logout) in each task.\n# 5. when saving your script, name it as the task name appears in Calm,\n#    using the following convention: NameOfIntegrationPointAPIendpointMethod.py\n# 6. use double quotes first, then single quotes.\n# 7. Try your best and keep line length under 80 characters, even though\n#    it makes your eyes bleed.\n# endregion\n\n# region headers\n# escript-template v20200316 / stephane.bourdeaud@nutanix.com\n# TODO Fill in this section with your information\n# * author:     <your email address here>\n# * version:    <date / notes>\n# task_name:    <enter the name of the task this script is for as it appears\n# in your blueprint>\n# description:\n# task type:    SetVariable or Execute\n# input_vars:   credname (credentials), endpoint_ip\n# output_vars:\n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\nusername = '@@{credname.username}@@'\nusername_secret = \"@@{credname.secret}@@\"\napi_server = \"@@{endpoint_ip}@@\"\n# endregion\n\n# region api call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    #* using basic authentication if no cookie was passed in the headers\n    if \"Cookie\" not in headers:\n        # ! Get rid of verify=False if you're using proper certificates\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        # ! Get rid of verify=False if you're using proper certificates\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    #* now dealing with the response\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n        if (r.content and ('/rest/com/vmware/cis/session' not in url)):\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n    #* use this to deal with specific api error code\n    #elif ((r.status_code == 400):\n    #    print(\"Status code: {}\".format(r.status_code))\n    #    print(\"Object already exists: skipping\")\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        #* printing headers can be a security breach if you expose the cookie\n        if \"Cookie\" not in headers:\n            print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/apis/batch/v1/\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\n\n# Compose the json payload\npayload = {\n    \"example\": \"example\",\n    \"example\": {\n        \"example\": \"example\"\n    }\n}\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# ! If you are passing on a variable you will need to print it\n# ! example: print(\"calm_variable_name={}\".format(python_variable))\n# endregion\n",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150226205324",
    "kind": "app_task",
    "uuid": "d6672999-bf81-45cb-acef-7124995d9138",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150226205324",
    "name": "escript-template"
  }
}
