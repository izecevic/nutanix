{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "FortigateAddGroup",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    FortigateAddGroup\n# description:  Create a new fortigate address group and add vm into it\n# input vars:   vms, group_name\n# output vars:  fortigate_group_name\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\nvms = \"@@{calm_array_name}@@\"\ngroup_name = \"@@{calm_application_name}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\n# endregion\n\ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'plain/text'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        print(resp.content)\n        print(resp.cookies.get('ccsrftoken'))\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\ndef fortiget_add_group(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie, vms, group_name, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/addrgrp?&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"','')\n    headers = {\n        'Content-Type': 'application/json',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n   \n    create_payload = {}\n    create_payload['name'] = group_name\n    create_payload['member'] = []\n    for vm in vms.split(\",\"):\n        create_payload['member'].append({'name' : vm})\n\n    print(json.dumps(create_payload))\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(create_payload), cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"fortigate_group_name=\".format(result['mkey']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \n\nfortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\n\nfortiget_add_group(api_server, api_server_port, fortigate_csrf_token,\n                   fortigate_cookie, vms, group_name, fortigate_vdom)\n"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "FortigateAddGroup",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    FortigateAddGroup\n# description:  Create a new fortigate address group and add vm into it\n# input vars:   vms, group_name\n# output vars:  fortigate_group_name\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\nvms = \"@@{calm_array_name}@@\"\ngroup_name = \"@@{calm_application_name}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\n# endregion\n\ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'plain/text'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        print(resp.content)\n        print(resp.cookies.get('ccsrftoken'))\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\ndef fortiget_add_group(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie, vms, group_name, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/addrgrp?&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"','')\n    headers = {\n        'Content-Type': 'application/json',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n   \n    create_payload = {}\n    create_payload['name'] = group_name\n    create_payload['member'] = []\n    for vm in vms.split(\",\"):\n        create_payload['member'].append({'name' : vm})\n\n    print(json.dumps(create_payload))\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(create_payload), cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"fortigate_group_name=\".format(result['mkey']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \n\nfortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\n\nfortiget_add_group(api_server, api_server_port, fortigate_csrf_token,\n                   fortigate_cookie, vms, group_name, fortigate_vdom)\n",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150236330470",
    "kind": "app_task",
    "uuid": "b4813c7b-1f67-4f4e-a650-15db223b71c9",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150236330470",
    "name": "FortigateAddGroup"
  }
}
