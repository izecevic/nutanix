{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "CalmRemoveApps",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "# region headers\n# escript-template v20190611 / stephane.bourdeaud@nutanix.com\n# * author:     MITU Bogdan Nicolae (EEAS-EXT) <Bogdan-Nicolae.MITU@ext.eeas.europa.eu>\n# *             stephane.bourdeaud@emeagso.lab\n# * version:    2019/09/19\n# task_name:    CalmRemoveApps\n# description:  Given a project UUID, delete all Calm Apps belonging to that \n#               project. \n# endregion\n\n#region capture Calm variables\napi_server = \"@@{pc_ip}@@\"\nusername = \"@@{pc.username}@@\"\nusername_secret = \"@@{pc.secret}@@\"\nproject_uuid = \"@@{project_uuid}@@\"\n#endregion\n\n#region prepare api call (get apps)\napi_server_port = \"9440\"\napi_server_endpoint = \"/api/nutanix/v3/apps/list\"\nlength = 250\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\n\n# Compose the json payload\npayload = {\n    \"kind\": \"app\", \n    \"length\":length, \n    \"offset\":0\n}\n# endregion\n\n#region make the api call (get apps)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n# endregion\n\n#region process the results (get apps)\nif resp.ok:\n    print (\"Request status code {} on {}\".format(resp.status_code,resp.request.url))\n    json_resp = json.loads(resp.content)\n    for app in json_resp['entities']:\n        if project_uuid == app['metadata']['project_reference']['uuid']:\n            print (\"Deleting application {}\".format(app['metadata']['name']))\n            #region prepare api call (delete app)\n            api_server_port = \"9440\"\n            api_server_endpoint = \"/api/nutanix/v3/apps/{}\".format(app['metadata']['uuid'])\n            url = \"https://{}:{}{}\".format(\n                api_server,\n                api_server_port,\n                api_server_endpoint\n            )\n            method = \"DELETE\"\n            headers = {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n            #endregion\n            #region make api call (delete app)\n            print(\"Making a {} API call to {}\".format(method, url))\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                headers=headers,\n                verify=False\n            )\n            #endregion\n            #region process results (delete app)\n            if resp.ok:\n                print (\"Request status code {} on {}\".format(resp.status_code,resp.request.url))\n                print (\"Application {} is deleting.\".format(app['metadata']['name']))\n                app_state = app['status']['state']\n                app_uuid = app['metadata']['uuid']\n                while app_state != 'deleted':\n                    sleep(15)\n                    method = 'GET'\n                    url = \"https://{}:9440/api/nutanix/v3/apps/{}\".format(\n                        api_server,\n                        app_uuid\n                    )\n                    print(\"Making a {} API call to {}\".format(method, url))\n                    resp = urlreq(\n                        url,\n                        verb=method,\n                        headers=headers,\n                        auth=\"BASIC\",\n                        user=username,\n                        passwd=username_secret,\n                        verify=False\n                    )\n                    if resp.ok:\n                        json_resp = json.loads(resp.content)\n                        print(\"Status:\", json_resp['status']['state'])\n                        if json_resp['status']['state'] is \"error\":\n                            print(\"App could not be deleted.\")\n                            print (\"Response content:\")\n                            print(json.dumps(json.loads(resp.content),indent=4))\n                            exit(1)\n                        app_state = json_resp['status']['state']\n                    else:\n                        print (\"Request failed with status code {}\".format(resp.status_code))\n                        print (\"Response content:\")\n                        print(json.dumps(json.loads(resp.content),indent=4))\n                        print(\"Headers: {}\".format(headers))\n                        exit(1)\n            else:\n                print (\"Request failed with status code {}\".format(resp.status_code))\n                print (\"Response content:\")\n                print(json.dumps(json.loads(resp.content),indent=4))\n                print(\"Headers: {}\".format(headers))\n                exit(1)\n            #endregion\nelse:\n    print (\"Request failed with status code {}\".format(resp.status_code))\n    print (\"Response content:\")\n    print(json.dumps(json.loads(resp.content),indent=4))\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(payload))\n    exit(1)\n# endregion\n"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "CalmRemoveApps",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "# region headers\n# escript-template v20190611 / stephane.bourdeaud@nutanix.com\n# * author:     MITU Bogdan Nicolae (EEAS-EXT) <Bogdan-Nicolae.MITU@ext.eeas.europa.eu>\n# *             stephane.bourdeaud@emeagso.lab\n# * version:    2019/09/19\n# task_name:    CalmRemoveApps\n# description:  Given a project UUID, delete all Calm Apps belonging to that \n#               project. \n# endregion\n\n#region capture Calm variables\napi_server = \"@@{pc_ip}@@\"\nusername = \"@@{pc.username}@@\"\nusername_secret = \"@@{pc.secret}@@\"\nproject_uuid = \"@@{project_uuid}@@\"\n#endregion\n\n#region prepare api call (get apps)\napi_server_port = \"9440\"\napi_server_endpoint = \"/api/nutanix/v3/apps/list\"\nlength = 250\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\n\n# Compose the json payload\npayload = {\n    \"kind\": \"app\", \n    \"length\":length, \n    \"offset\":0\n}\n# endregion\n\n#region make the api call (get apps)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n# endregion\n\n#region process the results (get apps)\nif resp.ok:\n    print (\"Request status code {} on {}\".format(resp.status_code,resp.request.url))\n    json_resp = json.loads(resp.content)\n    for app in json_resp['entities']:\n        if project_uuid == app['metadata']['project_reference']['uuid']:\n            print (\"Deleting application {}\".format(app['metadata']['name']))\n            #region prepare api call (delete app)\n            api_server_port = \"9440\"\n            api_server_endpoint = \"/api/nutanix/v3/apps/{}\".format(app['metadata']['uuid'])\n            url = \"https://{}:{}{}\".format(\n                api_server,\n                api_server_port,\n                api_server_endpoint\n            )\n            method = \"DELETE\"\n            headers = {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n            #endregion\n            #region make api call (delete app)\n            print(\"Making a {} API call to {}\".format(method, url))\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                headers=headers,\n                verify=False\n            )\n            #endregion\n            #region process results (delete app)\n            if resp.ok:\n                print (\"Request status code {} on {}\".format(resp.status_code,resp.request.url))\n                print (\"Application {} is deleting.\".format(app['metadata']['name']))\n                app_state = app['status']['state']\n                app_uuid = app['metadata']['uuid']\n                while app_state != 'deleted':\n                    sleep(15)\n                    method = 'GET'\n                    url = \"https://{}:9440/api/nutanix/v3/apps/{}\".format(\n                        api_server,\n                        app_uuid\n                    )\n                    print(\"Making a {} API call to {}\".format(method, url))\n                    resp = urlreq(\n                        url,\n                        verb=method,\n                        headers=headers,\n                        auth=\"BASIC\",\n                        user=username,\n                        passwd=username_secret,\n                        verify=False\n                    )\n                    if resp.ok:\n                        json_resp = json.loads(resp.content)\n                        print(\"Status:\", json_resp['status']['state'])\n                        if json_resp['status']['state'] is \"error\":\n                            print(\"App could not be deleted.\")\n                            print (\"Response content:\")\n                            print(json.dumps(json.loads(resp.content),indent=4))\n                            exit(1)\n                        app_state = json_resp['status']['state']\n                    else:\n                        print (\"Request failed with status code {}\".format(resp.status_code))\n                        print (\"Response content:\")\n                        print(json.dumps(json.loads(resp.content),indent=4))\n                        print(\"Headers: {}\".format(headers))\n                        exit(1)\n            else:\n                print (\"Request failed with status code {}\".format(resp.status_code))\n                print (\"Response content:\")\n                print(json.dumps(json.loads(resp.content),indent=4))\n                print(\"Headers: {}\".format(headers))\n                exit(1)\n            #endregion\nelse:\n    print (\"Request failed with status code {}\".format(resp.status_code))\n    print (\"Response content:\")\n    print(json.dumps(json.loads(resp.content),indent=4))\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(payload))\n    exit(1)\n# endregion\n",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150168074743",
    "kind": "app_task",
    "uuid": "2e733697-e479-4d9b-8955-d15c129e64f7",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150168074743",
    "name": "CalmRemoveApps"
  }
}
