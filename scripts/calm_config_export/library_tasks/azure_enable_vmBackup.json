{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "azure_enable_vmBackup",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "# region headers\n# * author:     jose.gomez@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       25/03/2020\n# task_name:    Azure_Enable_Backup\n# description:  Enable backup for an Azure VM\n# type:         Execute\n# input vars:   azure_subscription_id, azure_client_id, azure_tenant_id, azure_secret, azure_storage_account_name, az_recovery_services_vault_name, az_recovery_services_backup_policy_name\n# output vars:  none\n# endregion\n\n# region capture Calm variables\naz_subscription_id = '@@{azure_subscription_id}@@'\naz_client_id = '@@{azure_client_id}@@'\naz_tenant_id = '@@{azure_tenant_id}@@'\naz_secret = '@@{azure_secret}@@'\naz_resource_group_name = '@@{resource_group}@@'\naz_vm_name = '@@{name}@@'\naz_recovery_services_vault_name = '@@{azure_recovery_services_vault_name}@@'\naz_recovery_services_backup_policy_name = '@@{azure_recovery_services_backup_policy_name}@@'\n# endregion\n\n# region load Azure SDK libraries\nimport datetime\nfrom azure.common.credentials import ServicePrincipalCredentials\nfrom azure.mgmt.recoveryservicesbackup import RecoveryServicesBackupClient\nfrom azure.mgmt.recoveryservicesbackup.models import (AzureIaaSComputeVMProtectedItem, BackupRequestResource,\n                                                      IaasVMBackupRequest,\n                                                      IaasVMILRRegistrationRequest, IaasVMRestoreRequest,\n                                                      ILRRequestResource, JobStatus,\n                                                      OperationStatusValues, ProtectedItemResource, ProtectionState,\n                                                      RecoveryType,\n                                                      RestoreRequestResource,\n                                                      BackupManagementType)\n# endregion\n\n# region function - retrieve Azure credentials\ndef get_credentials():\n    subscription_id = az_subscription_id\n    credentials = ServicePrincipalCredentials(\n        client_id=az_client_id,\n        secret=az_secret,\n        tenant=az_tenant_id\n    )\n    return credentials, subscription_id\n# endregion\n\n# region function - Enable backup for Azure VM   \ndef enable_recovery_services_backup():\n    credentials, subscription_id = get_credentials()\n    backup_client = RecoveryServicesBackupClient(credentials, subscription_id)\n    \n    container_name = \"iaasvmcontainer;iaasvmcontainerv2;{};{}\".format(az_resource_group_name,az_vm_name)\n    fabric_name = \"Azure\"\n    protected_item_name = \"vm;iaasvmcontainerv2;{};{}\".format(az_resource_group_name,az_vm_name)\n    policy = backup_client.protection_policies.get(az_recovery_services_vault_name, az_resource_group_name, az_recovery_services_backup_policy_name)\n\n    response = backup_client.protection_containers.refresh(az_recovery_services_vault_name, az_resource_group_name, fabric_name, raw=True)\n\n    _get_operation_response(\n        response,\n        lambda operation_id: backup_client.protection_container_refresh_operation_results.get(\n            az_recovery_services_vault_name, az_resource_group_name, fabric_name, operation_id, raw=True,\n        ),\n        None,\n    )\n\n    iaasvm_odata_filter = \"backupManagementType eq '{}'\".format('AzureIaasVM')\n    protectable_items = backup_client.backup_protectable_items.list(az_recovery_services_vault_name, az_resource_group_name, filter=iaasvm_odata_filter, raw=True)\n\n    for protectable_item in protectable_items:\n        if protectable_item.name.lower() in container_name.lower():\n            desired_protectable_item = protectable_item.properties\n    \n    protected_item_resource = ProtectedItemResource(\n            properties=AzureIaaSComputeVMProtectedItem(policy_id=policy.id, source_resource_id=desired_protectable_item.virtual_machine_id)\n            )\n\n    response = backup_client.protected_items.create_or_update(\n            az_recovery_services_vault_name, az_resource_group_name, fabric_name, container_name, protected_item_name,\n            protected_item_resource, raw=True\n            )\n\n    job_response = _get_operation_response(\n        response,\n        lambda operation_id: backup_client.protected_item_operation_results.get(\n            az_recovery_services_vault_name, az_resource_group_name, fabric_name, container_name, protected_item_name, operation_id, raw=True,\n            ),\n        lambda operation_id: backup_client.protected_item_operation_statuses.get(\n            az_recovery_services_vault_name, az_resource_group_name, fabric_name, container_name, protected_item_name, operation_id,\n            ),\n        )\n\n    wait_for_job_completion(job_response.job_id)\n    \n    print('Backup enabled for {}'.format(az_vm_name))\n    exit(0)\n# endregion\n\n# region function - Helpers   \ndef _dummy_wait_and_return_true(timeout_in_sec):\n    sleep(timeout_in_sec)\n    return True\n\ndef wait_for_job_completion(job_id):\n    retry_action_with_timeout(\n        lambda: get_job_status(job_id),\n        lambda job_status: not is_job_in_progress(job_status),\n        3 * 60 * 60,  # 3 Hours\n        lambda status_code: _dummy_wait_and_return_true,\n        )\n\ndef get_job_status(job_id):\n    credentials, subscription_id = get_credentials()\n    backup_client = RecoveryServicesBackupClient(credentials, subscription_id)\n    \n    response = backup_client.job_details.get(az_recovery_services_vault_name, az_resource_group_name, job_id)\n    return response.properties.status\n\ndef is_job_in_progress(job_status):\n    in_progress = job_status in [JobStatus.in_progress.value, JobStatus.cancelling.value]\n    if in_progress:\n        sleep(60)\n    return in_progress\n\ndef time_in_sec():\n    return int(datetime.datetime.now().strftime(\"%s\"))\n\ndef retry_action_with_timeout(action, validator, timeout, should_retry):\n    end_time = time_in_sec() + timeout\n    result = None\n    validator_result = False if result is None else validator(result)\n\n    while time_in_sec() < end_time and not validator_result:\n        result = action()\n        validator_result = validator(result)\n\n    return result\n\ndef _get_operation_response(raw_response, get_operation_result_func, get_operation_status_func):\n    operation_id_url = raw_response.response.headers[\"Location\"]\n    operation_id = (operation_id_url.split('?'))[0].rsplit('/')[-1]\n    operation_response = get_operation_result_func(operation_id)\n\n    while operation_response.response.status_code == 202:\n        sleep(5)\n        operation_response = get_operation_result_func(operation_id)\n\n    if get_operation_status_func:\n        operation_status_response = get_operation_status_func(operation_id)\n        return operation_status_response.properties\n\n    return operation_response\n# endregion\n\n# region execute function \nenable_recovery_services_backup()\n# endregion\n"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "azure_enable_vmBackup",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "# region headers\n# * author:     jose.gomez@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       25/03/2020\n# task_name:    Azure_Enable_Backup\n# description:  Enable backup for an Azure VM\n# type:         Execute\n# input vars:   azure_subscription_id, azure_client_id, azure_tenant_id, azure_secret, azure_storage_account_name, az_recovery_services_vault_name, az_recovery_services_backup_policy_name\n# output vars:  none\n# endregion\n\n# region capture Calm variables\naz_subscription_id = '@@{azure_subscription_id}@@'\naz_client_id = '@@{azure_client_id}@@'\naz_tenant_id = '@@{azure_tenant_id}@@'\naz_secret = '@@{azure_secret}@@'\naz_resource_group_name = '@@{resource_group}@@'\naz_vm_name = '@@{name}@@'\naz_recovery_services_vault_name = '@@{azure_recovery_services_vault_name}@@'\naz_recovery_services_backup_policy_name = '@@{azure_recovery_services_backup_policy_name}@@'\n# endregion\n\n# region load Azure SDK libraries\nimport datetime\nfrom azure.common.credentials import ServicePrincipalCredentials\nfrom azure.mgmt.recoveryservicesbackup import RecoveryServicesBackupClient\nfrom azure.mgmt.recoveryservicesbackup.models import (AzureIaaSComputeVMProtectedItem, BackupRequestResource,\n                                                      IaasVMBackupRequest,\n                                                      IaasVMILRRegistrationRequest, IaasVMRestoreRequest,\n                                                      ILRRequestResource, JobStatus,\n                                                      OperationStatusValues, ProtectedItemResource, ProtectionState,\n                                                      RecoveryType,\n                                                      RestoreRequestResource,\n                                                      BackupManagementType)\n# endregion\n\n# region function - retrieve Azure credentials\ndef get_credentials():\n    subscription_id = az_subscription_id\n    credentials = ServicePrincipalCredentials(\n        client_id=az_client_id,\n        secret=az_secret,\n        tenant=az_tenant_id\n    )\n    return credentials, subscription_id\n# endregion\n\n# region function - Enable backup for Azure VM   \ndef enable_recovery_services_backup():\n    credentials, subscription_id = get_credentials()\n    backup_client = RecoveryServicesBackupClient(credentials, subscription_id)\n    \n    container_name = \"iaasvmcontainer;iaasvmcontainerv2;{};{}\".format(az_resource_group_name,az_vm_name)\n    fabric_name = \"Azure\"\n    protected_item_name = \"vm;iaasvmcontainerv2;{};{}\".format(az_resource_group_name,az_vm_name)\n    policy = backup_client.protection_policies.get(az_recovery_services_vault_name, az_resource_group_name, az_recovery_services_backup_policy_name)\n\n    response = backup_client.protection_containers.refresh(az_recovery_services_vault_name, az_resource_group_name, fabric_name, raw=True)\n\n    _get_operation_response(\n        response,\n        lambda operation_id: backup_client.protection_container_refresh_operation_results.get(\n            az_recovery_services_vault_name, az_resource_group_name, fabric_name, operation_id, raw=True,\n        ),\n        None,\n    )\n\n    iaasvm_odata_filter = \"backupManagementType eq '{}'\".format('AzureIaasVM')\n    protectable_items = backup_client.backup_protectable_items.list(az_recovery_services_vault_name, az_resource_group_name, filter=iaasvm_odata_filter, raw=True)\n\n    for protectable_item in protectable_items:\n        if protectable_item.name.lower() in container_name.lower():\n            desired_protectable_item = protectable_item.properties\n    \n    protected_item_resource = ProtectedItemResource(\n            properties=AzureIaaSComputeVMProtectedItem(policy_id=policy.id, source_resource_id=desired_protectable_item.virtual_machine_id)\n            )\n\n    response = backup_client.protected_items.create_or_update(\n            az_recovery_services_vault_name, az_resource_group_name, fabric_name, container_name, protected_item_name,\n            protected_item_resource, raw=True\n            )\n\n    job_response = _get_operation_response(\n        response,\n        lambda operation_id: backup_client.protected_item_operation_results.get(\n            az_recovery_services_vault_name, az_resource_group_name, fabric_name, container_name, protected_item_name, operation_id, raw=True,\n            ),\n        lambda operation_id: backup_client.protected_item_operation_statuses.get(\n            az_recovery_services_vault_name, az_resource_group_name, fabric_name, container_name, protected_item_name, operation_id,\n            ),\n        )\n\n    wait_for_job_completion(job_response.job_id)\n    \n    print('Backup enabled for {}'.format(az_vm_name))\n    exit(0)\n# endregion\n\n# region function - Helpers   \ndef _dummy_wait_and_return_true(timeout_in_sec):\n    sleep(timeout_in_sec)\n    return True\n\ndef wait_for_job_completion(job_id):\n    retry_action_with_timeout(\n        lambda: get_job_status(job_id),\n        lambda job_status: not is_job_in_progress(job_status),\n        3 * 60 * 60,  # 3 Hours\n        lambda status_code: _dummy_wait_and_return_true,\n        )\n\ndef get_job_status(job_id):\n    credentials, subscription_id = get_credentials()\n    backup_client = RecoveryServicesBackupClient(credentials, subscription_id)\n    \n    response = backup_client.job_details.get(az_recovery_services_vault_name, az_resource_group_name, job_id)\n    return response.properties.status\n\ndef is_job_in_progress(job_status):\n    in_progress = job_status in [JobStatus.in_progress.value, JobStatus.cancelling.value]\n    if in_progress:\n        sleep(60)\n    return in_progress\n\ndef time_in_sec():\n    return int(datetime.datetime.now().strftime(\"%s\"))\n\ndef retry_action_with_timeout(action, validator, timeout, should_retry):\n    end_time = time_in_sec() + timeout\n    result = None\n    validator_result = False if result is None else validator(result)\n\n    while time_in_sec() < end_time and not validator_result:\n        result = action()\n        validator_result = validator(result)\n\n    return result\n\ndef _get_operation_response(raw_response, get_operation_result_func, get_operation_status_func):\n    operation_id_url = raw_response.response.headers[\"Location\"]\n    operation_id = (operation_id_url.split('?'))[0].rsplit('/')[-1]\n    operation_response = get_operation_result_func(operation_id)\n\n    while operation_response.response.status_code == 202:\n        sleep(5)\n        operation_response = get_operation_result_func(operation_id)\n\n    if get_operation_status_func:\n        operation_status_response = get_operation_status_func(operation_id)\n        return operation_status_response.properties\n\n    return operation_response\n# endregion\n\n# region execute function \nenable_recovery_services_backup()\n# endregion\n",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150152572475",
    "kind": "app_task",
    "uuid": "abbe2deb-9b2e-4587-8f74-fb6a6343b8a0",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150152572475",
    "name": "azure_enable_vmBackup"
  }
}
