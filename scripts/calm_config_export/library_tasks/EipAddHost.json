{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "EipAddHost",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "#region headers\n# * authors:    igor.zecevic@nutanix.com\n# * date:       30/03/2020\n# task_name:    EipAddHost\n# description:  Create an IP/Host on EfficientIp\n# input vars:   eip_site_id, eip_public_subnet_id, eip_dns_zone\n#               vm_subnet_id, app_status, add_flag, ip_name_type, max_find\n# output vars:  vm_hostname, vm_ip\n#endregion\n\n#region capture Calm variables\nusername = \"@@{eip.username}@@\"\npassword = \"@@{eip.secret}@@\"\napi_server = \"@@{eip_endpoint}@@\"\nsite_id = \"@@{eip_site_id}@@\"\nvm_subnet_id = \"@@{vm_subnet_id}@@\"\ndns_zone = \"@@{eip_dns_zone}@@\"\napp_status = \"@@{app_status}@@\"\nhost_index = int('@@{calm_array_index}@@')\nadd_flag = \"new_only\" # flag used to track new ip creation only\nmax_find = \"1\" # search for 1 available address\nip_name_type = \"A\" # create a DNS record\n#endregion\n\n#region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n        if (r.status_code == 204):\n            print(\"Response: No Content here..\")\n            exit(1)\n    elif ((r.status_code == 400) and (json.loads(r.content)['errmsg']) == \"Address already exists\"):\n        print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n#endregion\n\n# region find next free address function\ndef efficient_ip_find_free_address(subnet_id, max_find=max_find):\n    api_server_port = \"443\"\n    api_server_endpoint = \"/rpc\"\n    method = \"GET\"\n    base_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\n    headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    # make the api call\n    url = \"{0}/ip_find_free_address?{1}={2}&{3}={4}\".format(base_url, \"subnet_id\", subnet_id, \"max_find\", max_find)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n    return resp\n# endregion\n\n# region add host function\ndef efficient_ip_add_host(host_ip, hostname_dns, site_id=site_id, add_flag=add_flag):\n    api_server_port = \"443\"\n    api_server_endpoint = \"/rest\"\n    method = \"POST\"\n    base_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\n    headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    # make the api call\n    url = \"{0}/ip_add?{1}={2}&{3}={4}&{5}={6}&{7}={8}&{9}={10}\".format(base_url, \"hostaddr\", host_ip, \"ip_name\", hostname_dns, \"ip_name_type\", ip_name_type, \"site_id\", site_id, \"add_flag\", add_flag)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n    return resp\n# endregion\n\n# region main processing\n# region prepare and reserve hostname\n# sleep count based on the replica level\nsleep_count = (host_index * 3)\nprint (\"Sleep for: \"+str(sleep_count)+\" seconds\")\nsleep(sleep_count)\nif (app_status == \"provisioning\"):\n    # use the calm_array variable @@{eip_host_list}@@ if provisionning the apps\n    hostname = @@{calm_array_eip_host_list}@@[host_index]\n    hostname_dns = hostname+\".\"+dns_zone\n    print(\"vm_hostname={}\".format(hostname))\nelif (app_status == \"running\"):\n    # use the service variable @@{eip_host_list}@@[0] if ScalingOut/Up the apps\n    hostname = @@{eip_host_list}@@[0]\n    hostname_dns = hostname+\".\"+dns_zone\n    print(\"vm_hostname={}\".format(hostname))\n# endregion\n\n# region create host/ip\ni = 0\nwhile True:\n    next_free_ip = efficient_ip_find_free_address(vm_subnet_id)\n    host_ip = json.loads(next_free_ip.content)[0]['hostaddr']\n    add_host = efficient_ip_add_host(host_ip, hostname_dns)\n    # if the address already exists, loop to find a new one\n    if ((add_host.status_code == 400) and (json.loads(add_host.content)['errmsg']) == \"Address already exists\"):\n        sleep_count = (host_index * 2)\n        print (\"Sleep for: \"+str(sleep_count)+\" seconds\")\n        sleep(sleep_count)\n        i = (i + 1)\n        if (i > 10):\n            print(\"Error: couldn't find any available address..\")\n            exit(1)\n    elif (add_host.status_code == 201):\n        print (\"vm_ip={}\".format(host_ip))\n        break\n# endregion\n# endregion\nexit(0)"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "EipAddHost",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "#region headers\n# * authors:    igor.zecevic@nutanix.com\n# * date:       30/03/2020\n# task_name:    EipAddHost\n# description:  Create an IP/Host on EfficientIp\n# input vars:   eip_site_id, eip_public_subnet_id, eip_dns_zone\n#               vm_subnet_id, app_status, add_flag, ip_name_type, max_find\n# output vars:  vm_hostname, vm_ip\n#endregion\n\n#region capture Calm variables\nusername = \"@@{eip.username}@@\"\npassword = \"@@{eip.secret}@@\"\napi_server = \"@@{eip_endpoint}@@\"\nsite_id = \"@@{eip_site_id}@@\"\nvm_subnet_id = \"@@{vm_subnet_id}@@\"\ndns_zone = \"@@{eip_dns_zone}@@\"\napp_status = \"@@{app_status}@@\"\nhost_index = int('@@{calm_array_index}@@')\nadd_flag = \"new_only\" # flag used to track new ip creation only\nmax_find = \"1\" # search for 1 available address\nip_name_type = \"A\" # create a DNS record\n#endregion\n\n#region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n        if (r.status_code == 204):\n            print(\"Response: No Content here..\")\n            exit(1)\n    elif ((r.status_code == 400) and (json.loads(r.content)['errmsg']) == \"Address already exists\"):\n        print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n#endregion\n\n# region find next free address function\ndef efficient_ip_find_free_address(subnet_id, max_find=max_find):\n    api_server_port = \"443\"\n    api_server_endpoint = \"/rpc\"\n    method = \"GET\"\n    base_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\n    headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    # make the api call\n    url = \"{0}/ip_find_free_address?{1}={2}&{3}={4}\".format(base_url, \"subnet_id\", subnet_id, \"max_find\", max_find)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n    return resp\n# endregion\n\n# region add host function\ndef efficient_ip_add_host(host_ip, hostname_dns, site_id=site_id, add_flag=add_flag):\n    api_server_port = \"443\"\n    api_server_endpoint = \"/rest\"\n    method = \"POST\"\n    base_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\n    headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    # make the api call\n    url = \"{0}/ip_add?{1}={2}&{3}={4}&{5}={6}&{7}={8}&{9}={10}\".format(base_url, \"hostaddr\", host_ip, \"ip_name\", hostname_dns, \"ip_name_type\", ip_name_type, \"site_id\", site_id, \"add_flag\", add_flag)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n    return resp\n# endregion\n\n# region main processing\n# region prepare and reserve hostname\n# sleep count based on the replica level\nsleep_count = (host_index * 3)\nprint (\"Sleep for: \"+str(sleep_count)+\" seconds\")\nsleep(sleep_count)\nif (app_status == \"provisioning\"):\n    # use the calm_array variable @@{eip_host_list}@@ if provisionning the apps\n    hostname = @@{calm_array_eip_host_list}@@[host_index]\n    hostname_dns = hostname+\".\"+dns_zone\n    print(\"vm_hostname={}\".format(hostname))\nelif (app_status == \"running\"):\n    # use the service variable @@{eip_host_list}@@[0] if ScalingOut/Up the apps\n    hostname = @@{eip_host_list}@@[0]\n    hostname_dns = hostname+\".\"+dns_zone\n    print(\"vm_hostname={}\".format(hostname))\n# endregion\n\n# region create host/ip\ni = 0\nwhile True:\n    next_free_ip = efficient_ip_find_free_address(vm_subnet_id)\n    host_ip = json.loads(next_free_ip.content)[0]['hostaddr']\n    add_host = efficient_ip_add_host(host_ip, hostname_dns)\n    # if the address already exists, loop to find a new one\n    if ((add_host.status_code == 400) and (json.loads(add_host.content)['errmsg']) == \"Address already exists\"):\n        sleep_count = (host_index * 2)\n        print (\"Sleep for: \"+str(sleep_count)+\" seconds\")\n        sleep(sleep_count)\n        i = (i + 1)\n        if (i > 10):\n            print(\"Error: couldn't find any available address..\")\n            exit(1)\n    elif (add_host.status_code == 201):\n        print (\"vm_ip={}\".format(host_ip))\n        break\n# endregion\n# endregion\nexit(0)",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150189993161",
    "kind": "app_task",
    "uuid": "e622d64d-7bf0-40dc-8634-69e29c19e940",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150189993161",
    "name": "EipAddHost"
  }
}
