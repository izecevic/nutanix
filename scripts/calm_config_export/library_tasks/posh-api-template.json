{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "posh-api-template",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "npsscript",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "# region DELETE ME AFTER READING\n# ! Meant to be edited in VSCode w/ the BetterComments extension installed\n# * Conventions:\n# * Aiming for the the following standards:\n# * https://github.com/PoshCode/PowerShellPracticeAndStyle\n# * Otherwise use PEP8 when in doubt (https://pep8.org/)\n# 1. use all lower case for variable names.\n# 2. when composing variable names, use underscore to separate words. \n#    Exp: username_secret. Use this same convention in Calm.\n# 3. name sections with comments, comment line after the code.\n# 4. don't print secrets, including tokens. Favor authentication \n#    (login/logout) in each script.\n# 5. when saving your script, name it as the task name appears in Calm,\n#    using the following convention: NameOfIntegrationPointAPIendpointMethod.ps1\n# 6. use double quotes first, then single quotes.\n# 7. Try your best and keep line length under 80 characters, even though\n#    it makes your eyes bleed.\n# endregion\n\n# region headers\n# posh-api-template v20190604 / stephane.bourdeaud@nutanix.com\n# TODO Fill in this section with your information\n# author:       <your email address here>\n# version:      <date / notes>\n# task_name:    <enter the name of the task as it appears in your bp>\n# description:  \n# endregion\n\n#region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced \n# * anywhere else in order to improve maintainability.\n$username = '@@{credname.username}@@'\n$username_secret = \"@@{credname.secret}@@\"\n$api_server = \"@@{endpoint_ip}@@\"\n#endregion\n\n#region prepare api call\n$api_server_port = \"443\"\n$api_server_endpoint = \"/apis/batch/v1/\"\n$url = \"https://{0}:{1}{2}\" -f $api_server,$api_server_port, `\n    $api_server_endpoint\n$method = \"POST\"\n$headers = @{\n    \"Authorization\" = \"Basic \"+[System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($username+\":\"+$username_secret));\n    \"Content-Type\"=\"application/json\";\n    \"Accept\"=\"application/json\"\n}\n\n\n# this is used to capture the content of the payload\n$content = @{\n    property1=\"value\";\n    property2=@{\n        property21=\"value\";\n        property22=\"value\"\n    };\n    property3=\"value\"\n}\n$payload = (ConvertTo-Json $content -Depth 4)\n\n    \n# ignore SSL warnings\nWrite-Host \"$(Get-Date) [INFO] Ignoring invalid certificates\"\nif (-not ([System.Management.Automation.PSTypeName]'ServerCertificateValidationCallback').Type) {\n    $certCallback = @\"\n    using System;\n    using System.Net;\n    using System.Net.Security;\n    using System.Security.Cryptography.X509Certificates;\n    public class ServerCertificateValidationCallback\n    {\n        public static void Ignore()\n        {\n            if(ServicePointManager.ServerCertificateValidationCallback ==null)\n            {\n                ServicePointManager.ServerCertificateValidationCallback += \n                    delegate\n                    (\n                        Object obj, \n                        X509Certificate certificate, \n                        X509Chain chain, \n                        SslPolicyErrors errors\n                    )\n                    {\n                        return true;\n                    };\n            }\n        }\n    }\n\"@\n    Add-Type $certCallback\n}\n[ServerCertificateValidationCallback]::Ignore()\n\n\n# add Tls12 support\nWrite-Host \"$(Get-Date) [INFO] Adding Tls12 support\"\n[Net.ServicePointManager]::SecurityProtocol = `\n    ([Net.ServicePointManager]::SecurityProtocol -bor `\n    [Net.SecurityProtocolType]::Tls12)\n#endregion\n\n#region make api call\ntry {\n    Write-Host \"$(Get-Date) [INFO] Making a $method call to $url\"\n    $resp = Invoke-RestMethod -Method $method -Uri $url -Headers $headers `\n        -Body $payload -ErrorAction Stop\n    Write-Host \"$(Get-Date) [INFO] Response Metadata: $($resp.metadata `\n        | ConvertTo-Json)\"\n    # response data will be an array in $resp.entities\n    Write-Host \"$(Get-Date) [INFO] Showing entities in response:\"\n    ForEach ($entity in $resp.entities) {\n        $entity | Format-List #expose the data structure of entities\n    }\n}\ncatch {\n    $saved_error = $_.Exception.Message\n    # Write-Host \"$(Get-Date) [INFO] Headers: $($headers | ConvertTo-Json)\"\n    Write-Host \"$(Get-Date) [INFO] Payload: $payload\"\n    Throw \"$(get-date) [ERROR] $saved_error\"\n}\nfinally {\n    #add any last words here; this gets processed no matter what\n    Write-Host \"$(Get-Date) [INFO] Response variable structure:\"\n    $resp | Format-List\n}\n#endregion"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "posh-api-template",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "# region DELETE ME AFTER READING\n# ! Meant to be edited in VSCode w/ the BetterComments extension installed\n# * Conventions:\n# * Aiming for the the following standards:\n# * https://github.com/PoshCode/PowerShellPracticeAndStyle\n# * Otherwise use PEP8 when in doubt (https://pep8.org/)\n# 1. use all lower case for variable names.\n# 2. when composing variable names, use underscore to separate words. \n#    Exp: username_secret. Use this same convention in Calm.\n# 3. name sections with comments, comment line after the code.\n# 4. don't print secrets, including tokens. Favor authentication \n#    (login/logout) in each script.\n# 5. when saving your script, name it as the task name appears in Calm,\n#    using the following convention: NameOfIntegrationPointAPIendpointMethod.ps1\n# 6. use double quotes first, then single quotes.\n# 7. Try your best and keep line length under 80 characters, even though\n#    it makes your eyes bleed.\n# endregion\n\n# region headers\n# posh-api-template v20190604 / stephane.bourdeaud@nutanix.com\n# TODO Fill in this section with your information\n# author:       <your email address here>\n# version:      <date / notes>\n# task_name:    <enter the name of the task as it appears in your bp>\n# description:  \n# endregion\n\n#region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced \n# * anywhere else in order to improve maintainability.\n$username = '@@{credname.username}@@'\n$username_secret = \"@@{credname.secret}@@\"\n$api_server = \"@@{endpoint_ip}@@\"\n#endregion\n\n#region prepare api call\n$api_server_port = \"443\"\n$api_server_endpoint = \"/apis/batch/v1/\"\n$url = \"https://{0}:{1}{2}\" -f $api_server,$api_server_port, `\n    $api_server_endpoint\n$method = \"POST\"\n$headers = @{\n    \"Authorization\" = \"Basic \"+[System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($username+\":\"+$username_secret));\n    \"Content-Type\"=\"application/json\";\n    \"Accept\"=\"application/json\"\n}\n\n\n# this is used to capture the content of the payload\n$content = @{\n    property1=\"value\";\n    property2=@{\n        property21=\"value\";\n        property22=\"value\"\n    };\n    property3=\"value\"\n}\n$payload = (ConvertTo-Json $content -Depth 4)\n\n    \n# ignore SSL warnings\nWrite-Host \"$(Get-Date) [INFO] Ignoring invalid certificates\"\nif (-not ([System.Management.Automation.PSTypeName]'ServerCertificateValidationCallback').Type) {\n    $certCallback = @\"\n    using System;\n    using System.Net;\n    using System.Net.Security;\n    using System.Security.Cryptography.X509Certificates;\n    public class ServerCertificateValidationCallback\n    {\n        public static void Ignore()\n        {\n            if(ServicePointManager.ServerCertificateValidationCallback ==null)\n            {\n                ServicePointManager.ServerCertificateValidationCallback += \n                    delegate\n                    (\n                        Object obj, \n                        X509Certificate certificate, \n                        X509Chain chain, \n                        SslPolicyErrors errors\n                    )\n                    {\n                        return true;\n                    };\n            }\n        }\n    }\n\"@\n    Add-Type $certCallback\n}\n[ServerCertificateValidationCallback]::Ignore()\n\n\n# add Tls12 support\nWrite-Host \"$(Get-Date) [INFO] Adding Tls12 support\"\n[Net.ServicePointManager]::SecurityProtocol = `\n    ([Net.ServicePointManager]::SecurityProtocol -bor `\n    [Net.SecurityProtocolType]::Tls12)\n#endregion\n\n#region make api call\ntry {\n    Write-Host \"$(Get-Date) [INFO] Making a $method call to $url\"\n    $resp = Invoke-RestMethod -Method $method -Uri $url -Headers $headers `\n        -Body $payload -ErrorAction Stop\n    Write-Host \"$(Get-Date) [INFO] Response Metadata: $($resp.metadata `\n        | ConvertTo-Json)\"\n    # response data will be an array in $resp.entities\n    Write-Host \"$(Get-Date) [INFO] Showing entities in response:\"\n    ForEach ($entity in $resp.entities) {\n        $entity | Format-List #expose the data structure of entities\n    }\n}\ncatch {\n    $saved_error = $_.Exception.Message\n    # Write-Host \"$(Get-Date) [INFO] Headers: $($headers | ConvertTo-Json)\"\n    Write-Host \"$(Get-Date) [INFO] Payload: $payload\"\n    Throw \"$(get-date) [ERROR] $saved_error\"\n}\nfinally {\n    #add any last words here; this gets processed no matter what\n    Write-Host \"$(Get-Date) [INFO] Response variable structure:\"\n    $resp | Format-List\n}\n#endregion",
        "script_type": "npsscript"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150289084171",
    "kind": "app_task",
    "uuid": "012aec17-bb56-4ba2-ac86-d7c840af7b2a",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150289084171",
    "name": "posh-api-template"
  }
}
