{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "Etcd_Install_and_Configure",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "#!/bin/bash\nset -ex\n\n# - * - Section 1 <---------- Just a representation of section, Don't use in actual script ---------->\nETCD_VERSION=\"v3.3.15\"\nINTERNAL_IP=\"@@{address}@@\"\nETCD_IPS=\"@@{all_master_ip_address}@@\"\n# Fetch Private key to push certs to other nodes in case of SSL_ON=yes\nPRIVATE_KEY=\"@@{CENTOS.secret}@@\"\nNODE_NAME=\"etcd@@{calm_array_index}@@\"\nCREATE_VOLUME=\"@@{CREATE_VOLUME}@@\"\nSSL_ON=\"@@{SSL_ON}@@\"\nETCD_CERT_PATH=\"/etc/ssl/certs/etcd\"\nETCD_DATA_DIR=\"/var/lib/etcd\"\nETCD_SERVER_PORT=2379\nETCD_CLIENT_PORT=2380\nHTTP_METHOD=\"http\"\n\nCREATE_VOLUME=\"${CREATE_VOLUME:-no}\"\nSSL_ON=\"${SSL_ON:-no}\"\n\n# - * - Section 2 <---------- Just a representation of section, Don't use in actual script ---------->\n# Download cfssl to generate self-signed certificates for secured etcd peer-peer communication.\n# Download and install etcd\n\nif [ \"${SSL_ON}\" == \"yes\" ]; then\n    echo \"INFO: Downloading cfssl & cfssljson for creating certs.\"\n    HTTP_METHOD=\"https\"\n    curl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n    curl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n    chmod +x cfssl_linux-amd64 cfssljson_linux-amd64\n    sudo mv cfssl_linux-amd64 /usr/local/bin/cfssl\n    sudo mv cfssljson_linux-amd64 /usr/local/bin/cfssljson\nfi\n\necho \"INFO: Downloading ETCD tar ball.\"\ncurl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error \"https://github.com/coreos/etcd/releases/download/${ETCD_VERSION}/etcd-${ETCD_VERSION}-linux-amd64.tar.gz\"\ntar -xvf etcd-${ETCD_VERSION}-linux-amd64.tar.gz\nsudo mv etcd-${ETCD_VERSION}-linux-amd64/etcd* /usr/bin/\nrm -rf etcd-${ETCD_VERSION}-linux-amd64*\n\n# - * - Section 3 <---------- Just a representation of section, Don't use in actual script ---------->\n# Create etcd_lvm lvm and mount to ${ETCD_DATA_DIR}.\n# Create etcd system service.\n# Generate etcd ca certs.\n# Generate Server certs for 1st Etcd nodes.\n# Generate Peer certs for remaining Etcd nodes.\n# Generate Client certs for kubernetes master nodes.\n\nsudo mkdir -p /opt/kube-ssl ${ETCD_CERT_PATH} ${ETCD_DATA_DIR}\n\ncount=0\nfor ip in $(echo \"${ETCD_IPS}\" | tr \",\" \"\\n\"); do\n  CON+=\"etcd${count}=${HTTP_METHOD}://${ip}:${ETCD_CLIENT_PORT}\",\n  count=$((count+1))\ndone\nETCD_ALL_CONTROLLERS=$(echo $CON | sed  's/,$//')\n\necho \"INFO: Configuring ETCD service.\"\necho \"[Unit]\nDescription=etcd\nDocumentation=https://github.com/coreos\n\n[Service]\nExecStart=/usr/bin/etcd \\\\\n  --name ${NODE_NAME} \\\\\n  --initial-advertise-peer-urls ${HTTP_METHOD}://${INTERNAL_IP}:${ETCD_CLIENT_PORT} \\\\\n  --listen-peer-urls ${HTTP_METHOD}://${INTERNAL_IP}:${ETCD_CLIENT_PORT} \\\\\n  --listen-client-urls ${HTTP_METHOD}://${INTERNAL_IP}:${ETCD_SERVER_PORT},${HTTP_METHOD}://127.0.0.1:${ETCD_SERVER_PORT} \\\\\n  --advertise-client-urls ${HTTP_METHOD}://${INTERNAL_IP}:${ETCD_SERVER_PORT} \\\\\n  --initial-cluster-token etcd-cluster-0 \\\\\n  --initial-cluster ${ETCD_ALL_CONTROLLERS} \\\\\n  --initial-cluster-state new \\\\\n  --data-dir=/var/lib/etcd \\\\\n  --wal-dir=/var/lib/etcd/wal \\\\\n  --max-wals=10\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\" | sudo tee /etc/systemd/system/etcd.service\n\necho \"if \\$programname == 'etcd' then /var/log/etcd.log\n& stop\" | sudo tee /etc/rsyslog.d/etcd.conf\n\nif [ \"${SSL_ON}\" == \"yes\" ]; then\n  sudo mkdir -p /etc/systemd/system/etcd.service.d\n  echo \"[Service]\nEnvironment=ETCD_CERT_FILE=${ETCD_CERT_PATH}/etcd-server.pem\nEnvironment=ETCD_KEY_FILE=${ETCD_CERT_PATH}/etcd-server-key.pem\nEnvironment=ETCD_PEER_CERT_FILE=${ETCD_CERT_PATH}/etcd-peer.pem\nEnvironment=ETCD_PEER_KEY_FILE=${ETCD_CERT_PATH}/etcd-peer-key.pem\nEnvironment=ETCD_TRUSTED_CA_FILE=${ETCD_CERT_PATH}/etcd-ca.pem\nEnvironment=ETCD_PEER_TRUSTED_CA_FILE=${ETCD_CERT_PATH}/etcd-ca.pem\nEnvironment=ETCD_PEER_CLIENT_CERT_AUTH=true\nEnvironment=ETCD_CLIENT_CERT_AUTH=true\" | sudo tee /etc/systemd/system/etcd.service.d/override.conf\nfi\n\nif [ \"${CREATE_VOLUME}\" == \"yes\" ]; then\n    echo \"INFO: Configuring ETCD data volume.\"\n    sudo yum install -y lvm2 --quiet\n    sudo pvcreate /dev/sd{b,c,d}\n    sudo vgcreate etcd /dev/sd{b,c,d}\n    sleep 3\n    sudo lvcreate -l 100%VG -n etcd_lvm etcd\n    sudo mkfs.xfs /dev/etcd/etcd_lvm\n    echo -e \"/dev/etcd/etcd_lvm \\t ${ETCD_DATA_DIR} \\t xfs \\t defaults \\t 0 0\" | sudo tee -a /etc/fstab\n    sudo mount -a\nfi\n\nif [ @@{calm_array_index}@@ -eq 0 ] && [ \"${SSL_ON}\" == \"yes\" ];then\n  echo \"INFO: Creating & Configuring ETCD ssl certs.\"\n  sudo chown -R $USER:$USER /opt/kube-ssl && cd /opt/kube-ssl\n  echo '{\n    \"signing\": {\n      \"default\": {\n        \"expiry\": \"8760h\"\n      },\n      \"profiles\": {\n        \"server\": {\n          \"expiry\": \"8760h\",\n          \"usages\": [ \"signing\", \"key encipherment\", \"server auth\", \"client auth\" ]\n        },\n        \"client\": {\n          \"expiry\": \"8760h\",\n          \"usages\": [ \"key encipherment\", \"client auth\" ]\n        },\n        \"client-server\": {\n          \"expiry\": \"8760h\",\n          \"usages\": [ \"key encipherment\", \"server auth\", \"client auth\" ]\n        }\n      }\n    }\n  }' | tee ca-config.json\n\n  echo '{\n    \"CN\": \"etcd-ca\",\n    \"key\": {\n      \"algo\": \"rsa\",\n      \"size\": 2048\n    },\n    \"names\": [\n      {\n        \"C\": \"US\",\n        \"L\": \"San Jose\",\n        \"O\": \"etcd\",\n        \"OU\": \"CA\",\n        \"ST\": \"California\"\n      }\n    ]\n  }' | tee etcd-ca-csr.json\n\n  cfssl gencert -initca etcd-ca-csr.json | cfssljson -bare etcd-ca\n\n  echo '{\n    \"CN\": \"etcd\",\n    \"hosts\": [],\n    \"key\": {\n      \"algo\": \"rsa\",\n      \"size\": 2048\n    },\n    \"names\": [\n      {\n        \"C\": \"US\",\n        \"L\": \"San Jose\",\n        \"O\": \"etcd\",\n        \"OU\": \"CA\",\n        \"ST\": \"California\"\n      }\n    ]\n  }' | tee etcd-csr.json\n\n  cfssl gencert -ca=etcd-ca.pem -ca-key=etcd-ca-key.pem -config=ca-config.json -hostname=${ETCD_IPS} -profile=server etcd-csr.json | cfssljson -bare etcd-server\n  cfssl gencert -ca=etcd-ca.pem -ca-key=etcd-ca-key.pem -config=ca-config.json -hostname=${ETCD_IPS} -profile=client-server etcd-csr.json | cfssljson -bare etcd-peer\n  cfssl gencert -ca=etcd-ca.pem -ca-key=etcd-ca-key.pem -config=ca-config.json -hostname=${ETCD_IPS} -profile=client etcd-csr.json | cfssljson -bare etcd-client\n\n  echo \"${PRIVATE_KEY}\" | tee ~/.ssh/id_rsa\n  chmod 600 ~/.ssh/id_rsa\n  echo \"INFO: Copying ssl certs to other nodes.\"\n  for ip in $(echo ${ETCD_IPS} | tr \",\" \"\\n\"); do\n    scp -o stricthostkeychecking=no etcd*.pem ${ip}:\n  done\nfi\n\nif [ \"${SSL_ON}\" == \"yes\" ]; then\n    cd $HOME\n    while [ ! -f etcd-ca.pem ]; do echo \"waiting for ETCD certs.\" && sleep 5; done\n    sudo mv etcd-*.pem ${ETCD_CERT_PATH}/\nfi\nsudo systemctl start etcd"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "Etcd_Install_and_Configure",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "#!/bin/bash\nset -ex\n\n# - * - Section 1 <---------- Just a representation of section, Don't use in actual script ---------->\nETCD_VERSION=\"v3.3.15\"\nINTERNAL_IP=\"@@{address}@@\"\nETCD_IPS=\"@@{all_master_ip_address}@@\"\n# Fetch Private key to push certs to other nodes in case of SSL_ON=yes\nPRIVATE_KEY=\"@@{CENTOS.secret}@@\"\nNODE_NAME=\"etcd@@{calm_array_index}@@\"\nCREATE_VOLUME=\"@@{CREATE_VOLUME}@@\"\nSSL_ON=\"@@{SSL_ON}@@\"\nETCD_CERT_PATH=\"/etc/ssl/certs/etcd\"\nETCD_DATA_DIR=\"/var/lib/etcd\"\nETCD_SERVER_PORT=2379\nETCD_CLIENT_PORT=2380\nHTTP_METHOD=\"http\"\n\nCREATE_VOLUME=\"${CREATE_VOLUME:-no}\"\nSSL_ON=\"${SSL_ON:-no}\"\n\n# - * - Section 2 <---------- Just a representation of section, Don't use in actual script ---------->\n# Download cfssl to generate self-signed certificates for secured etcd peer-peer communication.\n# Download and install etcd\n\nif [ \"${SSL_ON}\" == \"yes\" ]; then\n    echo \"INFO: Downloading cfssl & cfssljson for creating certs.\"\n    HTTP_METHOD=\"https\"\n    curl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n    curl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n    chmod +x cfssl_linux-amd64 cfssljson_linux-amd64\n    sudo mv cfssl_linux-amd64 /usr/local/bin/cfssl\n    sudo mv cfssljson_linux-amd64 /usr/local/bin/cfssljson\nfi\n\necho \"INFO: Downloading ETCD tar ball.\"\ncurl -C - -L -O --retry 6 --retry-max-time 60 --retry-delay 60 --silent --show-error \"https://github.com/coreos/etcd/releases/download/${ETCD_VERSION}/etcd-${ETCD_VERSION}-linux-amd64.tar.gz\"\ntar -xvf etcd-${ETCD_VERSION}-linux-amd64.tar.gz\nsudo mv etcd-${ETCD_VERSION}-linux-amd64/etcd* /usr/bin/\nrm -rf etcd-${ETCD_VERSION}-linux-amd64*\n\n# - * - Section 3 <---------- Just a representation of section, Don't use in actual script ---------->\n# Create etcd_lvm lvm and mount to ${ETCD_DATA_DIR}.\n# Create etcd system service.\n# Generate etcd ca certs.\n# Generate Server certs for 1st Etcd nodes.\n# Generate Peer certs for remaining Etcd nodes.\n# Generate Client certs for kubernetes master nodes.\n\nsudo mkdir -p /opt/kube-ssl ${ETCD_CERT_PATH} ${ETCD_DATA_DIR}\n\ncount=0\nfor ip in $(echo \"${ETCD_IPS}\" | tr \",\" \"\\n\"); do\n  CON+=\"etcd${count}=${HTTP_METHOD}://${ip}:${ETCD_CLIENT_PORT}\",\n  count=$((count+1))\ndone\nETCD_ALL_CONTROLLERS=$(echo $CON | sed  's/,$//')\n\necho \"INFO: Configuring ETCD service.\"\necho \"[Unit]\nDescription=etcd\nDocumentation=https://github.com/coreos\n\n[Service]\nExecStart=/usr/bin/etcd \\\\\n  --name ${NODE_NAME} \\\\\n  --initial-advertise-peer-urls ${HTTP_METHOD}://${INTERNAL_IP}:${ETCD_CLIENT_PORT} \\\\\n  --listen-peer-urls ${HTTP_METHOD}://${INTERNAL_IP}:${ETCD_CLIENT_PORT} \\\\\n  --listen-client-urls ${HTTP_METHOD}://${INTERNAL_IP}:${ETCD_SERVER_PORT},${HTTP_METHOD}://127.0.0.1:${ETCD_SERVER_PORT} \\\\\n  --advertise-client-urls ${HTTP_METHOD}://${INTERNAL_IP}:${ETCD_SERVER_PORT} \\\\\n  --initial-cluster-token etcd-cluster-0 \\\\\n  --initial-cluster ${ETCD_ALL_CONTROLLERS} \\\\\n  --initial-cluster-state new \\\\\n  --data-dir=/var/lib/etcd \\\\\n  --wal-dir=/var/lib/etcd/wal \\\\\n  --max-wals=10\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\" | sudo tee /etc/systemd/system/etcd.service\n\necho \"if \\$programname == 'etcd' then /var/log/etcd.log\n& stop\" | sudo tee /etc/rsyslog.d/etcd.conf\n\nif [ \"${SSL_ON}\" == \"yes\" ]; then\n  sudo mkdir -p /etc/systemd/system/etcd.service.d\n  echo \"[Service]\nEnvironment=ETCD_CERT_FILE=${ETCD_CERT_PATH}/etcd-server.pem\nEnvironment=ETCD_KEY_FILE=${ETCD_CERT_PATH}/etcd-server-key.pem\nEnvironment=ETCD_PEER_CERT_FILE=${ETCD_CERT_PATH}/etcd-peer.pem\nEnvironment=ETCD_PEER_KEY_FILE=${ETCD_CERT_PATH}/etcd-peer-key.pem\nEnvironment=ETCD_TRUSTED_CA_FILE=${ETCD_CERT_PATH}/etcd-ca.pem\nEnvironment=ETCD_PEER_TRUSTED_CA_FILE=${ETCD_CERT_PATH}/etcd-ca.pem\nEnvironment=ETCD_PEER_CLIENT_CERT_AUTH=true\nEnvironment=ETCD_CLIENT_CERT_AUTH=true\" | sudo tee /etc/systemd/system/etcd.service.d/override.conf\nfi\n\nif [ \"${CREATE_VOLUME}\" == \"yes\" ]; then\n    echo \"INFO: Configuring ETCD data volume.\"\n    sudo yum install -y lvm2 --quiet\n    sudo pvcreate /dev/sd{b,c,d}\n    sudo vgcreate etcd /dev/sd{b,c,d}\n    sleep 3\n    sudo lvcreate -l 100%VG -n etcd_lvm etcd\n    sudo mkfs.xfs /dev/etcd/etcd_lvm\n    echo -e \"/dev/etcd/etcd_lvm \\t ${ETCD_DATA_DIR} \\t xfs \\t defaults \\t 0 0\" | sudo tee -a /etc/fstab\n    sudo mount -a\nfi\n\nif [ @@{calm_array_index}@@ -eq 0 ] && [ \"${SSL_ON}\" == \"yes\" ];then\n  echo \"INFO: Creating & Configuring ETCD ssl certs.\"\n  sudo chown -R $USER:$USER /opt/kube-ssl && cd /opt/kube-ssl\n  echo '{\n    \"signing\": {\n      \"default\": {\n        \"expiry\": \"8760h\"\n      },\n      \"profiles\": {\n        \"server\": {\n          \"expiry\": \"8760h\",\n          \"usages\": [ \"signing\", \"key encipherment\", \"server auth\", \"client auth\" ]\n        },\n        \"client\": {\n          \"expiry\": \"8760h\",\n          \"usages\": [ \"key encipherment\", \"client auth\" ]\n        },\n        \"client-server\": {\n          \"expiry\": \"8760h\",\n          \"usages\": [ \"key encipherment\", \"server auth\", \"client auth\" ]\n        }\n      }\n    }\n  }' | tee ca-config.json\n\n  echo '{\n    \"CN\": \"etcd-ca\",\n    \"key\": {\n      \"algo\": \"rsa\",\n      \"size\": 2048\n    },\n    \"names\": [\n      {\n        \"C\": \"US\",\n        \"L\": \"San Jose\",\n        \"O\": \"etcd\",\n        \"OU\": \"CA\",\n        \"ST\": \"California\"\n      }\n    ]\n  }' | tee etcd-ca-csr.json\n\n  cfssl gencert -initca etcd-ca-csr.json | cfssljson -bare etcd-ca\n\n  echo '{\n    \"CN\": \"etcd\",\n    \"hosts\": [],\n    \"key\": {\n      \"algo\": \"rsa\",\n      \"size\": 2048\n    },\n    \"names\": [\n      {\n        \"C\": \"US\",\n        \"L\": \"San Jose\",\n        \"O\": \"etcd\",\n        \"OU\": \"CA\",\n        \"ST\": \"California\"\n      }\n    ]\n  }' | tee etcd-csr.json\n\n  cfssl gencert -ca=etcd-ca.pem -ca-key=etcd-ca-key.pem -config=ca-config.json -hostname=${ETCD_IPS} -profile=server etcd-csr.json | cfssljson -bare etcd-server\n  cfssl gencert -ca=etcd-ca.pem -ca-key=etcd-ca-key.pem -config=ca-config.json -hostname=${ETCD_IPS} -profile=client-server etcd-csr.json | cfssljson -bare etcd-peer\n  cfssl gencert -ca=etcd-ca.pem -ca-key=etcd-ca-key.pem -config=ca-config.json -hostname=${ETCD_IPS} -profile=client etcd-csr.json | cfssljson -bare etcd-client\n\n  echo \"${PRIVATE_KEY}\" | tee ~/.ssh/id_rsa\n  chmod 600 ~/.ssh/id_rsa\n  echo \"INFO: Copying ssl certs to other nodes.\"\n  for ip in $(echo ${ETCD_IPS} | tr \",\" \"\\n\"); do\n    scp -o stricthostkeychecking=no etcd*.pem ${ip}:\n  done\nfi\n\nif [ \"${SSL_ON}\" == \"yes\" ]; then\n    cd $HOME\n    while [ ! -f etcd-ca.pem ]; do echo \"waiting for ETCD certs.\" && sleep 5; done\n    sudo mv etcd-*.pem ${ETCD_CERT_PATH}/\nfi\nsudo systemctl start etcd",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150013350424",
    "kind": "app_task",
    "uuid": "2ceed672-d859-47e6-96ae-899b91a82e69",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150013350424",
    "name": "Etcd_Install_and_Configure"
  }
}
