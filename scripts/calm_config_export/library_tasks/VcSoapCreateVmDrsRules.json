{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "VcSoapCreateVmDrsRules",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "# region headers\n# * author:     igor.zecevic@nutanix.com, stephane.bourdeaud@nutanix.com\n# * version:    v1.0 - initial version (igor)\n# *             v1.1 - added login/logout (stephane)\n# * date:       17/03/2020\n# task_name:    VcSoapCreateVmDrsRules\n# description:  Create a ClusterAntiAffinity Rules (Separate VMs)\n#               The rules creation requires at least 2 VMs\n# input vars:   vc_cookie, api_server, cluster_id, vms_id\n#               drs_rule_name, drs_operation,\n# output vars:  none\n# endregion\n\n# region dealing with Scaling In/Out the application\n# this script will be executed only on the second Service/Instance\n# (ie: Service[1])\nif \"@@{calm_array_index}@@\" != \"1\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\ncluster_id = \"@@{vc_cluster_id}@@\" #retreived from VcGSoapetObjects\ndrs_rule_name = \"@@{calm_application_name}@@\"\ndrs_operation = \"add\" #add / edit / remove\napi_server = \"@@{vc_endpoint}@@\"\nvms_id = \"@@{calm_array_vc_vm_id}@@\"\n# endregion\n\n#region API call function\ndef process_request(url, method, headers, payload):\n    r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status Code: {}\".format(r))\n    else:\n        print(\"Request failed\")\n        print(\"Status Code: {}\".format(r))\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(payload))\n        print(\"Response: {}\".format(r.text))\n        resp_parse = ET.fromstring(r.text)\n        for element in resp_parse.iter('*'):\n          if \"faultstring\" in element.tag:\n            print(\"\")\n            print(\"Error: {}\".format(element.text))\n            break\n        exit(1)\n    return r\n#endregion\n\n#region login\n#region prepare login API call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml'}\n#endregion\n\n#region login API call\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Login>\n         <_this type=\"SessionManager\">SessionManager</_this>\n         <userName>'''+username+'''</userName>\n         <password>'''+password+'''</password>\n      </Login>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# pass the cookie in vc_soap_session so that it may be captured by Calm.\nvc_cookie = resp.headers.get('Set-Cookie').replace('\"','').split(\";\")[0]\n#endregion\n#endregion\n\n#region main processing\n# region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n# endregion\n\n# region create the drs rules\npayload ='''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> \n  <soapenv:Body> \n    <ReconfigureComputeResource_Task>  \n      <_this type=\"ClusterComputeResource\">'''+cluster_id+'''</_this>  \n      <spec xsi:type=\"ClusterConfigSpecEx\">  \n        <rulesSpec> \n          <operation>'''+drs_operation+'''</operation>\n          <info xsi:type=\"ClusterAntiAffinityRuleSpec\"> \n            <enabled>true</enabled>  \n            <name>'''+drs_rule_name+'''</name>  \n            <userCreated>true</userCreated>\n          </info> \n        </rulesSpec>  \n      </spec>  \n      <modify>true</modify> \n    </ReconfigureComputeResource_Task> \n  </soapenv:Body> \n</soapenv:Envelope>'''\n\n# add vms to the payload\npayload_parse = ET.fromstring(payload)\npayload_find = payload_parse.find(\".//{urn:vim25}info\")\nfor vm in vms_id.split(\",\"):\n    payload_push = ET.SubElement(payload_find,\"vm\")\n    payload_push.attrib[\"type\"] = \"VirtualMachine\"\n    payload_push.text = vm\npayload = ET.tostring(payload_parse)\n\n# making the call\nprint(\"STEP: Creating anti-affinity drs rules for vms...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\n# print the task id\nresp_parse = ET.fromstring(resp.text)\nfor element in resp_parse.iter('*'):\n    if \"returnval\" in element.tag:\n        print(\"Task is: {}\".format(element.text))\n#endregion\n\n#region logout\n#region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n#endregion\n\n#region logout API call\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Logout>\n         <_this type=\"SessionManager\">SessionManager</_this>\n      </Logout>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n#endregion\n#endregion\n\nexit (0)\n"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "VcSoapCreateVmDrsRules",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "# region headers\n# * author:     igor.zecevic@nutanix.com, stephane.bourdeaud@nutanix.com\n# * version:    v1.0 - initial version (igor)\n# *             v1.1 - added login/logout (stephane)\n# * date:       17/03/2020\n# task_name:    VcSoapCreateVmDrsRules\n# description:  Create a ClusterAntiAffinity Rules (Separate VMs)\n#               The rules creation requires at least 2 VMs\n# input vars:   vc_cookie, api_server, cluster_id, vms_id\n#               drs_rule_name, drs_operation,\n# output vars:  none\n# endregion\n\n# region dealing with Scaling In/Out the application\n# this script will be executed only on the second Service/Instance\n# (ie: Service[1])\nif \"@@{calm_array_index}@@\" != \"1\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\ncluster_id = \"@@{vc_cluster_id}@@\" #retreived from VcGSoapetObjects\ndrs_rule_name = \"@@{calm_application_name}@@\"\ndrs_operation = \"add\" #add / edit / remove\napi_server = \"@@{vc_endpoint}@@\"\nvms_id = \"@@{calm_array_vc_vm_id}@@\"\n# endregion\n\n#region API call function\ndef process_request(url, method, headers, payload):\n    r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status Code: {}\".format(r))\n    else:\n        print(\"Request failed\")\n        print(\"Status Code: {}\".format(r))\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(payload))\n        print(\"Response: {}\".format(r.text))\n        resp_parse = ET.fromstring(r.text)\n        for element in resp_parse.iter('*'):\n          if \"faultstring\" in element.tag:\n            print(\"\")\n            print(\"Error: {}\".format(element.text))\n            break\n        exit(1)\n    return r\n#endregion\n\n#region login\n#region prepare login API call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml'}\n#endregion\n\n#region login API call\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Login>\n         <_this type=\"SessionManager\">SessionManager</_this>\n         <userName>'''+username+'''</userName>\n         <password>'''+password+'''</password>\n      </Login>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# pass the cookie in vc_soap_session so that it may be captured by Calm.\nvc_cookie = resp.headers.get('Set-Cookie').replace('\"','').split(\";\")[0]\n#endregion\n#endregion\n\n#region main processing\n# region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n# endregion\n\n# region create the drs rules\npayload ='''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> \n  <soapenv:Body> \n    <ReconfigureComputeResource_Task>  \n      <_this type=\"ClusterComputeResource\">'''+cluster_id+'''</_this>  \n      <spec xsi:type=\"ClusterConfigSpecEx\">  \n        <rulesSpec> \n          <operation>'''+drs_operation+'''</operation>\n          <info xsi:type=\"ClusterAntiAffinityRuleSpec\"> \n            <enabled>true</enabled>  \n            <name>'''+drs_rule_name+'''</name>  \n            <userCreated>true</userCreated>\n          </info> \n        </rulesSpec>  \n      </spec>  \n      <modify>true</modify> \n    </ReconfigureComputeResource_Task> \n  </soapenv:Body> \n</soapenv:Envelope>'''\n\n# add vms to the payload\npayload_parse = ET.fromstring(payload)\npayload_find = payload_parse.find(\".//{urn:vim25}info\")\nfor vm in vms_id.split(\",\"):\n    payload_push = ET.SubElement(payload_find,\"vm\")\n    payload_push.attrib[\"type\"] = \"VirtualMachine\"\n    payload_push.text = vm\npayload = ET.tostring(payload_parse)\n\n# making the call\nprint(\"STEP: Creating anti-affinity drs rules for vms...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\n# print the task id\nresp_parse = ET.fromstring(resp.text)\nfor element in resp_parse.iter('*'):\n    if \"returnval\" in element.tag:\n        print(\"Task is: {}\".format(element.text))\n#endregion\n\n#region logout\n#region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n#endregion\n\n#region logout API call\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Logout>\n         <_this type=\"SessionManager\">SessionManager</_this>\n      </Logout>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n#endregion\n#endregion\n\nexit (0)\n",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150414988108",
    "kind": "app_task",
    "uuid": "e50d7a92-747d-4e10-acb7-801bbf3f20b9",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150414988108",
    "name": "VcSoapCreateVmDrsRules"
  }
}
