{
  "status": {
    "state": "ACTIVE",
    "message_list": [],
    "name": "JenkinsMonitorJob",
    "resources": {
      "project_reference_list": [
        {
          "kind": "project",
          "uuid": "d64d5488-1f58-423c-b176-5c8b871f25a4",
          "name": "alain_client1"
        }
      ],
      "type": "EXEC",
      "attrs": {
        "script_type": "static",
        "type": "",
        "command_line_args": "",
        "exit_status": [],
        "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    JenkinsLaunchBuild\n# description:  Monitor a jenkins job \n# input vars:   job_build_id\n# output vars:  job_status\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jenkins_endpoint}@@\"\njenkins_login = \"@@{jenkins.username}@@\"\njenkins_api_token = \"@@{jenkins.secret}@@\"\njenkins_job_name = \"@@{jenkins_job_name}@@\"\njob_build_id = \"@@{job_build_id}@@\" # job that need to be monitored\n# endregion\n\n# region prepare api call\napi_server_port = \"8080\"\napi_server_endpoint = \"/job/\" + jenkins_job_name + \"/\" + job_build_id + \"/api/json\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"GET\"\nheaders = {\n    'Accept': 'application/json'\n}\n# endregion\n\n\njob_status = ''\ntimeout = 300\nwhile job_status != 'SUCCESS':\n    \n   # region make api call\n   # make the API call and capture the results in the variable called \"resp\"\n   print(\"Making a {} API call to {}\".format(method, url))\n   resp = urlreq(url, verb=method, auth='BASIC', user=jenkins_login, passwd=jenkins_api_token,\n                 headers=headers, verify=False\n                 )\n   # deal with the result/response\n   if resp.ok:\n       print(\"Request was successful. Status code: {}\".format(resp.status_code))\n       job_status = json.loads(resp.content)['result']\n       if job_status == 'SUCCESS':\n           print(\"job ok\")\n           break\n       elif job_status == 'FAILURE':\n           print(\"job failed\")\n           exit(1)\n        \n       timeout -= 15\n       if timeout == 0:\n           print(\"timeout\")\n           exit(1)\n       else:\n           print(\"still waiting for the job to finish\")\n           sleep(15)\n    \n   else:\n       print(\"Request failed\")\n       print(\"Headers: {}\".format(headers))\n       print('Status code: {}'.format(resp.status_code))\n       print('Response: {}'.format(json.dumps(resp.content)))\n    # endregion\n"
      },
      "variable_list": []
    },
    "description": ""
  },
  "spec": {
    "name": "JenkinsMonitorJob",
    "resources": {
      "type": "EXEC",
      "attrs": {
        "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    JenkinsLaunchBuild\n# description:  Monitor a jenkins job \n# input vars:   job_build_id\n# output vars:  job_status\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jenkins_endpoint}@@\"\njenkins_login = \"@@{jenkins.username}@@\"\njenkins_api_token = \"@@{jenkins.secret}@@\"\njenkins_job_name = \"@@{jenkins_job_name}@@\"\njob_build_id = \"@@{job_build_id}@@\" # job that need to be monitored\n# endregion\n\n# region prepare api call\napi_server_port = \"8080\"\napi_server_endpoint = \"/job/\" + jenkins_job_name + \"/\" + job_build_id + \"/api/json\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"GET\"\nheaders = {\n    'Accept': 'application/json'\n}\n# endregion\n\n\njob_status = ''\ntimeout = 300\nwhile job_status != 'SUCCESS':\n    \n   # region make api call\n   # make the API call and capture the results in the variable called \"resp\"\n   print(\"Making a {} API call to {}\".format(method, url))\n   resp = urlreq(url, verb=method, auth='BASIC', user=jenkins_login, passwd=jenkins_api_token,\n                 headers=headers, verify=False\n                 )\n   # deal with the result/response\n   if resp.ok:\n       print(\"Request was successful. Status code: {}\".format(resp.status_code))\n       job_status = json.loads(resp.content)['result']\n       if job_status == 'SUCCESS':\n           print(\"job ok\")\n           break\n       elif job_status == 'FAILURE':\n           print(\"job failed\")\n           exit(1)\n        \n       timeout -= 15\n       if timeout == 0:\n           print(\"timeout\")\n           exit(1)\n       else:\n           print(\"still waiting for the job to finish\")\n           sleep(15)\n    \n   else:\n       print(\"Request failed\")\n       print(\"Headers: {}\".format(headers))\n       print('Status code: {}'.format(resp.status_code))\n       print('Response: {}'.format(json.dumps(resp.content)))\n    # endregion\n",
        "script_type": "static"
      },
      "variable_list": []
    },
    "description": ""
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1672150249343982",
    "kind": "app_task",
    "uuid": "bf669489-daff-4e28-a245-89543e40390f",
    "owner_reference": {
      "kind": "user",
      "uuid": "f770294b-960c-5b8d-9e5b-1441b339aff7",
      "name": "alain.veuve@emeagso.lab"
    },
    "spec_version": 0,
    "creation_time": "1672150249343982",
    "name": "JenkinsMonitorJob"
  }
}
