{
  "status": {
    "description": "",
    "state": "ACTIVE",
    "message_list": [],
    "resources": {
      "service_definition_list": [
        {
          "port_list": [],
          "description": "",
          "action_list": [
            {
              "description": "System action for creating an application",
              "message_list": [],
              "uuid": "9b76dc6d-21b0-4989-8441-e0d6dd8a1a13",
              "name": "action_create",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "dc799480-dc61-456d-9d9f-08e136befe02",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=F5ConfigAdd; uuid=484acbc9-295d-4920-8406-c0e923ede18d}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "1060ee9f_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "484acbc9-295d-4920-8406-c0e923ede18d",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=5ed345e7_runbook; uuid=3b5f3c2f-c687-4bdc-b683-b52b7a773b8e}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "F5ConfigAdd"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "6f03436d-c46f-42c1-838f-3ef00b072f23",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "1060ee9f_dag",
                  "uuid": "dc799480-dc61-456d-9d9f-08e136befe02"
                },
                "name": "f0d6aa56_runbook"
              }
            },
            {
              "description": "System action for deleting an application. Deletes created VMs as well",
              "message_list": [],
              "uuid": "fe2518e7-8261-487a-8246-ebae7152a472",
              "name": "action_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "9c131802-bf8a-40e3-9cd4-b249fc81fe7b",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=CalmGetAppstatus; uuid=14778cee-9af4-4080-92b3-efb5e96a2b68}",
                      "@{kind=app_task; name=VeeamCheckJob; uuid=9cc17a15-d9e6-4294-a4a3-37687eac0998}",
                      "@{kind=app_task; name=CreateJiraTicket; uuid=74226793-f172-40b4-9a11-e180e55445a4}",
                      "@{kind=app_task; name=LinkJiraParent; uuid=5a6858ff-c7f8-4f7c-b995-0c396ca31e10}",
                      "@{kind=app_task; name=F5ConfigRemove; uuid=c2b6ed68-174b-4eac-a96f-b0dff78454ff}",
                      "@{kind=app_task; name=VeaamDelJob; uuid=0d2ab0c0-2a5d-4d51-9aa1-5db2d75537ac}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "    ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "6c8cf9d3_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "14778cee-9af4-4080-92b3-efb5e96a2b68",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:       salaheddine.gassim@nutanix.com\n# * version:      03242020 - initial version\n# task_name:      CalmGetAppStatus\n# description:    This script gets the status of an application.\n# endregion\n\n# region capture Calm macros\npc_ip = '@@{prism_ip}@@'\nprism_username = '@@{prism.username}@@'\nprism_secret = '@@{prism.secret}@@'\napp_uuid = '@@{calm_application_uuid}@@'\n# endregion\n\n# region prepare variables\nheaders = {'content-type': 'application/json'}\n# endregion\n\n# region REST call: Get Apps\nmethod = 'GET'\nurl = \"https://{}:9440/api/nutanix/v3/apps/{}\".format(pc_ip,app_uuid)\n\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, auth='BASIC', user=prism_username, passwd=prism_secret,\n              headers=headers, verify=False)\n\nif resp.ok:\n    json_resp = json.loads(resp.content)\n    print(\"app_status={}\".format(json_resp['status']['state']))\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n",
                      "eval_variables": "app_status",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "CalmGetAppstatus"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "9cc17a15-d9e6-4294-a4a3-37687eac0998",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       11/03/2020\n# task_name:    VeeamCheckJob\n# description:  Checks a Veeam Job\n#               The script deletes a Veeam Job using the \n#               the veeam_job_url on VeeamGetJob\n# input vars:   username, password, veeam_job_url, api_server\n# output vars:  none\n# endregion\n\n# region capture Calm variables\nusername = \"@@{veeam.username}@@\"\npassword = \"@@{veeam.secret}@@\"\nveeam_job_name = \"@@{calm_application_name}@@\"\napi_server = \"@@{veeam_endpoint}@@\"\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/sessionMngr/?v=latest\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to Veeam...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the session_cookie and session_id\nresp_parse = json.loads(resp.content)\nveeam_session_cookie = resp.headers.get('X-RestSvcSessionId')\nveeam_session_id = resp_parse['SessionId']\n# endregion\n\n# region main processing\n# region prepare api call\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/jobs\"\nmethod = \"DELETE\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n# endregion\n\n# region get job\n# make the api call\nprint(\"STEP: Gettings jobs...\")\nmethod = \"GET\"\nprint(\"Making a {} API call to {}\".format(method, base_url))\nresp = process_request(base_url, method, headers)\n\n# get the job_url\njob_url = \"\"\nresp_parse = json.loads(resp.content)\nfor job in resp_parse['Refs']:\n    if job['Name'] == veeam_job_name:\n        job_url = job['Href']\n\nif job_url:\n    veeam_job_url=job_url.rsplit('/', 1)[1] #get only the last occurence\nelse:\n    print(\"Error: Backup Job \"+veeam_job_name+\" is not present ..\")\n    exit(1)\n# endregion\n\n# region get job backup sessions\n# make the api call\nprint(\"STEP: Get backup sessions...\")\nmethod = \"GET\"\nurl = \"{0}/{1}/backupSessions?format=entity\".format(base_url, veeam_job_url)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# check if any job is currently running\n# exiting if the job is running for more than 10 minutes\ni = 1\nwhile True:\n    loop_break = '0'\n    resp_parse = json.loads(resp.content)\n    for job in resp_parse['BackupJobSessions']:\n        if ((job['JobName'] == veeam_job_name) and (job['State'] == \"Working\")):\n            print (\"A job is currently running ..\")\n            print (\"Job's name: {}\" .format(job['JobName']))\n            print (\"Job's session name: {}\" .format(job['Name']))\n            print (\"Job's progress: {0}, state: {1}, result: {2}\" .format(job['Progress'], job['State'], job['Result']))\n            print (\"Sleep for: 2 minutes..\")\n            sleep(120)\n            i = i+1\n            loop_break = '1'\n            resp = process_request(url, method, headers)\n            if (i > 5):\n                print (\"Error.., we have waited for 10 minutes already ..\")\n                print (\"Job's name: {} is still in progress\" .format(job['JobName']))\n                print (\"Job's progress: {0}, state: {1}, result: {2}\" .format(job['Progress'], job['State'], job['Result']))\n                print (\"Please relaunch the application deletion after Backup's completion\")\n                exit(1)  \n    if loop_break == '0':\n        break\n# endregion\n# endregion\nexit(0)"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "VeeamCheckJob"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "74226793-f172-40b4-9a11-e180e55445a4",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraCreateTicket\n# description:  Jira ticket creation using the deployed vm specs\n# input vars:   application_name, jira_project_key\n# output vars:  jira_ticket_name\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\njira_project_key = \"@@{jira_project_name}@@\"\napplication_name = \"@@{calm_application_name}@@\"\n# endregion\n\n\ndef create_jira_ticket(api_server, jira_login, jira_api_token, jira_project_key,\n                       application_name, ticket_summary):\n    # region prepare api call\n    api_server_port = \"443\"\n    api_server_endpoint = \"/rest/api/3/issue\"\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    }\n    create_payload = {\n        \"fields\": {\n        \"project\": {\n        \"key\": jira_project_key\n        },\n        \"description\": {\n        \"version\": 1,\n        \"type\": \"doc\",\n        \"content\": [\n            {\n            \"type\": \"paragraph\",\n            \"content\": [\n                {\n                \"type\": \"text\",\n                \"text\": ticket_summary\n                }\n            ]\n            }\n        ]\n        },\n        \"summary\": ticket_summary,\n            \"labels\": [\n        \"calm\"\n        ],        \n        \"issuetype\": {\n        \"name\": \"Task\"\n        }\n    }\n        \n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(create_payload),\\\n                auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n                verify=False\n                )\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"Ticket {} was created\".format(result['key']))\n        print(\"jira_child_ticket={}\".format(result['key']))\n        \n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\nsleep(10)\ncalm_array_index = int('@@{calm_array_index}@@')\nif ((\"@@{app_status}@@\" == \"deleting\") and (calm_array_index == 0)):\n    print(\"Creating Jira ticket to delete operation\")\n    ticket_summary = application_name + \" - Deleting deployment\"\n    create_jira_ticket(api_server, jira_login, jira_api_token, jira_project_key,\n                       application_name, ticket_summary)\nelif ((calm_array_index > 0) and (\"@@{app_status}@@\" == \"running\")):\n    print(\"Creating Jira ticket for ScaleIn operation\")\n    ticket_summary = \"ScaleIn operation on \" + application_name\n    create_jira_ticket(api_server, jira_login, jira_api_token, jira_project_key,\n                       application_name, ticket_summary)",
                      "eval_variables": "jira_child_ticket",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "CreateJiraTicket"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "5a6858ff-c7f8-4f7c-b995-0c396ca31e10",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraUpdateTicket\n# description:  Link a ticket to it's parent\n# input vars:   jira_link_type\n# output vars:  none\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\njira_link_type = \"@@{jira_link_type}@@\" #10003 = relates to\njira_parent_ticket = \"@@{jira_parent_ticket}@@\"\njira_child_ticket = \"@@{jira_child_ticket}@@\"\n# endregion\n\n\ndef link_jira_ticket(api_server, jira_login, jira_api_token, jira_link_type,\n                     jira_parent_ticket, jira_child_ticket):\n        \n    # region prepare api call\n    api_server_port = \"443\"\n    api_server_endpoint = \"/rest/api/3/issueLink\"\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    }\n\n    link_payload = {\n        \"outwardIssue\": {\n            \"key\": jira_child_ticket\n        },\n        \"inwardIssue\": {\n            \"key\": jira_parent_ticket\n        },\n        \"type\": {\n            \"id\": jira_link_type\n        }\n    }\n\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(link_payload),\\\n                auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n                verify=False\n                )\n\n    print(resp)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))    \n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(resp.content))\n        exit(1)\n    # endregion\n\ncalm_array_index = int('@@{calm_array_index}@@')\n\nif ((\"@@{app_status}@@\" == \"deleting\") and (calm_array_index == 0)):\n    print(\"Linking Jira ticket for the Delete operation\")\n    link_jira_ticket(api_server, jira_login, jira_api_token, jira_link_type,\n                     jira_parent_ticket, jira_child_ticket)\nelif calm_array_index > 0 and (\"@@{app_status}@@\" == \"running\"):\n    print(\"Linking Jira ticket for the ScaleIn operation\")\n    link_jira_ticket(api_server, jira_login, jira_api_token, jira_link_type,\n                     jira_parent_ticket, jira_child_ticket)\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "LinkJiraParent"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "c2b6ed68-174b-4eac-a96f-b0dff78454ff",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=5ed345e7_runbook_cloned_0; uuid=b7bf1e71-aa5d-4c82-8cc2-bb3d9fd00735}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "F5ConfigRemove"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "0d2ab0c0-2a5d-4d51-9aa1-5db2d75537ac",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=a25b9ced_runbook; uuid=d5742432-a681-4792-81ed-cf5b0091c832}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "VeaamDelJob"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "5a750d31-8cd9-402f-b4b1-50af0ec1536a",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "6c8cf9d3_dag",
                  "uuid": "9c131802-bf8a-40e3-9cd4-b249fc81fe7b"
                },
                "name": "df173f1e_runbook"
              }
            },
            {
              "description": "System action for starting an application",
              "message_list": [],
              "uuid": "298da7dd-c504-449a-9a93-5ff0bc6fab09",
              "name": "action_start",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "774bcbb5-bf8b-468d-bd0c-1920c1c45e75",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=ReadyPhase; uuid=92ce38de-4c60-4aac-b80a-bb8bffc5de02}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "0a954dd4_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "92ce38de-4c60-4aac-b80a-bb8bffc5de02",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=6941cb3a_runbook; uuid=ab4ec5af-b0f8-4607-a1bd-6bb4d67e5659}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "ReadyPhase"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "d0e1b19c-af6c-419d-87be-27afa329e778",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "0a954dd4_dag",
                  "uuid": "774bcbb5-bf8b-468d-bd0c-1920c1c45e75"
                },
                "name": "efba402c_runbook"
              }
            },
            {
              "description": "System action for stopping an application",
              "message_list": [],
              "uuid": "a0007b51-5b06-4cc9-ab2c-55a01a563e8f",
              "name": "action_stop",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "d8922a71-4811-4bb1-9e8f-594b9f76cbec",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=Task1_nuta; uuid=3f046f09-fc1c-4159-a0c7-ecc7fe33cee1}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "c997b6ab_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "3f046f09-fc1c-4159-a0c7-ecc7fe33cee1",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "print(\"ok\")"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "Task1_nuta"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "67c4c206-3937-41c5-b191-4e4840ae55a5",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "c997b6ab_dag",
                  "uuid": "d8922a71-4811-4bb1-9e8f-594b9f76cbec"
                },
                "name": "53c0046c_runbook"
              }
            },
            {
              "description": "System action for restarting an application",
              "message_list": [],
              "uuid": "8d324994-cd81-4fa6-94da-280688fcf531",
              "name": "action_restart",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "d7858dbf-e731-43bd-be28-b44f49ef6319",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=Task1_nuta; uuid=b5f8be00-b6ac-44f7-8e07-db657e3d93fe}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "20f027f8_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "b5f8be00-b6ac-44f7-8e07-db657e3d93fe",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "print(\"ok\")"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "Task1_nuta"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "6c48900b-c924-48f6-b946-2c26e51be9c0",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "20f027f8_dag",
                  "uuid": "d7858dbf-e731-43bd-be28-b44f49ef6319"
                },
                "name": "b25bb7e8_runbook"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "182ade64-54a5-4735-93f3-57f76a4322b0",
              "name": "AnsibleDeployment",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "49c01079-d7b6-48e7-a24c-73e5a77346fe",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=AwxAddHost; uuid=a9c35126-9c89-4f54-9482-9ab4b0fd6cfe}",
                      "@{kind=app_task; name=AwxAddHostToGroups; uuid=b13ac330-f824-416e-8076-a295853d6c10}",
                      "@{kind=app_task; name=AwxRunPlaybook; uuid=55ce0a6f-48c6-41ed-88ac-eb8d448e74f6}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": " ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "18cefae7_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "a9c35126-9c89-4f54-9482-9ab4b0fd6cfe",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# escript-template v20190605 / stephane.bourdeaud@nutanix.com\n# * author:     jose.gomez@nutanix.com\n# * version:    20200214\n# task_type:    Set Variable\n# task_name:    AwxAddHost\n# description:  Add host to AWX inventory \n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\nawx_username = '@@{awx.username}@@'\nawx_password = '@@{awx.secret}@@'\nawx_api = '@@{awx_ip}@@'\nawx_inventory_id = int('@@{awx_inventory_id}@@')\nhost_ip = '@@{address}@@'\n\n# endregion\n\n# region functions\ndef make_api_call(url,method,username,username_secret,payload):\n    \"\"\"Makes an API call to an external API.\n\n    Args:\n        url: The URL for the external REST API endpoint.\n        method: The REST method to use.\n        username: The API user name.\n        username_secret: The API user name password.\n        payload: The JSON payload to include in the call.\n    \n    Returns:\n        The API response.\n    \"\"\"\n    headers = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n    }\n    while True:\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            params=json.dumps(payload),\n            headers=headers,\n            verify=False\n        )\n\n        # deal with the result/response\n        if resp.ok:        \n            return resp\n\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(json.dumps(payload)))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(\n                json.dumps(\n                    json.loads(resp.content), \n                    indent=4)))\n            exit(1)\n\ndef awx_add_host(api,username,password,inventory_id,host_ip,host_variables='',host_enabled=True):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"80\"\n    api_endpoint = \"/api/v2/hosts/\"\n    url = \"http://{}:{}{}\".format(\n        api,\n        api_port,\n        api_endpoint\n    )\n    method = \"POST\"\n\n    # endregion\n\n    # Compose the json payload\n    payload = {\n        'variables': host_variables,\n        'name': host_ip,\n        'enabled': host_enabled,\n        'inventory': inventory_id\n    }\n\n    r = make_api_call(\n        url,\n        method,\n        username,\n        password,\n        payload\n        )\n\n    if r.ok:\n        resp = json.loads(r.content)\n        print 'awx_host_id={0}'.format(resp['id'])\n        exit(0)\n    else:\n        print 'Post request failed', r.content\n        exit(1)\n# endregion\n        \nawx_add_host(awx_api,awx_username,awx_password,awx_inventory_id,host_ip)",
                      "eval_variables": "awx_host_id",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "AwxAddHost"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "b13ac330-f824-416e-8076-a295853d6c10",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# escript-template v20190605 / stephane.bourdeaud@nutanix.com\n# * author:     jose.gomez@nutanix.com\n# * version:    20200214\n# task_type:    Execute\n# task_name:    AwxAddHostToGroups\n# description:  Add host to AWX inventory \n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\nawx_username = '@@{awx.username}@@'\nawx_password = '@@{awx.secret}@@'\nawx_api = '@@{awx_ip}@@'\nawx_inventory_id = int('@@{awx_inventory_id}@@')\nawx_host_id = int('@@{awx_host_id}@@')\nawx_ansible_groups = list(\"@@{awx_ansible_groups}@@\".split(\",\"))\n# endregion\n\n# region functions\ndef make_api_call(url,method,username,username_secret,payload=None):\n    \"\"\"Makes an API call to an external API.\n\n    Args:\n        url: The URL for the external REST API endpoint.\n        method: The REST method to use.\n        username: The API user name.\n        username_secret: The API user name password.\n        payload: The JSON payload to include in the call.\n    \n    Returns:\n        The API response.\n    \"\"\"\n    headers = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n    }\n    while True:\n        print(\"Making a {} API call to {}\".format(method, url))\n        if payload:\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                params=json.dumps(payload),\n                headers=headers,\n                verify=False\n            )\n        else:\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                headers=headers,\n                verify=False\n            )\n\n        # deal with the result/response\n        if resp.ok:     \n            return resp\n\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(json.dumps(payload)))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(\n                json.dumps(\n                    json.loads(resp.content), \n                    indent=4)))\n            exit(1)\n\ndef awx_add_host_to_groups(api,username,password,inventory_id,host_id,host_groups = [], *args):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"80\"\n\n    for group in host_groups:\n        api_endpoint = \"/api/v2/inventories/\"\n        api_action = \"/groups\"\n        api_query = \"?name=\"\n\n        url = \"http://{}:{}{}{}{}{}{}\".format(\n            api,\n            api_port,\n            api_endpoint,\n            inventory_id,\n            api_action,\n            api_query,\n            group\n        )\n        \n        method = \"GET\"\n\n        r = make_api_call(\n            url,\n            method,\n            username,\n            password\n        )\n        \n        if len(json.loads(r.content)['results']) > 0:\n            group_id = json.loads(r.content)['results'][0]['id']\n            payload = {\n                'id': host_id\n            }\n        else:\n            print \"Group {0} does no exist\".format(group)\n            break\n\n        api_endpoint = \"/api/v2/groups/\"\n        api_action = \"/hosts/\"\n\n        method = \"POST\"\n\n        url = \"http://{}:{}{}{}{}\".format(\n            api,\n            api_port,\n            api_endpoint,\n            group_id,\n            api_action,            \n        )\n\n        r = make_api_call(\n            url,\n            method,\n            username,\n            password,\n            payload\n        )\n\n        if r.ok:\n            print \"Host added to group {0}\".format(group)\n        else:\n            print 'Post request failed', r.content\n            exit(1)\n# endregion\n        \nawx_add_host_to_groups(awx_api,awx_username,awx_password,awx_inventory_id,awx_host_id,awx_ansible_groups)"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "AwxAddHostToGroups"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "55ce0a6f-48c6-41ed-88ac-eb8d448e74f6",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# escript-template v20190605 / stephane.bourdeaud@nutanix.com\n# * author:     jose.gomez@nutanix.com\n# * version:    20200218\n# task_type:    Execute\n# task_name:    LaunchJobTemplate\n# description:  Launch a job template or also known playbook \n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\nawx_username = '@@{awx.username}@@'\nawx_password = '@@{awx.secret}@@'\nawx_api = '@@{awx_ip}@@'\nawx_job_template_id = int('@@{awx_job_template_id}@@')\nawx_extra_vars = \"\" #@@{awx_extra_vars}@@\nhost_ip = '@@{address}@@'\n# endregion\n\n# region functions\ndef make_api_call(url,method,username,username_secret,payload=None):\n    \"\"\"Makes an API call to an external API.\n\n    Args:\n        url: The URL for the external REST API endpoint.\n        method: The REST method to use.\n        username: The API user name.\n        username_secret: The API user name password.\n        payload: The JSON payload to include in the call.\n    \n    Returns:\n        The API response.\n    \"\"\"\n    headers = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n    }\n    while True:\n        print(\"Making a {} API call to {}\".format(method, url))\n        if payload:\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                params=json.dumps(payload),\n                headers=headers,\n                verify=False\n            )\n        else:\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                headers=headers,\n                verify=False\n            )\n\n        # deal with the result/response\n        if resp.ok:     \n            return resp\n\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(json.dumps(payload)))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(\n                json.dumps(\n                    json.loads(resp.content), \n                    indent=4)))\n            exit(1)\n\ndef awx_run_job_template(api,username,password,job_template_id,host_ip,extra_vars=None):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"80\"\n\n    api_endpoint = \"/api/v2/job_templates/\"\n    api_action = \"/launch/\"\n\n    url = \"http://{}:{}{}{}{}\".format(\n        api,\n        api_port,\n        api_endpoint,\n        job_template_id,\n        api_action\n    )\n    \n    method = \"POST\"\n\n    payload = {\n        \"extra_vars\": extra_vars,\n        \"limit\": \"@@{address}@@\"\n    }\n\n    r = make_api_call(\n        url,\n        method,\n        username,\n        password,\n        payload\n    )\n\n    if r.ok:\n        job_id =  json.loads(r.content)['job']\n        print 'Ansible Job ID: {0}'.format(job_id)\n\n        awx_poll_job(api,username,password,job_id)\n        print 'Ansible job status: successful'\n    else:\n        print 'Request failed', r.content\n        exit(1)\n    \n\ndef awx_poll_job(api,username,password,job_id):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"80\"\n\n    api_endpoint = \"/api/v2/jobs/\"\n\n    url = \"http://{}:{}{}{}/\".format(\n        api,\n        api_port,\n        api_endpoint,\n        job_id,\n    )\n    \n    method = \"GET\"\n\n    retries = 360\n    job_status = ''\n\n    while job_status != 'successful':\n        r = make_api_call(\n            url,\n            method,\n            username,\n            password,\n        )\n\n        if r.ok:\n            job_status = json.loads(r.content)['status']\n\n            if job_status == \"failed\" or job_status == \"error\":\n                print \"Ansible job failed\"\n                break\n        else:\n            print 'Post request failed', r.content\n            exit(1)\n\n        sleep(10)\n        retries -= 1\n        if retries == 0:\n            # if job hasn't finished yet, give up\n            print 'Job may still running. Increase the retries or sleep time'\n            exit(0)\n\n# endregion\n        \nawx_run_job_template(awx_api,awx_username,awx_password,awx_job_template_id,host_ip,awx_extra_vars)"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "AwxRunPlaybook"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "5d5c4127-f6ee-4674-81fc-d96c434783fe",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "18cefae7_dag",
                  "uuid": "49c01079-d7b6-48e7-a24c-73e5a77346fe"
                },
                "name": "bf14dde8_runbook"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "4ff232c2-8b61-4833-8cbd-8501da0e6ef5",
              "name": "FortigateConfigAdd",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "569b194d-c2d5-4a7e-8610-b7c074958fae",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=FortigateCreateIpv4; uuid=a22211dc-9ff6-40c1-8d2e-b6080fa30135}",
                      "@{kind=app_task; name=FortigateAddGroup; uuid=2b1f2dce-f902-4218-baba-822067be4385}",
                      "@{kind=app_task; name=FortigateCheckGroup; uuid=81c51ce5-5b5b-41fe-a052-2fcdf525ac56}",
                      "@{kind=app_task; name=FortigateUpdateGroup; uuid=634c9ec2-dd40-4696-800d-eecc23ab3b03}",
                      "@{kind=app_task; name=FortigateUpdatePolicy; uuid=89a3839e-6668-42da-aa2a-14021dd4b6bd}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "   ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "df5ec9f8_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "a22211dc-9ff6-40c1-8d2e-b6080fa30135",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    FortigateCreateIpv4\n# description:  Create an ipv4 address\n# input vars:   fortigate_vm_name and fortigate_vm_ip\n# output vars:  revision_changed\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\nvm_name = \"@@{vm_name}@@\"\nvm_ip = \"@@{address}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\n# endregion\n\nif \"@@{fortigate_policy}@@\" == \"\":\n  exit(0)\n  \ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'application/json'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \n\n#fortigate_csrf_token , fortigate_cookie = fortiget_get_cookie(api_server, api_server_port,fortigate_login,fortigate_password)\n\n\ndef fortiget_create_ip(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie, vm_name, vm_ip, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/address?&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"','')\n    headers = {\n        'Accept': '*/*',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n    create_payload = {\"name\": vm_name, \"subnet\": vm_ip + \" 255.255.255.255\"}\n    print(json.dumps(create_payload))\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(create_payload), cookies=fortigate_cookie, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"revision_changed : {}\".format(result['revision_changed']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \n\nfortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\nfortiget_create_ip(api_server, api_server_port, fortigate_csrf_token,\n                   fortigate_cookie, vm_name, vm_ip, fortigate_vdom)\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "FortigateCreateIpv4"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "2b1f2dce-f902-4218-baba-822067be4385",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    FortigateAddGroup\n# description:  Create a new fortigate address group and add vm into it\n# input vars:   vms, group_name\n# output vars:  fortigate_group_name\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\nvms = \"@@{vm_name}@@\"\ngroup_name = \"@@{calm_application_name}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\n# endregion\n\nif \"@@{fortigate_policy}@@\" == \"\":\n  exit(0)\n  \ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'plain/text'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        print(resp.content)\n        print(resp.cookies.get('ccsrftoken'))\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\ndef fortiget_add_group(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie, vms, group_name, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/addrgrp?&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"','')\n    headers = {\n        'Content-Type': 'application/json',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n   \n    create_payload = {}\n    create_payload['name'] = group_name\n    create_payload['member'] = []\n    for vm in vms.split(\",\"):\n        create_payload['member'].append({'name' : vm})\n\n    print(json.dumps(create_payload))\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(create_payload), cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"Group name : {}\".format(result['mkey']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \nif int(\"@@{calm_array_index}@@\") == 0:\n  fortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\n\n  fortiget_add_group(api_server, api_server_port, fortigate_csrf_token,\n                   fortigate_cookie, vms, group_name, fortigate_vdom)\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "FortigateAddGroup"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "81c51ce5-5b5b-41fe-a052-2fcdf525ac56",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/10032020 - initial version\n# task_name:    fortigateCheckObject\n# description:  Check if an object exist, with a timeout of 5 min\n# input vars:   object_root, object_name\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\nobject_root = \"addrgrp/\"\nobject_name = \"@@{calm_application_name}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\" # for futur use\n# endregion\nif \"@@{fortigate_policy}@@\" == \"\":\n  exit(0)\n  \ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'plain/text'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        print(resp.content)\n        print(resp.cookies.get('ccsrftoken'))\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\n\ndef fortigate_check_object(api_server, api_server_port, object_root, object_name, fortigate_vdom):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/\"+ object_root + object_name\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n         'Accept': '*/*'\n    }\n    # endregion\n    timeout = 300\n    while True:\n        # region make api call\n        # make the API call and capture the results in the variable called \"resp\"\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n\n        # deal with the result/response\n        if resp.ok:\n            print(\"Request was successful. Status code: {}\".format(resp.status_code))\n            print(\"Address Group {} is ready, Resuming...\".format(object_name))\n            break\n        else:\n            print(\"Object {} doesn't exist\".format(object_name))\n            timeout -= 15\n            if timeout == 0:\n                print(\"Operation timeout\")\n                exit(1)\n            sleep(15)\n            \n    # endregion\n    \nif int(\"@@{calm_array_index}@@\") != 0:\n  fortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\n  \n  fortigate_check_object(api_server, api_server_port, object_root, object_name, fortigate_vdom)\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "FortigateCheckGroup"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "634c9ec2-dd40-4696-800d-eecc23ab3b03",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    FortigateUpdateGroup\n# description:  Update fortigate address group with new members\n# input vars:   vm_name, vm_ip, group_name, action\n# output vars:  revision_changed\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\nvm_name = \"@@{vm_name}@@\"\nvm_ip = \"@@{address}@@\"\ngroup_name = \"@@{calm_application_name}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\naction = \"add\"\n# endregion\n\nif \"@@{fortigate_policy}@@\" == \"\":\n  exit(0)\n\ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'plain/text'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        print(resp.content)\n        print(resp.cookies.get('ccsrftoken'))\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\ndef fortiget_update_group(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie,\n                          vm_name, vm_ip, group_name, action, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/addrgrp/\"+ group_name + \"?&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n        'Content-Type': 'application/json',\n    }\n    # endregion\n    \n    # region make api call to get the group members\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        group_members = result['results'][0]\n        if len(group_members['member']) == 1 and int(\"@@{calm_array_index}@@\") == 0:\n            # region prepare api call to update the group\n            method = \"DELETE\"\n            fortigate_csrf_token = fortigate_csrf_token.replace('\"', '')\n            headers = {\n                'Content-Type': 'application/json',\n                'X-CSRFTOKEN': fortigate_csrf_token\n            }\n            # endregion\n\n            # region make api call\n            # make the API call and capture the results in the variable called \"resp\"\n            print(\"Making a {} API call to {}\".format(method, url))\n            resp = urlreq(url, verb=method, params=json.dumps(group_members),\n                        cookies=fortigate_cookie, headers=headers, verify=False)\n            print(resp.content)\n            # deal with the result/response\n            if resp.ok:\n                print(\"Request was successful. Status code: {}\".format(resp.status_code))\n                result = json.loads(resp.content)\n                print(\"Group {} was deleted\".format(group_name))\n                print(\"revision_changed : {}\".format(result['revision_changed']))\n            else:\n                print(\"Request failed\")\n                print(\"Headers: {}\".format(headers))\n                print('Status code: {}'.format(resp.status_code))\n                print('Response: {}'.format(json.dumps(\n                    json.loads(resp.content), indent=4)))\n                exit(1)\n            # endregion\n            exit(0)\n\n        if action == \"add\":\n            group_members['member'].append({'name': vm_name})\n        else:\n            group_members['member'].remove(\n                {'name': vm_name, 'q_origin_key': vm_name})\n\n        print(json.dumps(group_members))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(\n            json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n    # region prepare api call to update the group\n    method = \"PUT\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"', '')\n    headers = {\n        'Content-Type': 'application/json',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(group_members),\n                  cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"revision_changed : {}\".format(result['revision_changed']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(\n            json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\nif int(\"@@{calm_array_index}@@\") != 0:\n  fortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\n\n  fortiget_update_group(api_server, api_server_port, fortigate_csrf_token,\n                      fortigate_cookie, vm_name, vm_ip, group_name, action, fortigate_vdom)\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "FortigateUpdateGroup"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "89a3839e-6668-42da-aa2a-14021dd4b6bd",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    FortigateUpdatePolicy\n# description:  Update a policy with the specified group as a destination\n# input vars:   fortigate_policy_id\n# output vars:  revision_changed\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\npolicy_id = \"@@{fortigate_policy}@@\".split(\"-\")[0]\ngroup_name = \"@@{calm_application_name}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\naction = \"add\"\n# endregion\n\nif \"@@{fortigate_policy}@@\" == \"\":\n  exit(0)\n\ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'text/plain'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \n\ndef fortiget_get_policies(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie,\n                          group_name, action, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/policy/\" + str(policy_id) + \"?skip=1&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n        'Content-Type': 'application/json',\n    }\n    # endregion\n    \n    # region make api call to get the group members\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        policy_members = result['results'][0]\n        if action == \"add\":\n            policy_members['dstaddr'].append({'name' : group_name})\n        else:\n            policy_members['dstaddr'].remove({'name': group_name, 'q_origin_key': group_name})\n            \n        print(json.dumps(policy_members))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\n    # region prepare api call to update the group\n    method = \"PUT\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"','')\n    headers = {\n        'Content-Type': 'application/json',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(policy_members), cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"revision_changed : {}\".format(result['revision_changed']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \n\nfortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\nfortiget_get_policies(api_server, api_server_port, fortigate_csrf_token,\n                      fortigate_cookie, group_name, action, fortigate_vdom)\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "FortigateUpdatePolicy"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "0807d9ca-e5bb-411f-a4de-c4d6ba02a5fa",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "df5ec9f8_dag",
                  "uuid": "569b194d-c2d5-4a7e-8610-b7c074958fae"
                },
                "name": "141bd772_runbook"
              }
            },
            {
              "description": "The application is ready and we can continue other tasks, that suppose removing an existing application.",
              "message_list": [],
              "uuid": "afda4583-1544-4493-bc66-5415fef41f6b",
              "name": "ReadyPhase",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "dc78a4d0-3d6d-4acd-b8c9-d382507a7716",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=JenkinsLaunchBuild; uuid=9a2d3620-56cb-4a7b-b36c-0e275f59ee44}",
                      "@{kind=app_task; name=JenkinsMonitorJob; uuid=e0f62adf-ac52-4864-a740-53ef01a98b11}",
                      "@{kind=app_task; name=CalmRemoveApp; uuid=77508497-8ea2-4d68-a198-d9e8bf5837bd}",
                      "@{kind=app_task; name=JiraCloseTicket; uuid=2f469757-8107-40a0-9509-89206fdf5069}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "  ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "4a4af9c6_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "9a2d3620-56cb-4a7b-b36c-0e275f59ee44",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/27200219 - initial version\n# task_name:    JenkinsLaunchBuild\n# description:  Launching a Parametrized jenkins build \n# input vars:   jenkins_job_name, jenkins_job_params\n# output vars:  job_build_id\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jenkins_endpoint}@@\"\njenkins_login = \"@@{jenkins.username}@@\"\njenkins_api_token = \"@@{jenkins.secret}@@\"\njenkins_job_name = \"@@{jenkins_job_name}@@\" # job that need to be executed\njenkins_job_params = \"machine_ips=@@{address}@@\" # job parameters that need to be executed\n# endregion\n\n# region prepare api call\napi_server_port = \"8080\"\napi_server_endpoint = \"/job/\" + jenkins_job_name + \"/buildWithParameters?\" + jenkins_job_params\nurl = \"http://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Accept': 'application/json'\n}\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, auth='BASIC', user=jenkins_login, passwd=jenkins_api_token,\\\n              headers=headers, verify=False\n             )\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful. Status code: {}\".format(resp.status_code))\n    job_build_id = resp.headers['Location'].split(\"/\")[-2]\n    print(\"Job {} was successfully launched\".format(job_build_id))\n    print(\"job_build_id={}\".format(job_build_id))  \nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion",
                      "eval_variables": "job_build_id",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "JenkinsLaunchBuild"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "e0f62adf-ac52-4864-a740-53ef01a98b11",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/27200219 - initial version\n# task_name:    JenkinsLaunchBuild\n# description:  Monitor a jenkins job \n# input vars:   job_build_id\n# output vars:  job_status\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jenkins_endpoint}@@\"\njenkins_login = \"@@{jenkins.username}@@\"\njenkins_api_token = \"@@{jenkins.secret}@@\"\njenkins_job_name = \"@@{jenkins_job_name}@@\"\njob_build_id = \"@@{job_build_id}@@\" # job that need to be monitored\n# endregion\n\n# region prepare api call\napi_server_port = \"8080\"\napi_server_endpoint = \"/job/\" + jenkins_job_name + \"/\" + job_build_id + \"/api/json\"\nurl = \"http://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"GET\"\nheaders = {\n    'Accept': 'application/json'\n}\n# endregion\n\n\njob_status = ''\ntimeout = 300\nwhile job_status != 'SUCCESS':\n    \n   # region make api call\n   # make the API call and capture the results in the variable called \"resp\"\n   print(\"Making a {} API call to {}\".format(method, url))\n   resp = urlreq(url, verb=method, auth='BASIC', user=jenkins_login, passwd=jenkins_api_token,\n                 headers=headers, verify=False\n                 )\n   # deal with the result/response\n   if resp.ok:\n       print(\"Request was successful. Status code: {}\".format(resp.status_code))\n       job_status = json.loads(resp.content)['result']\n       if job_status == 'SUCCESS':\n           print(\"job ok\")\n           break\n       elif job_status == 'FAILURE':\n           print(\"job failed\")\n           exit(1)\n        \n       timeout -= 15\n       if timeout == 0:\n           print(\"timeout\")\n           exit(1)\n       else:\n           print(\"still waiting for the job to finish\")\n           sleep(15)\n    \n   else:\n       print(\"Request failed\")\n       print(\"Headers: {}\".format(headers))\n       print('Status code: {}'.format(resp.status_code))\n       print('Response: {}'.format(json.dumps(resp.content)))\n    # endregion\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "JenkinsMonitorJob"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "77508497-8ea2-4d68-a198-d9e8bf5837bd",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# escript-template v20190611 / stephane.bourdeaud@nutanix.com\n# * author:     stephane.bourdeaud@emeagso.lab\n# * version:    2020/01/22\n# task_name:    CalmRemoveApp\n# description:  Given an app name, delete the Calm App. \n# endregion\n\n#region capture Calm variables\napi_server = \"@@{prism_ip}@@\"\nusername = \"@@{prism.username}@@\"\nusername_secret = \"@@{prism.secret}@@\"\napp_name = \"@@{target_app}@@\"\n#endregion\n\n#check if we need to delete an app\nif app_name is None:\n  exit(0)\n\n#region prepare api call (get apps)\napi_server_port = \"9440\"\napi_server_endpoint = \"/api/nutanix/v3/apps/list\"\nlength = 250\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\n\n# Compose the json payload\npayload = {\n    \"kind\": \"app\", \n    \"length\":length, \n    \"offset\":0\n}\n# endregion\n\n#region make the api call (get apps)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n# endregion\n\n#region process the results (get apps)\nif resp.ok:\n    print (\"Request status code {} on {}\".format(resp.status_code,resp.request.url))\n    json_resp = json.loads(resp.content)\n    for app in json_resp['entities']:\n        if app_name == app['metadata']['name']:\n            print (\"Deleting application {}\".format(app['metadata']['name']))\n            #region prepare api call (delete app)\n            api_server_port = \"9440\"\n            api_server_endpoint = \"/api/nutanix/v3/apps/{}\".format(app['metadata']['uuid'])\n            url = \"https://{}:{}{}\".format(\n                api_server,\n                api_server_port,\n                api_server_endpoint\n            )\n            method = \"DELETE\"\n            headers = {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n            #endregion\n            #region make api call (delete app)\n            print(\"Making a {} API call to {}\".format(method, url))\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                headers=headers,\n                verify=False\n            )\n            #endregion\n            #region process results (delete app)\n            if resp.ok:\n                print (\"Request status code {} on {}\".format(resp.status_code,resp.request.url))\n                print (\"Application {} is deleting.\".format(app['metadata']['name']))\n                app_state = app['status']['state']\n                app_uuid = app['metadata']['uuid']\n                while app_state != 'deleted':\n                    sleep(15)\n                    method = 'GET'\n                    url = \"https://{}:9440/api/nutanix/v3/apps/{}\".format(\n                        api_server,\n                        app_uuid\n                    )\n                    print(\"Making a {} API call to {}\".format(method, url))\n                    resp = urlreq(\n                        url,\n                        verb=method,\n                        headers=headers,\n                        auth=\"BASIC\",\n                        user=username,\n                        passwd=username_secret,\n                        verify=False\n                    )\n                    if resp.ok:\n                        json_resp = json.loads(resp.content)\n                        print(\"Status:\", json_resp['status']['state'])\n                        if json_resp['status']['state'] is \"error\":\n                            print(\"App could not be deleted.\")\n                            print (\"Response content:\")\n                            print(json.dumps(json.loads(resp.content),indent=4))\n                            exit(1)\n                        app_state = json_resp['status']['state']\n                    else:\n                        print (\"Request failed with status code {}\".format(resp.status_code))\n                        print (\"Response content:\")\n                        print(json.dumps(json.loads(resp.content),indent=4))\n                        print(\"Headers: {}\".format(headers))\n                        exit(1)\n            else:\n                print (\"Request failed with status code {}\".format(resp.status_code))\n                print (\"Response content:\")\n                print(json.dumps(json.loads(resp.content),indent=4))\n                print(\"Headers: {}\".format(headers))\n                exit(1)\n            #endregion\nelse:\n    print (\"Request failed with status code {}\".format(resp.status_code))\n    print (\"Response content:\")\n    print(json.dumps(json.loads(resp.content),indent=4))\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(payload))\n    exit(1)\n# endregion\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "CalmRemoveApp"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "2f469757-8107-40a0-9509-89206fdf5069",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraUpdateTicket\n# description:  updating the ticket status with the provided payload\n# input vars:   transition_id, ticket_name\n# output vars:  none\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\ntransition_id = 41 # 31 = in progress / 41 = Done\nticket_name = \"@@{jira_parent_ticket}@@\" # ticket that need to be updated\n# endregion\n\ndef update_jira_ticket(api_server, jira_login, jira_api_token, transition_id,\n                       ticket_name):\n        \n    # region prepare api call\n    api_server_port = \"443\"\n    api_server_endpoint = \"/rest/api/3/issue/\" + ticket_name + \"/transitions\"\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    }\n    update_payload = {\n        \"transition\": {\n        \"id\": transition_id\n    }\n        \n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(update_payload),\\\n                auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n                verify=False\n                )\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))    \n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\ncalm_array_index = int('@@{calm_array_index}@@')\nif (\"@@{app_status}@@\" == \"provisioning\") and calm_array_index == 0:\n    print(\"Updating Jira ticket for the application deployment\")\n    \n    update_jira_ticket(api_server, jira_login, jira_api_token, transition_id,\n                       ticket_name)\nelif calm_array_index > 0 and (\"@@{app_status}@@\" == \"running\"):\n\n    print(\"Updating Jira ticket for ScaleOut operation\")\n    update_jira_ticket(api_server, jira_login, jira_api_token, transition_id,\n                       ticket_name)\n "
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "JiraCloseTicket"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "ab4ec5af-b0f8-4607-a1bd-6bb4d67e5659",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "4a4af9c6_dag",
                  "uuid": "dc78a4d0-3d6d-4acd-b8c9-d382507a7716"
                },
                "name": "6941cb3a_runbook"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "36bd0cbf-2a64-4db4-9f0d-d7d4aaaa8e5c",
              "name": "F5ConfigAdd",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "331ed2d1-880a-4825-ba93-e02e6c69d98b",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=F5CreateNode; uuid=c57d2d7e-93da-4a90-9597-a28ae784da9e}",
                      "@{kind=app_task; name=F5CreatePool; uuid=4e005157-fb43-46d6-8032-c3ad67ddb5d2}",
                      "@{kind=app_task; name=F5CheckPool; uuid=2e141275-5ce2-445d-aa51-698a048adebf}",
                      "@{kind=app_task; name=F5UpdatePool; uuid=39ae6521-cc2a-4eb0-890a-b799925b5a12}",
                      "@{kind=app_task; name=F5CheckVS; uuid=13bf67b9-3281-4969-b812-e87705f97599}",
                      "@{kind=app_task; name=F5CreateVS; uuid=3cde9d6f-1458-4cd7-9861-62f2ad047eb3}",
                      "@{kind=app_task; name=F5UpdateVS; uuid=31b4c114-79a6-4faa-ab0d-e82c8635a352}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "     ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "f81dd7b2_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "c57d2d7e-93da-4a90-9597-a28ae784da9e",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/10032020 - initial version\n# task_name:    F5CreateNode\n# description:  Create a node or nodes to be used inside a pool\n# input vars:   vm_name, vm_ip, f5_node_description, f5_partition\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\nvm_name = \"@@{vm_name}@@\"\nvm_ip = \"@@{address}@@\"\nf5_node_description = \"@@{calm_application_name}@@\" + \" node\"\nf5_partition = \"@@{f5_partition}@@\"\n# endregion\n\n\ndef f5_create_node(api_server, api_server_port, vm_name, vm_ip, f5_node_description, f5_partition):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/node/\"\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n         'Content-Type': 'application/json'\n    }\n    # endregion\n    create_payload = {\n        \"name\": vm_name,\n        \"partition\": f5_partition,\n        \"address\": vm_ip,\n        \"connectionLimit\": 0,\n        \"description\": f5_node_description,\n        \"dynamicRatio\": 1,\n        \"ephemeral\": \"false\",\n        \"fqdn\": {\n            \"addressFamily\": \"ipv4\",\n            \"autopopulate\": \"disabled\",\n            \"downInterval\": 5,\n            \"interval\": \"3600\"\n        }\n    }\n    print(json.dumps(create_payload))\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, auth='BASIC', params=json.dumps(create_payload),\n                  user=f5_login, passwd=f5_password, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"node {} created\".format(result['name']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(resp.content)))\n        exit(1)\n    # endregion\n    \n\nf5_create_node(api_server, api_server_port, vm_name, vm_ip, f5_node_description, f5_partition)\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "F5CreateNode"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "4e005157-fb43-46d6-8032-c3ad67ddb5d2",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/10032020 - initial version\n# task_name:    F5CreatePool\n# description:  Create an empty pool\n# input vars:   pool_name, f5_pool_description, f5_pool_monitor, f5_partition\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\npool_name = \"@@{calm_application_name}@@\" + \"-pool\"\nf5_pool_description = \"@@{calm_application_name}@@\" + \" pool\"\nf5_pool_monitor = \"@@{f5_pool_monitor}@@\"\nf5_partition = \"@@{f5_partition}@@\"\n# endregion\n\n\ndef f5_create_pool(api_server, api_server_port, pool_name, f5_pool_description, f5_pool_monitor, f5_partition):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/pool/\"\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n         'Content-Type': 'application/json'\n    }\n    # endregion\n    create_payload = {\n        \"name\": pool_name,\n        \"partition\": f5_partition,\n        \"monitor\": f5_pool_monitor\n    }\n    print(json.dumps(create_payload))\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, auth='BASIC', params=json.dumps(create_payload),\n                  user=f5_login, passwd=f5_password, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"Pool {} created\".format(result['name']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(resp.content)))\n        exit(1)\n    # endregion\n    \nif int(\"@@{calm_array_index}@@\") == 0:\n  f5_create_pool(api_server, api_server_port, pool_name, f5_pool_description, f5_pool_monitor, f5_partition)\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "F5CreatePool"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "2e141275-5ce2-445d-aa51-698a048adebf",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/10032020 - initial version\n# task_name:    F5CheckObject\n# description:  Check if an object exist, with a timeout of 5 min\n# input vars:   object_root, object_name\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\nobject_root = \"pool/\"\nobject_name = \"@@{calm_application_name}@@\" + \"-pool\"\nf5_partition = \"@@{f5_partition}@@\" # for futur use\n# endregion\n\n\ndef f5_check_object(api_server, api_server_port, object_root, object_name, f5_partition):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/\"+ object_root + object_name\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n         'Accept': '*/*'\n    }\n    # endregion\n    timeout = 300\n    while True:\n        # region make api call\n        # make the API call and capture the results in the variable called \"resp\"\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, auth='BASIC', user=f5_login,\n                    passwd=f5_password, headers=headers, verify=False)\n\n        # deal with the result/response\n        if resp.ok:\n            print(\"Request was successful. Status code: {}\".format(resp.status_code))\n            print(\"Pool {} is ready, Resuming...\".format(object_name))\n            break\n        else:\n            print(\"Object {} doesn't exist\".format(object_name))\n            timeout -= 15\n            if timeout == 0:\n                print(\"Operation timeout\")\n                exit(1)\n            sleep(15)\n            \n    # endregion\n    \nif int(\"@@{calm_array_index}@@\") != 0:\n  f5_check_object(api_server, api_server_port, object_root, object_name, f5_partition)\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "F5CheckPool"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "39ae6521-cc2a-4eb0-890a-b799925b5a12",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/11032020 - initial version\n# task_name:    F5UpdatePool\n# description:  Update a pool with a new member\n# input vars:   pool_name, f5_pool_members,\n#                   f5_vs_port, f5_member_ip, f5_partition\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\npool_name = \"@@{calm_application_name}@@\" + \"-pool\"\nf5_pool_members = \"@@{vm_name}@@\"\nf5_vs_port = \"@@{f5_vs_port}@@\"\nf5_member_ip = \"@@{address}@@\"\nf5_partition = \"@@{f5_partition}@@\"\n\n# endregion\n\n\ndef f5_update_pool(api_server, api_server_port, pool_name, f5_pool_members,\n                   f5_vs_port, f5_member_ip, f5_partition, action=\"add\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/pool/\" + pool_name + \"/members/\"\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    headers = {\n         'Content-Type': 'application/json'\n    }\n    # endregion\n    update_payload = {\n        \"name\": \"/\" + f5_partition + \"/\" + f5_pool_members + \":\" + f5_vs_port ,\n    }\n    print(json.dumps(update_payload))\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    if action == \"add\":\n        method = \"POST\"\n        print(\"Adding a new member {} into pool {}\".format(\n            f5_pool_members, pool_name))\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, auth='BASIC', params=json.dumps(update_payload),\n                      user=f5_login, passwd=f5_password, headers=headers, verify=False)\n    else:\n        print(\"Removing member {} from pool {}\".format(f5_pool_members,pool_name))\n        method = \"DELETE\"\n        url = url + f5_pool_members + \":\" + f5_vs_port\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, auth='BASIC',\n                      user=f5_login, passwd=f5_password, headers=headers, verify=False)\n \n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(\n            json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\nf5_update_pool(api_server, api_server_port, pool_name, f5_pool_members,\n               f5_vs_port, f5_member_ip, f5_partition, \"add\")\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "F5UpdatePool"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "13bf67b9-3281-4969-b812-e87705f97599",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/10032020 - initial version\n# task_name:    F5CheckObject\n# description:  Check if an object exist, with a timeout of 5 min\n# input vars:   object_root, object_name\n# output vars:  n/a\n# endregion\n\"\"\"\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\nobject_root = \"virtual/\"\nobject_name = \"@@{calm_application_name}@@\" + \"-vs\"\nf5_partition = \"@@{f5_partition}@@\" # for futur use\n# endregion\n\n\ndef f5_check_object(api_server, api_server_port, object_root, object_name, f5_partition):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/\"+ object_root + object_name\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n         'Accept': '*/*'\n    }\n    # endregion\n    timeout = 300\n    while True:\n        # region make api call\n        # make the API call and capture the results in the variable called \"resp\"\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, auth='BASIC', user=f5_login,\n                    passwd=f5_password, headers=headers, verify=False)\n\n        # deal with the result/response\n        if resp.ok:\n            print(\"Request was successful. Status code: {}\".format(resp.status_code))\n            print(\"Pool {} is ready, Resuming...\".format(object_name))\n            break\n        else:\n            print(\"Object {} doesn't exist\".format(object_name))\n            timeout -= 15\n            if timeout == 0:\n                print(\"Operation timeout\")\n                exit(1)\n            sleep(15)\n            \n    # endregion\n    \nif int(\"@@{calm_array_index}@@\") != 0:\n  f5_check_object(api_server, api_server_port, object_root, object_name, f5_partition)\n\"\"\"\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "F5CheckVS"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "3cde9d6f-1458-4cd7-9861-62f2ad047eb3",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/10032020 - initial version\n# task_name:    F5CreateVS\n# description:  Create a virtual server\n# input vars:   vs_name, vs_ip, f5_vs_description,\n#               f5_vs_port, f5_vs_protocol, f5_partition\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\nvs_name = \"@@{calm_application_name}@@\" + \"-vs\"\nvs_ip = \"1.1.1.20\"\nf5_vs_description = \"@@{calm_application_name}@@\" + \" vip\"\nf5_vs_port = \"@@{f5_vs_port}@@\"\nf5_vs_protocol = \"@@{f5_vs_protocol}@@\"\nf5_partition = \"@@{f5_partition}@@\"\n# endregion\n\n\ndef f5_create_vs(api_server, api_server_port, vs_name, vs_ip, f5_vs_description,\n                 f5_vs_port, f5_vs_protocol, f5_partition):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/virtual/\"\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n         'Content-Type': 'application/json'\n    }\n    # endregion\n    create_payload = {\n        \"name\": vs_name,\n        \"partition\": f5_partition,\n        \"description\": f5_vs_description,\n        \"destination\": f5_partition + \"/\" + vs_ip + \":\" + f5_vs_port,\n        \"enabled\": True,\n        \"ipProtocol\": f5_vs_protocol,\n        \"mask\": \"255.255.255.255\",\n        \"source\": \"0.0.0.0/0\",\n        \"sourcePort\": \"preserve\"\n    }\n    print(json.dumps(create_payload))\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, auth='BASIC', params=json.dumps(create_payload),\n                  user=f5_login, passwd=f5_password, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"Virtual Server {} created\".format(result['name']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \nif int(\"@@{calm_array_index}@@\") == 0:\n  f5_create_vs(api_server, api_server_port, vs_name, vs_ip, f5_vs_description,\n             f5_vs_port, f5_vs_protocol, f5_partition)\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "F5CreateVS"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "31b4c114-79a6-4faa-ab0d-e82c8635a352",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/11032020 - initial version\n# task_name:    F5UpdateVS\n# description:  Update a virtual server with a pool as a memeber\n# input vars:   pool_name, vs_name, f5_partition\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\npool_name = \"@@{calm_application_name}@@\" + \"-pool\"\nvs_name = \"@@{calm_application_name}@@\" + \"-vs\"\nf5_partition = \"@@{f5_partition}@@\"\n\n# endregion\n\n\ndef f5_update_vs(api_server, api_server_port, pool_name, vs_name, f5_partition, action=\"add\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/virtual/\" + vs_name\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    headers = {\n         'Content-Type': 'application/json'\n    }\n    method = \"PATCH\"\n    # endregion\n    \n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    if action == \"add\":\n        update_payload = {\n            \"pool\": \"/\" + f5_partition + \"/\" + pool_name,\n        }\n        print(\"Adding pool {} into virtual server {}\".format(\n            pool_name, vs_name))\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, auth='BASIC', params=json.dumps(update_payload),\n                      user=f5_login, passwd=f5_password, headers=headers, verify=False)\n    else:\n        print(\"Removing pool {} from virtual server {}\".format(pool_name, vs_name))\n        update_payload = {\n            \"pool\": \"\",\n        }\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, auth='BASIC', params=json.dumps(update_payload),\n                      user=f5_login, passwd=f5_password, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\nf5_update_vs(api_server, api_server_port, pool_name, vs_name, f5_partition, \"add\")\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "F5UpdateVS"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "3b5f3c2f-c687-4bdc-b683-b52b7a773b8e",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "f81dd7b2_dag",
                  "uuid": "331ed2d1-880a-4825-ba93-e02e6c69d98b"
                },
                "name": "5ed345e7_runbook"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "61be3e2e-9ded-4d4c-a0c8-a48ec1c41d9c",
              "name": "F5ConfigRemove",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "5ef7aeb0-c69f-430d-8138-9ba41562f419",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=F5UpdatePool; uuid=335c5c77-f89b-4518-954d-cbbe286b2824}",
                      "@{kind=app_task; name=F5DeleteNode; uuid=b9bedf54-eeef-4ef3-92c4-5e4fcc199e20}",
                      "@{kind=app_task; name=F5UpdateVS; uuid=cb511ac4-b420-4bf8-892f-6b2cd0330322}",
                      "@{kind=app_task; name=F5DeletePool; uuid=c83c9afe-7f2b-4300-9994-27135c78bd22}",
                      "@{kind=app_task; name=F5DeleteVS; uuid=95aaa991-aea6-4258-911a-8c5b87b3753a}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "   ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "f81dd7b2_dag_cloned_1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "335c5c77-f89b-4518-954d-cbbe286b2824",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/11032020 - initial version\n# task_name:    F5UpdatePool\n# description:  Update a pool with a new member\n# input vars:   pool_name, f5_pool_members,\n#                   f5_vs_port, f5_member_ip, f5_partition\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\npool_name = \"@@{calm_application_name}@@\" + \"-pool\"\nf5_pool_members = \"@@{vm_name}@@\"\nf5_vs_port = \"@@{f5_vs_port}@@\"\nf5_member_ip = \"@@{address}@@\"\nf5_partition = \"@@{f5_partition}@@\"\n\n# endregion\n\n  \ndef f5_update_pool(api_server, api_server_port, pool_name, f5_pool_members,\n                   f5_vs_port, f5_member_ip, f5_partition, action=\"add\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/pool/\" + pool_name + \"/members/\"\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    headers = {\n         'Content-Type': 'application/json'\n    }\n    # endregion\n    update_payload = {\n        \"name\": \"/\" + f5_partition + \"/\" + f5_pool_members + \":\" + f5_vs_port ,\n    }\n    print(json.dumps(update_payload))\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    if action == \"add\":\n        method = \"POST\"\n        print(\"Adding a new member {} into pool {}\".format(\n            f5_pool_members, pool_name))\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, auth='BASIC', params=json.dumps(update_payload),\n                      user=f5_login, passwd=f5_password, headers=headers, verify=False)\n    else:\n        print(\"Removing member {} from pool {}\".format(f5_pool_members,pool_name))\n        method = \"DELETE\"\n        url = url + f5_pool_members + \":\" + f5_vs_port\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, auth='BASIC',\n                      user=f5_login, passwd=f5_password, headers=headers, verify=False)\n \n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(resp.content)))\n        exit(1)\n    # endregion\n\n\nf5_update_pool(api_server, api_server_port, pool_name, f5_pool_members,\n               f5_vs_port, f5_member_ip, f5_partition, \"remove\")\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "F5UpdatePool"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "b9bedf54-eeef-4ef3-92c4-5e4fcc199e20",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/10032020 - initial version\n# task_name:    F5DeleteNode\n# description:  Delete a single node\n# input vars:   node_name\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\nnode_name = \"@@{vm_name}@@\"\n# endregion\n\n\ndef f5_delete_node(api_server, api_server_port, node_name):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/node/\" + node_name\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"DELETE\"\n    headers = {\n         'Accept': '*/*'\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, auth='BASIC', user=f5_login, passwd=f5_password, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        print(\"node {} was deleted\".format(node_name))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(resp.content)))\n        exit(1)\n    # endregion\n    \n\nf5_delete_node(api_server, api_server_port, node_name)\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "F5DeleteNode"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "cb511ac4-b420-4bf8-892f-6b2cd0330322",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/11032020 - initial version\n# task_name:    F5UpdateVS\n# description:  Update a virtual server with a pool as a memeber\n# input vars:   pool_name, vs_name, f5_partition\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\npool_name = \"@@{calm_application_name}@@\" + \"-pool\"\nvs_name = \"@@{calm_application_name}@@\" + \"-vs\"\nf5_partition = \"@@{f5_partition}@@\"\n\n# endregion\n\n\ndef f5_update_vs(api_server, api_server_port, pool_name, vs_name, f5_partition, action=\"add\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/virtual/\" + vs_name\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    headers = {\n         'Content-Type': 'application/json'\n    }\n    method = \"PATCH\"\n    # endregion\n    \n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    if action == \"add\":\n        update_payload = {\n            \"pool\": \"/\" + f5_partition + \"/\" + pool_name,\n        }\n        print(\"Adding pool {} into virtual server {}\".format(\n            pool_name, vs_name))\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, auth='BASIC', params=json.dumps(update_payload),\n                      user=f5_login, passwd=f5_password, headers=headers, verify=False)\n    else:\n        print(\"Removing pool {} from virtual server {}\".format(pool_name, vs_name))\n        update_payload = {\n            \"pool\": \"\",\n        }\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, auth='BASIC', params=json.dumps(update_payload),\n                      user=f5_login, passwd=f5_password, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(resp.content)))\n        exit(1)\n    # endregion\n\nif int(\"@@{calm_array_index}@@\") == 0:\n  f5_update_vs(api_server, api_server_port, pool_name, vs_name, f5_partition, \"remove\")\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "F5UpdateVS"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "c83c9afe-7f2b-4300-9994-27135c78bd22",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/10032020 - initial version\n# task_name:    F5DeletePool\n# description:  Delete a single node\n# input vars:   pool_name\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\npool_name = \"@@{calm_application_name}@@\" + \"-pool\"\n# endregion\n\n\ndef f5_delete_pool(api_server, api_server_port, pool_name):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/pool/\" + pool_name\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"DELETE\"\n    headers = {\n         'Accept': '*/*'\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, auth='BASIC', user=f5_login, passwd=f5_password, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        print(\"Pool {} was deleted\".format(pool_name))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(resp.content)))\n        exit(1)\n    # endregion\n    \nif int(\"@@{calm_array_index}@@\") == 0:\n  f5_delete_pool(api_server, api_server_port, pool_name)\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "F5DeletePool"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "95aaa991-aea6-4258-911a-8c5b87b3753a",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/10032020 - initial version\n# task_name:    F5DeleteVS\n# description:  Delete a single virtual server\n# input vars:   vs_name\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\nvs_name = \"@@{calm_application_name}@@\" + \"-vs\"\n# endregion\n\n\ndef f5_delete_vs(api_server, api_server_port, pool_name):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/virtual/\" + vs_name\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"DELETE\"\n    headers = {\n         'Accept': '*/*'\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, auth='BASIC', user=f5_login, passwd=f5_password, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        print(\"Virtual server {} was deleted\".format(vs_name))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(resp.content)))\n        exit(1)\n    # endregion\n    \nif int(\"@@{calm_array_index}@@\") == 0:\n  f5_delete_vs(api_server, api_server_port, vs_name)\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "F5DeleteVS"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "b7bf1e71-aa5d-4c82-8cc2-bb3d9fd00735",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "f81dd7b2_dag_cloned_1",
                  "uuid": "5ef7aeb0-c69f-430d-8138-9ba41562f419"
                },
                "name": "5ed345e7_runbook_cloned_0"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "77620520-fc34-417b-bd07-54842f265a2b",
              "name": "FortigateConfigRemove",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "97c22b9d-359d-493d-a702-673a27d2416a",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=FortigateUpdatePolicy; uuid=95147765-fde8-4acf-8da2-bef88c730496}",
                      "@{kind=app_task; name=FortigateUpdateGroup; uuid=ee28a240-10ff-4cd2-b3aa-6165f1c8a367}",
                      "@{kind=app_task; name=FortigateDelGroup; uuid=c1aa0db6-549c-4681-b943-b6054c899893}",
                      "@{kind=app_task; name=FortigateDeleteIpv4; uuid=0ccb831c-1a4e-45e7-84e5-4a959caf1c43}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "  ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "ee862c77_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "95147765-fde8-4acf-8da2-bef88c730496",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    FortigateUpdatePolicy\n# description:  Update a policy with the specified group as a destination\n# input vars:   fortigate_policy_id\n# output vars:  revision_changed\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\npolicy_id = \"@@{fortigate_policy}@@\".split(\"-\")[0]\ngroup_name = \"@@{calm_application_name}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\naction = \"remove\"\n# endregion\nif \"@@{fortigate_policy}@@\" == \"\":\n  exit(0)\n  \ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'text/plain'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \n\ndef fortiget_get_policies(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie,\n                          group_name, action, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/policy/\" + str(policy_id) + \"?skip=1&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n        'Content-Type': 'application/json',\n    }\n    # endregion\n    \n    # region make api call to get the group members\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        policy_members = result['results'][0]\n        if action == \"add\":\n            policy_members['dstaddr'].append({'name' : group_name})\n        else:\n            policy_members['dstaddr'].remove({'name': group_name, 'q_origin_key': group_name})\n            \n        print(json.dumps(policy_members))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\n    # region prepare api call to update the group\n    method = \"PUT\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"','')\n    headers = {\n        'Content-Type': 'application/json',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(policy_members), cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"revision_changed : {}\".format(result['revision_changed']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \nif int(\"@@{calm_array_index}@@\") == 0:\n  fortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\n  fortiget_get_policies(api_server, api_server_port, fortigate_csrf_token,\n                      fortigate_cookie, group_name, action, fortigate_vdom)\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "FortigateUpdatePolicy"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "ee28a240-10ff-4cd2-b3aa-6165f1c8a367",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.1/18032020 - initial version\n# task_name:    FortigateUpdateGroup\n# description:  Update fortigate address group with new members\n# input vars:   group_name, vm_name, vm_ip\n# output vars:  revision_changed\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\nvm_name = \"@@{vm_name}@@\"\nvm_ip = \"@@{address}@@\"\ngroup_name = \"@@{calm_application_name}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\ncurrent_instance_nbr = len(\"@@{calm_array_name}@@\".split(\",\"))\naction = \"remove\"\n# endregion\n\nif \"@@{fortigate_policy}@@\" == \"\":\n  exit(0)\n    \ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'plain/text'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        print(resp.content)\n        print(resp.cookies.get('ccsrftoken'))\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\ndef fortiget_update_group(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie,\n                          vm_name, vm_ip, group_name, action, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/addrgrp/\"+ group_name + \"?&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n        'Content-Type': 'application/json',\n    }\n    # endregion\n    \n    # region make api call to get the group members\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        group_members = result['results'][0]\n        current_instance_nbr = len(\"@@{calm_array_name}@@\".split(\",\"))\n        if len(group_members['member']) == 1 and current_instance_nbr == 1:\n            timeout = 300\n            while True:\n\n                current_instance_nbr = len(\"@@{calm_array_name}@@\".split(\",\"))\n                # region prepare api call to update the group\n                method = \"DELETE\"\n                fortigate_csrf_token = fortigate_csrf_token.replace('\"', '')\n                headers = {\n                    'Content-Type': 'application/json',\n                    'X-CSRFTOKEN': fortigate_csrf_token\n                }\n                # endregion\n\n                # region make api call\n                # make the API call and capture the results in the variable called \"resp\"\n                print(\"Making a {} API call to {}\".format(method, url))\n                resp = urlreq(url, verb=method, params=json.dumps(group_members),\n                            cookies=fortigate_cookie, headers=headers, verify=False)\n                print(resp.content)\n                # deal with the result/response\n                if resp.ok:\n                    print(\"Request was successful. Status code: {}\".format(resp.status_code))\n                    result = json.loads(resp.content)\n                    print(\"Group {} was deleted\".format(group_name))\n                    print(\"revision_changed : {}\".format(result['revision_changed']))\n                    break\n                else:\n                    print(\"Object {} doesn't exist\".format(object_name))\n                    timeout -= 15\n                    if timeout == 0:\n                        print(\"Operation timeout\")\n                        exit(1)\n                    sleep(15)\n            # endregion\n            exit(0)\n\n        if action == \"add\":\n            group_members['member'].append({'name': vm_name})\n        else:\n            group_members['member'].remove(\n                {'name': vm_name, 'q_origin_key': vm_name})\n\n        print(json.dumps(group_members))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(\n            json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    current_instance_nbr = len(\"@@{calm_array_name}@@\".split(\",\"))\n    if current_instance_nbr > 1:\n        # region prepare api call to update the group\n        method = \"PUT\"\n        fortigate_csrf_token = fortigate_csrf_token.replace('\"', '')\n        headers = {\n            'Content-Type': 'application/json',\n            'X-CSRFTOKEN': fortigate_csrf_token\n        }\n        # endregion\n\n        # region make api call\n        # make the API call and capture the results in the variable called \"resp\"\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, params=json.dumps(group_members),\n                    cookies=fortigate_cookie, headers=headers, verify=False)\n        print(resp.content)\n        # deal with the result/response\n        if resp.ok:\n            print(\"Request was successful. Status code: {}\".format(resp.status_code))\n            result = json.loads(resp.content)\n            print(\"revision_changed : {}\".format(result['revision_changed']))\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(\n                json.loads(resp.content), indent=4)))\n            exit(1)\n        # endregion\n\n\nsleep(10)\ncalm_array_index = int('@@{calm_array_index}@@')\nif ((\"@@{app_status}@@\" == \"deleting\") and (calm_array_index == 0)):\n    print(\"Skipping group update on this instance as it is not required\")\n    exit(0)\nelif ((calm_array_index > 0) and (\"@@{app_status}@@\" == \"running\")):\n    print(\"Updating Fortigate group\")\n    fortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                                 api_server_port, fortigate_login, fortigate_password)\n    fortiget_update_group(api_server, api_server_port, fortigate_csrf_token,\n                      fortigate_cookie, vm_name, vm_ip, group_name, action, fortigate_vdom)\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "FortigateUpdateGroup"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "c1aa0db6-549c-4681-b943-b6054c899893",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/25032020 - initial version\n# task_name:    FortigateDelGroup\n# description:  delete a group\n# input vars:   group_name\n# output vars:  none\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\ngroup_name = \"@@{calm_application_name}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\n# endregion\n\ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'plain/text'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        #print(resp.content)\n        #print(resp.cookies.get('ccsrftoken'))\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\ndef fortiget_del_group(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie, group_name, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/addrgrp/\"+ group_name + \"?&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"DELETE\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"','')\n    headers = {\n        'Content-Type': 'application/json',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n    \n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        print(\"Address group {} was deleted\".format(group_name))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \nsleep(10)\ncalm_array_index = int('@@{calm_array_index}@@')\nif ((\"@@{app_status}@@\" == \"deleting\") and (calm_array_index == 0)):\n    print(\"Deleting Address Group\")\n    fortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                                api_server_port, fortigate_login, fortigate_password)\n\n    fortiget_del_group(api_server, api_server_port, fortigate_csrf_token,\n                      fortigate_cookie, group_name, fortigate_vdom)\n    exit(0)\n    \n\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "FortigateDelGroup"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "0ccb831c-1a4e-45e7-84e5-4a959caf1c43",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    FortigateDeleteIpv4\n# description:  Delete an ipv4 address\n# input vars:   fortigate_vm_name\n# output vars:  revision_changed\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\nvm_name = \"@@{vm_name}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\n# endregion\nif \"@@{fortigate_policy}@@\" == \"\":\n  exit(0)\n  \ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'application/json'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\ndef fortiget_delete_ip(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie, vm_name, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/address/\" + vm_name +\"?&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"DELETE\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"','')\n    headers = {\n        'Accept': '*/*',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"revision_changed : {}\".format(result['revision_changed']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \n\nfortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\nfortiget_delete_ip(api_server, api_server_port, fortigate_csrf_token,\n                   fortigate_cookie, vm_name, fortigate_vdom)\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "FortigateDeleteIpv4"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "e00e10e7-4495-49ec-93fc-fc9211e25d31",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "ee862c77_dag",
                  "uuid": "97c22b9d-359d-493d-a702-673a27d2416a"
                },
                "name": "bb908a06_runbook"
              }
            },
            {
              "description": "System action for deleting an application. Does not delete created VMs",
              "message_list": [],
              "uuid": "780d4787-f796-4124-be6b-2f4d2ea9fdca",
              "name": "action_soft_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "e05cd3fa-9b07-47ea-95a9-fcca44bc8a06",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Service_Element_Delete_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=cc7ff7cc-90a6-4c9c-be3f-93a7af302cd8}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SOFT_DELETE_ELEMENT",
                    "uuid": "cc7ff7cc-90a6-4c9c-be3f-93a7af302cd8",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Service_Element_Delete_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "d7d4619f-b55d-4d78-8c54-618b787f4bec",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1",
                  "uuid": "e05cd3fa-9b07-47ea-95a9-fcca44bc8a06"
                },
                "name": "SYS_GEN__Runbook_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "fc16fbae-8357-4949-9a15-5e4396904c0b",
              "name": "VcAddFolder",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "7666cba0-dd2f-48e0-9630-72b8fd35e1e7",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=VcSoapGetObjects; uuid=a75f4f1e-083e-4c86-9972-610df81a3913}",
                      "@{kind=app_task; name=VcSoapCreateVmFolder; uuid=0b7b0d8d-047d-40cb-ad69-a3fd2efac263}",
                      "@{kind=app_task; name=VcSoapMoveVmFolder; uuid=e1128fe3-ba45-4ae5-9a49-35121764805c}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": " ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "0b51f608_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "a75f4f1e-083e-4c86-9972-610df81a3913",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       10/03/2020\n# task_name:    VcSoapGetObjects\n# description:  Get list of MOID (Managed Object ID) using the SearchIndex Method\n# input vars:   vc_cookie, api_server, datacenter, cluster, vm_name\n# output vars:  vc_vm_folder_root_id, vc_cluster_id, vc_vm_id\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\napi_server = \"@@{vc_endpoint}@@\"\ndatacenter = \"@@{vc_datacenter}@@\"\ncluster = \"@@{vc_cluster}@@\"\nvm_name = \"@@{name}@@\" #calm macro for the vm's name\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload):\n    r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status Code: {}\".format(r))\n    else:\n        print(\"Request failed\")\n        print(\"Status Code: {}\".format(r))\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(payload))\n        print(\"Response: {}\".format(r.text))\n        resp_parse = ET.fromstring(r.text)\n        for element in resp_parse.iter('*'):\n          if \"faultstring\" in element.tag:\n            print(\"\")\n            print(\"Error: {}\".format(element.text))\n            break\n        exit(1)\n    return r\n# endregion\n\n# region login\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml'}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Login>\n         <_this type=\"SessionManager\">SessionManager</_this>\n         <userName>'''+username+'''</userName>\n         <password>'''+password+'''</password>\n      </Login>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# retreive the cookie\nvc_cookie = resp.headers.get('Set-Cookie').replace('\"','').split(\";\")[0]\n# endregion\n\n# region main processing\n# region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\nbase_payload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n  <soapenv:Body>\n    <FindByInventoryPath>\n      <_this type=\"SearchIndex\">SearchIndex</_this>\n    </FindByInventoryPath>\n  </soapenv:Body>\n</soapenv:Envelope>'''\n# endregion\n\n# region get the vm root folder id (/datacenter_name/vm)\npayload_parse = ET.fromstring(base_payload)\npayload_find = payload_parse.find(\".//{urn:vim25}FindByInventoryPath\")\npayload_push = ET.SubElement(payload_find,\"inventoryPath\")\npayload_push.text = \"/{0}/vm/\".format(datacenter)\npayload = ET.tostring(payload_parse)\n\n# making the call\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# get vm_folder_root_id\nresp_parse = ET.fromstring(resp.text)\nresp_find = resp_parse.findall(\".//{urn:vim25}returnval\")\nif resp_find:\n  for element in resp_find:\n      print(\"vc_vm_folder_root_id={}\".format(element.text))\nelse:\n  print(\"Error, couldn't retreive the object..\")\n  print(\"The object: \"+datacenter+\" doesn't seem to be present, check the provided input\")\n  exit(1) \n# endregion\n\n# region get the cluster id (/datacenter_name/host/cluster_name)\npayload_parse = ET.fromstring(base_payload)\npayload_find = payload_parse.find(\".//{urn:vim25}FindByInventoryPath\")\npayload_push = ET.SubElement(payload_find,\"inventoryPath\")\npayload_push.text = \"/{0}/host/{1}\".format(datacenter, cluster)\npayload = ET.tostring(payload_parse)\n\n# making the call\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# get the cluster_id\nresp_parse = ET.fromstring(resp.text)\nresp_find = resp_parse.findall(\".//{urn:vim25}returnval\")\nif resp_find:\n  for element in resp_find:\n      print(\"vc_cluster_id={}\".format(element.text))\nelse:\n  print(\"Error, couldn't retreive the object..\")\n  print(\"The object: \"+cluster+\" doesn't seem to be present, check the provided input\")\n  exit(1) \n# endregion\n\n# region get the vm id (/datacenter_name/host/vm_name)\npayload_parse = ET.fromstring(base_payload)\npayload_find = payload_parse.find(\".//{urn:vim25}FindByInventoryPath\")\npayload_push = ET.SubElement(payload_find,\"inventoryPath\")\npayload_push.text = \"/{0}/vm/{1}\".format(datacenter, vm_name)\npayload = ET.tostring(payload_parse)\n\n# making the call\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# get vm id\nresp_parse = ET.fromstring(resp.text)\nresp_find = resp_parse.findall(\".//{urn:vim25}returnval\")\nif resp_find:\n  for element in resp_find:\n      print(\"vc_vm_id={}\".format(element.text))\nelse:\n  print(\"Error, couldn't retreive the object..\")\n  print(\"The object: \"+vm_name+\" doesn't seem to be present, check the provided input\")\n  exit(1) \n# endregion\n# endregion\n\n# region logout\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Logout>\n         <_this type=\"SessionManager\">SessionManager</_this>\n      </Logout>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\nexit(0)",
                      "eval_variables": "vc_vm_id vc_cluster_id vc_vm_folder_root_id",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "VcSoapGetObjects"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "0b7b0d8d-047d-40cb-ad69-a3fd2efac263",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       10/03/2020\n# task_name:    VcSoapCreateVmFolder\n# description:  Create a vCenter vm folder based on the calm application name\n#               ie: creates the folder at the vm root level (/datacenter/vm/)\n# input vars:   vc_cookie, vm_folder_root_id, vm_folder_name, api_server\n# output vars:  vc_vm_folder_id\n# endregion\n\n# region dealing with Scaling In/Out the application\n# # this script will be executed only on the first Service/Instance\n# (ie: Service[0])\nif \"@@{calm_array_index}@@\" != \"0\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\nvm_folder_root_id = \"@@{vc_vm_folder_root_id}@@\" # retreived from VcSoapGetObjects\nvm_folder_name = \"@@{calm_application_name}@@\"\napi_server = \"@@{vc_endpoint}@@\"\ndatacenter = \"@@{vc_datacenter}@@\"\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload):\n    r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status Code: {}\".format(r))\n    else:\n        print(\"Request failed\")\n        print(\"Status Code: {}\".format(r))\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(payload))\n        print(\"Response: {}\".format(r.text))\n        resp_parse = ET.fromstring(r.text)\n        for element in resp_parse.iter('*'):\n          if \"faultstring\" in element.tag:\n            print(\"\")\n            print(\"Error: {}\".format(element.text))\n            break\n    return r\n# endregion\n\n# region login\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml'}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Login>\n         <_this type=\"SessionManager\">SessionManager</_this>\n         <userName>'''+username+'''</userName>\n         <password>'''+password+'''</password>\n      </Login>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# retreive the cookie\nvc_cookie = resp.headers.get('Set-Cookie').replace('\"','').split(\";\")[0]\n# endregion \n\n#region main processing\n#region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n#endregion\n# region create vm folder\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">  \n<soapenv:Body>\n    <CreateFolder>\n      <_this type=\"Folder\">'''+vm_folder_root_id+'''</_this>\n      <name>'''+vm_folder_name+'''</name>\n    </CreateFolder>\n  </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the call\nprint(\"STEP: Creating the folder...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\nbase_payload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n  <soapenv:Body>\n    <FindByInventoryPath>\n      <_this type=\"SearchIndex\">SearchIndex</_this>\n    </FindByInventoryPath>\n  </soapenv:Body>\n</soapenv:Envelope>'''\nif resp.ok:\n  # print the vm_folder_id\n  resp_parse = ET.fromstring(resp.text)\n  for element in resp_parse.iter('*'):\n      if \"returnval\" in element.tag:\n          print(\"vc_vm_folder_id={}\".format(element.text))\nelif resp.status_code == 500:\n  resp_parse = ET.fromstring(resp.text)\n  for element in resp_parse.iter('*'):\n    if \"faultstring\" in element.tag:\n      if \"already exists\" in element.text:\n        #fetch the existing folder id\n        payload_parse = ET.fromstring(base_payload)\n        payload_find = payload_parse.find(\".//{urn:vim25}FindByInventoryPath\")\n        payload_push = ET.SubElement(payload_find,\"inventoryPath\")\n        payload_push.text = \"/{0}/vm/{1}\".format(datacenter,vm_folder_name)\n        payload = ET.tostring(payload_parse)\n\n        # making the call\n        print(\"STEP: Fetching folder object id...\")\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = process_request(url, method, headers, payload)\n\n        # get vm_folder_root_id\n        resp_parse = ET.fromstring(resp.text)\n        resp_find = resp_parse.findall(\".//{urn:vim25}returnval\")\n        if resp_find:\n          for element in resp_find:\n              print(\"vc_vm_folder_id={}\".format(element.text))\n              exit(0)\n        else:\n          print(\"Error, couldn't retrieve the folder object..\")\n          exit(1)\nelse:\n  exit(1)\n#endregion\n#endregion\n\n# region logout\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Logout>\n         <_this type=\"SessionManager\">SessionManager</_this>\n      </Logout>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\nexit(0)",
                      "eval_variables": "vc_vm_folder_id",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "VcSoapCreateVmFolder"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "e1128fe3-ba45-4ae5-9a49-35121764805c",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       10/03/2020\n# task_name:    VcSoapMoveVmFolder\n# description:  Move a VM in a folder\n# input vars:   vc_cookie, api_server, vm_folder_id, vm_id\n# output vars:  none\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\nvm_folder_id = \"@@{calm_array_vc_vm_folder_id}@@\" #retreived from VcSoapCreateVmFolder\napi_server = \"@@{vc_endpoint}@@\"\nvm_id = \"@@{vc_vm_id}@@\" #retreived from VcSoapGetObjects\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload):\n    r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status Code: {}\".format(r))\n    else:\n        print(\"Request failed\")\n        print(\"Status Code: {}\".format(r))\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(payload))\n        print(\"Response: {}\".format(r.text))\n        resp_parse = ET.fromstring(r.text)\n        for element in resp_parse.iter('*'):\n          if \"faultstring\" in element.tag:\n            print(\"\")\n            print(\"Error: {}\".format(element.text))\n            break\n        exit(1)\n    return r\n# endregion\n\n# region login\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml'}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Login>\n         <_this type=\"SessionManager\">SessionManager</_this>\n         <userName>'''+username+'''</userName>\n         <password>'''+password+'''</password>\n      </Login>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# retreive the cookie\nvc_cookie = resp.headers.get('Set-Cookie').replace('\"','').split(\";\")[0]\n# endregion \n\n# region main processing\n# region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n# endregion\n\n# region move vm to folder\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n    <soapenv:Body>\n        <MoveIntoFolder_Task>\n            <_this type=\"Folder\">'''+vm_folder_id+'''</_this>\n        </MoveIntoFolder_Task>\n    </soapenv:Body>\n</soapenv:Envelope>'''\n\n# add vm to the payload\npayload_parse = ET.fromstring(payload)\npayload_find = payload_parse.find(\".//{urn:vim25}MoveIntoFolder_Task\")\npayload_push = ET.SubElement(payload_find,\"list\")\npayload_push.attrib[\"type\"] = \"VirtualMachine\"\npayload_push.text = vm_id\npayload = ET.tostring(payload_parse)\n\n# making the call\nprint(\"STEP: Moving vm to folder...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\n# print the task id\nresp_parse = ET.fromstring(resp.text)\nfor element in resp_parse.iter('*'):\n    if \"returnval\" in element.tag:\n        print(\"Task is: {}\".format(element.text))\n# endregion\n\n# region logout\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Logout>\n         <_this type=\"SessionManager\">SessionManager</_this>\n      </Logout>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\nexit(0)"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "VcSoapMoveVmFolder"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "cabdfc53-6fc2-492c-9006-1fd6ff49fb03",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "0b51f608_dag",
                  "uuid": "7666cba0-dd2f-48e0-9630-72b8fd35e1e7"
                },
                "name": "90dbfa0f_runbook"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "7fc4dab0-80f9-4b4f-b394-ad4601818f7e",
              "name": "VcDelFolder",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "0b871bf2-726c-4955-bb7f-5688d7791258",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=VcSoapMoveVmFolder; uuid=550d1b1b-af97-49af-83fc-b0f4175bce33}",
                      "@{kind=app_task; name=VcSoapVmDelFolder; uuid=be2df8b9-4f84-4c9b-8744-c1fea076264e}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "2a52713a_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "550d1b1b-af97-49af-83fc-b0f4175bce33",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       10/03/2020\n# task_name:    VcSoapMoveVmFolder\n# description:  Move a VM in a folder\n# input vars:   vc_cookie, api_server, vm_folder_id, vm_id\n# output vars:  none\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\nvm_folder_id = \"@@{vc_vm_folder_root_id}@@\" # root folder used during deletion\napi_server = \"@@{vc_endpoint}@@\"\nvm_id = \"@@{vc_vm_id}@@\" #retreived from VcSoapGetObjects\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload):\n    r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status Code: {}\".format(r))\n    else:\n        print(\"Request failed\")\n        print(\"Status Code: {}\".format(r))\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(payload))\n        print(\"Response: {}\".format(r.text))\n        resp_parse = ET.fromstring(r.text)\n        for element in resp_parse.iter('*'):\n          if \"faultstring\" in element.tag:\n            print(\"\")\n            print(\"Error: {}\".format(element.text))\n            break\n        exit(1)\n    return r\n# endregion\n\n# region login\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml'}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Login>\n         <_this type=\"SessionManager\">SessionManager</_this>\n         <userName>'''+username+'''</userName>\n         <password>'''+password+'''</password>\n      </Login>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# retreive the cookie\nvc_cookie = resp.headers.get('Set-Cookie').replace('\"','').split(\";\")[0]\n# endregion \n\n# region main processing\n# region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n# endregion\n\n# region move vm to folder\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n    <soapenv:Body>\n        <MoveIntoFolder_Task>\n            <_this type=\"Folder\">'''+vm_folder_id+'''</_this>\n        </MoveIntoFolder_Task>\n    </soapenv:Body>\n</soapenv:Envelope>'''\n\n# add vm to the payload\npayload_parse = ET.fromstring(payload)\npayload_find = payload_parse.find(\".//{urn:vim25}MoveIntoFolder_Task\")\npayload_push = ET.SubElement(payload_find,\"list\")\npayload_push.attrib[\"type\"] = \"VirtualMachine\"\npayload_push.text = vm_id\npayload = ET.tostring(payload_parse)\n\n# making the call\nprint(\"STEP: Moving vm to folder...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\n# print the task id\nresp_parse = ET.fromstring(resp.text)\nfor element in resp_parse.iter('*'):\n    if \"returnval\" in element.tag:\n        print(\"Task is: {}\".format(element.text))\n# endregion\n\n# region logout\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Logout>\n         <_this type=\"SessionManager\">SessionManager</_this>\n      </Logout>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\nexit(0)"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "VcSoapMoveVmFolder"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "be2df8b9-4f84-4c9b-8744-c1fea076264e",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       10/03/2020\n# task_name:    VcSoapDeleteFolder\n# description:  Delete a VM Folder \n#               IMPORTANT: All VMs has to be moved from the folder\n#               before deletion, otherwise the folder won't be deleted\n# input vars:   vc_cookie, api_server, vm_folder_id\n# output vars:  none\n# endregion\n\n# region dealing with Scaling In/Out the application\n# # this script will be executed only on the first Service/Instance\n# (ie: Service[0])\nif \"@@{calm_array_index}@@\" != \"0\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\nvm_folder_id = \"@@{vc_vm_folder_id}@@\" #retreived from VcSoapGetObjects\napi_server = \"@@{vc_endpoint}@@\"\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload):\n    r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status Code: {}\".format(r))\n    else:\n        print(\"Request failed\")\n        print(\"Status Code: {}\".format(r))\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(payload))\n        print(\"Response: {}\".format(r.text))\n        resp_parse = ET.fromstring(r.text)\n        for element in resp_parse.iter('*'):\n          if \"faultstring\" in element.tag:\n            print(\"\")\n            print(\"Error: {}\".format(element.text))\n            break\n        exit(1)\n    return r\n# endregion\n\n# region login\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml'}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Login>\n         <_this type=\"SessionManager\">SessionManager</_this>\n         <userName>'''+username+'''</userName>\n         <password>'''+password+'''</password>\n      </Login>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# retreive the cookie\nvc_cookie = resp.headers.get('Set-Cookie').replace('\"','').split(\";\")[0]\n# endregion\n\n# region main processing\n# region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n#endregion\n\n# region delete the folder\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">  \n  <soapenv:Body>\n    <Destroy_Task>\n      <_this type=\"Folder\">'''+vm_folder_id+'''</_this>\n    </Destroy_Task>\n  </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the call\nprint(\"STEP: Deleting vm folder...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n#endregion\n\n# print the task id\nresp_parse = ET.fromstring(resp.text)\nfor element in resp_parse.iter('*'):\n    if \"returnval\" in element.tag:\n        print(\"Task is: {}\".format(element.text))\n# endregion\n\n# region logout\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Logout>\n         <_this type=\"SessionManager\">SessionManager</_this>\n      </Logout>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\nexit(0)"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "VcSoapVmDelFolder"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "dfd5837e-f8b3-4315-b2c5-9afa8807a7a4",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "2a52713a_dag",
                  "uuid": "0b871bf2-726c-4955-bb7f-5688d7791258"
                },
                "name": "9aa10176_runbook"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "405307c9-b7c5-4b72-bc17-bda33c77c4fe",
              "name": "VcAddTag",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "a5cbee67-f531-43c0-8f0c-0f4289511249",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=VcRestCreateTag; uuid=a46d999f-51a2-40a7-aec0-0909700cadfa}",
                      "@{kind=app_task; name=VcRestTagAssociation; uuid=10fb3ca4-fa63-421d-9ec5-2886eebe3635}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "13262e11_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "a46d999f-51a2-40a7-aec0-0909700cadfa",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       10/03/2020\n# task_name:    VcRestCreateTag\n# description:  Create a vCenter Tag\n#               Important: A category needs to be created first\n#               The script creates a Category and a Tag\n# input vars:   vc_cookie, api_server, vc_category_name, vc_tag_name\n#               vc_category_description, vc_tag_description\n# output vars:  vc_tag_id, vc_category_id\n# endregion\n\n# region dealing with Scaling In/Out the application\n# # this script will be executed only on the first Service/Instance\n# (ie: Service[0])\nif \"@@{calm_array_index}@@\" != \"0\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\napi_server = \"@@{vc_endpoint}@@\"\nvc_category_name = \"@@{jira_parent_ticket}@@\"\nvc_category_description = \"@@{jira_parent_ticket}@@ - Provisionned Through Calm\"\nvc_tag_name = \"@@{jira_parent_ticket}@@\"\nvc_tag_description = \"@@{jira_parent_ticket}@@ - Provisionned Through Calm\"  \n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n        if (r.content and ('/rest/com/vmware/cis/session' not in url)):\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n    elif ((r.status_code == 400) and (json.loads(r.content)['type'] == 'com.vmware.vapi.std.errors.already_exists')):\n        print(\"Status code: {}\".format(r.status_code))\n        print(\"Object already exists: skipping\")\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/com/vmware/cis/session\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\nvc_cookie = resp.headers.get('Set-Cookie').split(\";\")[0]\n# endregion\n\n# prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/com/vmware/cis/tagging\"\nmethod = \"POST\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Cookie': vc_cookie}\n\npayload = {\n\"create_spec\": {\n    \"associable_types\": [],\n    \"cardinality\": \"SINGLE\",\n    \"description\": vc_category_description,\n    \"name\": vc_category_name\n    }\n}\n\n# make the api call\nprint(\"STEP: Creating category...\")\nurl = \"{}/category\".format(base_url)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\nif resp.status_code == 400:\n    # category already exists, so we need to get its object id\n    method = \"GET\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    categories = process_request(url, method, headers)\n    categories_parsed = json.loads(categories.content)\n    vc_category_id = \"\"\n    for category in categories_parsed['value']:\n        category_url = \"{}/id:{}\".format(url,category)\n        print(\"Making a {} API call to {}\".format(method, category_url))\n        category_object = process_request(category_url, method, headers)\n        category_parse = json.loads(category_object.content)\n        if category_parse['value']['name'] == vc_category_name:\n            vc_category_id = category_parse['value']['id']\n            break\nelse:\n    vc_category_id = format(json.loads(resp.content)['value'])\n# endregion\n\n# region create vcenter tag\npayload = {\n\"create_spec\": {\n    \"category_id\": vc_category_id,\n    \"description\": vc_tag_description,\n    \"name\": vc_tag_name\n    }\n}\n\n# make the api call\nprint(\"STEP: Creating tag...\")\nurl = \"{}/tag\".format(base_url)\nmethod = \"POST\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\nif resp.status_code == 400:\n    # category already exists, so we need to get its object id\n    method = \"GET\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    tags = process_request(url, method, headers)\n    tags_parsed = json.loads(tags.content)\n    vc_tag_id = \"\"\n    for tag in tags_parsed['value']:\n        tag_url = \"{}/id:{}\".format(url,tag)\n        print(\"Making a {} API call to {}\".format(method, category_url))\n        tag_object = process_request(tag_url, method, headers)\n        tag_parse = json.loads(tag_object.content)\n        if tag_parse['value']['name'] == vc_tag_name:\n            vc_tag_id = tag_parse['value']['id']\n            break\nelse:\n    vc_tag_id = format(json.loads(resp.content)['value'])\n#endregion\n\n# pass the created tag in vc_tag_id so that it may be captured by Calm.\nprint(\"vc_category_id={}\".format(vc_category_id))\nprint(\"vc_tag_id={}\".format(vc_tag_id))\n# endregion\n\n# region logout\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/com/vmware/cis/session\"\nmethod = \"DELETE\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Cookie': vc_cookie}\n\n# making the call \nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n# endregion\n\nexit(0)",
                      "eval_variables": "vc_tag_id vc_category_id",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "VcRestCreateTag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "10fb3ca4-fa63-421d-9ec5-2886eebe3635",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       10/03/2020\n# task_name:    VcRestTagAssociation\n# description:  Attach or Detach a tag from/to one VM\n# input vars:   vc_cookie, api_server, vc_tag_id, vc_tag_action, vm_id\n# output vars:  none\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\napi_server = \"@@{vc_endpoint}@@\"\nvc_tag_id= \"@@{calm_array_vc_tag_id}@@\" # retreived from VcRestCreateTag\nvc_tag_action = \"attach\" #attach / detach\nvm_id = \"@@{vc_vm_id}@@\" #retreived from VcSoapGetObjects\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n        if (r.content and ('/rest/com/vmware/cis/session' not in url)):\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n    elif ((r.status_code == 400) and (json.loads(r.content)['type'] == 'com.vmware.vapi.std.errors.already_exists')):\n        print(\"Status code: {}\".format(r.status_code))\n        print(\"Object already exists: skipping\")\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/com/vmware/cis/session\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\nvc_cookie = resp.headers.get('Set-Cookie').split(\";\")[0]\n# endregion\n\n# region main processing\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/com/vmware/cis/tagging/tag-association/id\"\nmethod = \"POST\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Cookie': vc_cookie}\n# endregion\n\n# region tag association\nobject_id = {}\nobject_id['id'] = vm_id\nobject_id['type'] = \"VirtualMachine\"\npayload = {\n    \"object_id\" : object_id\n    }\n\n# make the api call\nprint(\"STEP: Doing tag attach/detach...\")\nurl = \"{0}:{1}?~action={2}\".format(base_url, vc_tag_id, vc_tag_action)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n#endregion\n#endregion\n\n# region logout\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/com/vmware/cis/session\"\nmethod = \"DELETE\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Cookie': vc_cookie}\n\n# making the call \nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n# endregion\n\nexit(0)"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "VcRestTagAssociation"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "1276856a-6bd3-4732-a077-7a214aa79723",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "13262e11_dag",
                  "uuid": "a5cbee67-f531-43c0-8f0c-0f4289511249"
                },
                "name": "3dcfda7d_runbook"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "8ce9668a-00e8-4004-8418-e1672439ab8d",
              "name": "VcDelTag",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "11256928-8898-4604-bd7b-660c93f6878b",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=VcRestDeleteTag; uuid=2c78086b-882d-4008-98ed-806ab9ef0b2a}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "4709d404_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "2c78086b-882d-4008-98ed-806ab9ef0b2a",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "#script\n# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       10/03/2020\n# task_name:    VcRestDeleteTag\n# description:  Deletes a tag\n#               This script deletes a tag and his associated category\n# input vars:   vc_cookie, api_server, vc_tag_id, vc_category_id\n# output vars:  none\n# endregion\n\n# region dealing with Scaling In/Out the application\n# # this script will be executed only on the first Service/Instance\n# (ie: Service[0])\nif \"@@{calm_array_index}@@\" != \"0\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\napi_server = \"@@{vc_endpoint}@@\"\nvc_tag_id = \"@@{vc_tag_id}@@\" #retreived from VcRestCreateTag\nvc_category_id = \"@@{vc_category_id}@@\" #retreived from VcRestCreateTag\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n        if (r.content and ('/rest/com/vmware/cis/session' not in url)):\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n    elif ((r.status_code == 400) and (json.loads(r.content)['type'] == 'com.vmware.vapi.std.errors.already_exists')):\n        print(\"Status code: {}\".format(r.status_code))\n        print(\"Object already exists: skipping\")\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        #print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/com/vmware/cis/session\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\nvc_cookie = resp.headers.get('Set-Cookie').split(\";\")[0]\n# endregion\n\n# region main processing\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/com/vmware/cis/tagging\"\nmethod = \"DELETE\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Cookie': vc_cookie}\npayload = {}\n#endregion\n\n# region delete tag\nprint(\"STEP: Deleting tag...\")\nurl = '{0}/tag/id:{1}'.format(base_url,vc_tag_id)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\n# region delete category\nprint(\"STEP: Deleting category...\")\nurl = '{0}/category/id:{1}'.format(base_url,vc_category_id)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n# endregion\n\n# region logout\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/com/vmware/cis/session\"\nmethod = \"DELETE\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Cookie': vc_cookie}\n\n# making the call \nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n# endregion\n\nexit(0)"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "VcRestDeleteTag"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "162e4010-912e-40f9-9321-5c2e5a969c3d",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "4709d404_dag",
                  "uuid": "11256928-8898-4604-bd7b-660c93f6878b"
                },
                "name": "65d2b330_runbook"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "3e48c5c4-59af-481b-af30-e766cf9bf283",
              "name": "VcAddDrsRules",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "0bc259cc-5b7f-45fa-ba7d-d91f6db52a19",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=VcSoapCreateVmDrsRules; uuid=83b52cf5-2533-4274-9f97-5a4265ec7409}",
                      "@{kind=app_task; name=VcSoapUpdateVmDrsRules; uuid=f98e0916-56d7-4034-abed-1dd4365e97cf}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "546301a1_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "83b52cf5-2533-4274-9f97-5a4265ec7409",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       10/03/2020\n# task_name:    VcSoapCreateVmDrsRules\n# description:  Create a ClusterAntiAffinity Rules (Separate VMs)\n#               The rules creation requires at least 2 VMs\n# input vars:   vc_cookie, api_server, cluster_id, vms_id\n#               drs_rule_name, drs_operation,\n# output vars:  none\n# endregion\n\n# region dealing with Scaling In/Out the application\n# this script will be executed only on the second Service/Instance\n# (ie: Service[1])\nif \"@@{calm_array_index}@@\" != \"1\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\ncluster_id = \"@@{vc_cluster_id}@@\" #retreived from VcGSoapetObjects\ndrs_rule_name = \"@@{calm_application_name}@@\"\ndrs_operation = \"add\" #add / edit / remove\napi_server = \"@@{vc_endpoint}@@\"\nvms_id = \"@@{calm_array_vc_vm_id}@@\"\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload):\n    r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status Code: {}\".format(r))\n    else:\n        print(\"Request failed\")\n        print(\"Status Code: {}\".format(r))\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(payload))\n        print(\"Response: {}\".format(r.text))\n        resp_parse = ET.fromstring(r.text)\n        for element in resp_parse.iter('*'):\n          if \"faultstring\" in element.tag:\n            print(\"\")\n            print(\"Error: {}\".format(element.text))\n            break\n        exit(1)\n    return r\n# endregion\n\n# region login\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml'}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Login>\n         <_this type=\"SessionManager\">SessionManager</_this>\n         <userName>'''+username+'''</userName>\n         <password>'''+password+'''</password>\n      </Login>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# retreive the cookie\nvc_cookie = resp.headers.get('Set-Cookie').replace('\"','').split(\";\")[0]\n# endregion\n\n# region main processing\n# region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n# endregion\n\n# region create the drs rules\npayload ='''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> \n  <soapenv:Body> \n    <ReconfigureComputeResource_Task>  \n      <_this type=\"ClusterComputeResource\">'''+cluster_id+'''</_this>  \n      <spec xsi:type=\"ClusterConfigSpecEx\">  \n        <rulesSpec> \n          <operation>'''+drs_operation+'''</operation>\n          <info xsi:type=\"ClusterAntiAffinityRuleSpec\"> \n            <enabled>true</enabled>  \n            <name>'''+drs_rule_name+'''</name>  \n            <userCreated>true</userCreated>\n          </info> \n        </rulesSpec>  \n      </spec>  \n      <modify>true</modify> \n    </ReconfigureComputeResource_Task> \n  </soapenv:Body> \n</soapenv:Envelope>'''\n\n# add vms to the payload\npayload_parse = ET.fromstring(payload)\npayload_find = payload_parse.find(\".//{urn:vim25}info\")\nfor vm in vms_id.split(\",\"):\n    payload_push = ET.SubElement(payload_find,\"vm\")\n    payload_push.attrib[\"type\"] = \"VirtualMachine\"\n    payload_push.text = vm\npayload = ET.tostring(payload_parse)\n\n# making the call\nprint(\"STEP: Creating anti-affinity drs rules for vms...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\n# print the task id\nresp_parse = ET.fromstring(resp.text)\nfor element in resp_parse.iter('*'):\n    if \"returnval\" in element.tag:\n        print(\"Task is: {}\".format(element.text))\n# endregion\n\n# region logout\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Logout>\n         <_this type=\"SessionManager\">SessionManager</_this>\n      </Logout>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\nexit (0)"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "VcSoapCreateVmDrsRules"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "f98e0916-56d7-4034-abed-1dd4365e97cf",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# * author:     igor.zecevic@nutanix.com, stephane.bourdeaud@nutanix.com\n# * version:    v1.0 - initial version (igor)\n# *             v1.1 - added login/logout (stephane)\n# * date:       17/03/2020\n# task_name:    VcSoapUpdateVmDrsRules\n# description:  Update a ClusterAntiAffinity Rules (Separate VMs)\n#               This script retreives an existing drs rules and update it\n#               Add a VM into an existing drs rules using drs_vm_update=add\n#               Remove a VM from an existing drs rules using drs_vm_update=remove\n# input vars:   vc_cookie, api_server, cluster_id, vm_id\n#               drs_rule_name, drs_operation, drs_vm_update\n# output vars:  none\n# endregion\n\n# region dealing with Scaling In/Out the application\nnb_replicas = str(len(\"@@{calm_array_name}@@\".split(\",\")) - 1)\nif ((\"@@{calm_array_index}@@\" != nb_replicas) or (\"@@{calm_array_index}@@\" < \"2\")):\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\ncluster_id = \"@@{vc_cluster_id}@@\" #retreived from VcSoapGetObjects\ndrs_rule_name = \"@@{calm_application_name}@@\"\ndrs_operation = \"edit\" #add / edit / remove\ndrs_vm_update = \"add\" #add or remove VM from drsrules\napi_server = \"@@{vc_endpoint}@@\"\nvm_id = \"@@{vc_vm_id}@@\"  #retreived from VcSoapGetObjects\nref_vm_list = \"@@{calm_array_vc_vm_id}@@\".split(\",\")\n# endregion\n\n#region API call function\ndef process_request(url, method, headers, payload):\n    r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status Code: {}\".format(r))\n    else:\n        print(\"Request failed\")\n        print(\"Status Code: {}\".format(r))\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(payload))\n        print(\"Response: {}\".format(r.text))\n        resp_parse = ET.fromstring(r.text)\n        for element in resp_parse.iter('*'):\n          if \"faultstring\" in element.tag:\n            print(\"\")\n            print(\"Error: {}\".format(element.text))\n            break\n        exit(1)\n    return r\n#endregion\n\n#region login\n#region prepare login API call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml'}\n#endregion\n\n#region login API call\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Login>\n         <_this type=\"SessionManager\">SessionManager</_this>\n         <userName>'''+username+'''</userName>\n         <password>'''+password+'''</password>\n      </Login>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# pass the cookie in vc_soap_session so that it may be captured by Calm.\nvc_cookie = resp.headers.get('Set-Cookie').replace('\"','').split(\";\")[0]\n#endregion\n#endregion\n\n#region main processing\n# region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n# endregion\n\n# region get application drs rules\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n   <soapenv:Body> \n    <RetrieveProperties>  \n      <_this xsi:type=\"ManagedObjectReference\" type=\"PropertyCollector\">propertyCollector</_this>  \n      <specSet> \n        <propSet> \n          <type>ClusterComputeResource</type>  \n          <all>false</all>  \n          <pathSet>configuration.rule</pathSet>\n        </propSet>  \n        <objectSet> \n          <obj xsi:type=\"ManagedObjectReference\" type=\"ClusterComputeResource\">'''+cluster_id+'''</obj>  \n          <skip>false</skip> \n        </objectSet> \n      </specSet> \n    </RetrieveProperties> \n  </soapenv:Body> \n</soapenv:Envelope>'''\n\n# make the api call\nprint(\"STEP: Fetching drs rule...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# getting drs rules\nresp_parse = ET.fromstring(resp.text)\npayload_find = resp_parse.findall(\".//{urn:vim25}ClusterRuleInfo\")\nfor element in payload_find:\n    for name in element.findall(\"{urn:vim25}name\"):\n        if name.text == drs_rule_name:\n            print(\"Found DRS rule: {}\".format(name.text))\n            vm_list = []\n            drs_rule_key = format(element.find(\"{urn:vim25}key\").text)\n            drs_rule_element = element #this element will be pushed to the update drs rules\n            for vm in element.findall(\"{urn:vim25}vm\"):\n                print(\"This vm is a member of the drs rule: {}\".format(vm.text))\n                vm_list.append(vm.text)\n\nvms_to_add = list(set(ref_vm_list) - set(vm_list))\nprint(\"The following vms are not in DRS: {}\".format(vms_to_add))\ntry:\n    drs_rule_key\n    drs_rule_element\nexcept:\n    for element in payload_find:\n        for name in element.findall(\"{urn:vim25}name\"):\n            print(\"Existing DRS rule: {}\".format(name.text))\n    print(\"Could not find drs rule!\")\n    exit(1)\n# endregion\n\n# region update drs rules\npayload ='''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> \n  <soapenv:Body> \n    <ReconfigureComputeResource_Task>  \n      <_this type=\"ClusterComputeResource\">'''+cluster_id+'''</_this>\n        <spec xsi:type=\"ClusterConfigSpecEx\">\n          <rulesSpec> \n            <operation>'''+drs_operation+'''</operation>\n          </rulesSpec>  \n        </spec>  \n      <modify>true</modify> \n    </ReconfigureComputeResource_Task> \n  </soapenv:Body> \n</soapenv:Envelope>'''\n\n# push the retreived drs_rule_obj into the payload\npayload_parse = ET.fromstring(payload)\npayload_find = payload_parse.find(\".//{urn:vim25}rulesSpec\")\npayload_push = ET.SubElement(payload_find,\"info\")\npayload_push.attrib[\"xsi:type\"]=\"ClusterAntiAffinityRuleSpec\"\nfor element in drs_rule_element:\n    payload_push.append(element)\n\n# push the drs_vm_update to the payload (either add or delete vm)\nif drs_vm_update == \"add\":\n      for vm in vms_to_add:\n            print (\"Adding vm {}\".format(vm))\n            vm_push = ET.SubElement(payload_push,\"vm\")\n            vm_push.attrib[\"type\"]=\"VirtualMachine\"\n            vm_push.text = vm\nelif drs_vm_update == \"remove\":\n  for element in drs_rule_element:\n      if element.text == vm_id:\n        payload_push.remove(element)\n\n# make the api call\nprint(\"STEP: Updating drs rule...\")\npayload = ET.tostring(payload_parse)\n#print(\"payload: {}\".format(payload))\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n# endregion\n\n#region logout\n#region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n#endregion\n\n#region logout API call\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Logout>\n         <_this type=\"SessionManager\">SessionManager</_this>\n      </Logout>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n#endregion\n#endregion\n\nexit(0)"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "VcSoapUpdateVmDrsRules"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "acb3f650-9ccd-4171-8708-09d8dd81cc71",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "546301a1_dag",
                  "uuid": "0bc259cc-5b7f-45fa-ba7d-d91f6db52a19"
                },
                "name": "895cec1a_runbook"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "3cf683d5-4632-45c2-b86e-6a48bbfe3ae0",
              "name": "VcDelDrsRules",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "6949fed1-53d0-4e0d-abf0-0de0a5a77180",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=VcSoapDeleteVmDrsRules; uuid=41184774-07b6-4f99-aa35-677a37bb0b81}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "aa79d30e_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "41184774-07b6-4f99-aa35-677a37bb0b81",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       10/03/2020\n# task_name:    VcSoapDeleteVmDrsRules\n# description:  Deletes a ClusterAntiAffinityRules (Separates VMs)\n#               This script retreives an existing drs rules and deletes it           \n# input vars:   vc_cookie, api_server, cluster_id, vms_id\n#               drs_rule_name, drs_operation, vms_id\n# output vars:  none\n# endregion\n\n# region dealing with Scaling In/Out the application\n# this script will be executed only on the second Service/Instance\n# (ie: Service[1])\nif \"@@{calm_array_index}@@\" != \"1\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\ncluster_id = \"@@{vc_cluster_id}@@\" #retreived from VcSoapGetObjects\ndrs_rule_name = \"@@{calm_application_name}@@\"\ndrs_operation = \"remove\" #add / edit / remove\napi_server = \"@@{vc_endpoint}@@\"\nvms_id = \"@@{calm_array_vc_vm_id}@@\"\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload):\n    r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status Code: {}\".format(r))\n    else:\n        print(\"Request failed\")\n        print(\"Status Code: {}\".format(r))\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(payload))\n        print(\"Response: {}\".format(r.text))\n        resp_parse = ET.fromstring(r.text)\n        for element in resp_parse.iter('*'):\n          if \"faultstring\" in element.tag:\n            print(\"\")\n            print(\"Error: {}\".format(element.text))\n            break\n        exit(1)\n    return r\n# endregion\n\n# region login\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml'}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Login>\n         <_this type=\"SessionManager\">SessionManager</_this>\n         <userName>'''+username+'''</userName>\n         <password>'''+password+'''</password>\n      </Login>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# retreive the cookie\nvc_cookie = resp.headers.get('Set-Cookie').replace('\"','').split(\";\")[0]\n# endregion\n\n# region main processing\n# region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n# endregion\n\n# region get application drs rules\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n   <soapenv:Body> \n    <RetrieveProperties>  \n      <_this xsi:type=\"ManagedObjectReference\" type=\"PropertyCollector\">propertyCollector</_this>  \n      <specSet> \n        <propSet> \n          <type>ClusterComputeResource</type>  \n          <all>false</all>  \n          <pathSet>configuration.rule</pathSet>\n        </propSet>  \n        <objectSet> \n          <obj xsi:type=\"ManagedObjectReference\" type=\"ClusterComputeResource\">'''+cluster_id+'''</obj>  \n          <skip>false</skip> \n        </objectSet> \n      </specSet> \n    </RetrieveProperties> \n  </soapenv:Body> \n</soapenv:Envelope>'''\n\n# make the api call\nprint(\"STEP: Fetching drs rule...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# getting drs rules\nresp_parse = ET.fromstring(resp.text)\npayload_find = resp_parse.findall(\".//{urn:vim25}ClusterRuleInfo\")\nfor element in payload_find:\n    for name in element.findall(\"{urn:vim25}name\"):\n        if name.text == drs_rule_name:\n            drs_rule_key = format(element.find(\"{urn:vim25}key\").text)\n# endregion\n\n# region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n# endregion\n\n# region delete drs rules\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> \n  <soapenv:Body> \n    <ReconfigureComputeResource_Task>  \n      <_this type=\"ClusterComputeResource\">'''+cluster_id+'''</_this>  \n        <spec xsi:type=\"ClusterConfigSpecEx\">  \n        <rulesSpec> \n          <operation>'''+drs_operation+'''</operation>\n          <removeKey xsi:type=\"int\">'''+drs_rule_key+'''</removeKey>\n          <info xsi:type=\"ClusterAntiAffinityRuleSpec\">\n            <enabled>true</enabled>   \n            <userCreated>true</userCreated>\n          </info> \n        </rulesSpec>  \n      </spec>  \n      <modify>true</modify> \n    </ReconfigureComputeResource_Task> \n  </soapenv:Body> \n</soapenv:Envelope>'''\n# endregion\n\n# region add vms to the payload\npayload_parse = ET.fromstring(payload)\npayload_find = payload_parse.find(\".//{urn:vim25}info\")\nfor vm in vms_id.split(\",\"):\n    payload_push = ET.SubElement(payload_find,\"vm\")\n    payload_push.attrib[\"type\"] = \"VirtualMachine\"\n    payload_push.text = vm\npayload = ET.tostring(payload_parse)\n\n# make the api call\nprint(\"STEP: Deleting drs rule...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\n# print the task id\nfor element in resp_parse.iter('*'):\n    if \"returnval\" in element.tag:\n        print(\"Task is: {}\".format(element.text))\n#endregion\n\n# region logout\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Logout>\n         <_this type=\"SessionManager\">SessionManager</_this>\n      </Logout>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\nexit (0)"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "VcSoapDeleteVmDrsRules"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "6b691bc1-a3db-4351-a90f-c9c7168b588e",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "aa79d30e_dag",
                  "uuid": "6949fed1-53d0-4e0d-abf0-0de0a5a77180"
                },
                "name": "e7f388fd_runbook"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "00c81001-b2d4-43e2-8c55-dce232a19033",
              "name": "VeeamCreateJob",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "76125231-221a-476d-856d-10eb589b1cbf",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=VeeamGetHierarchyRoots; uuid=b36a5f71-d158-42e7-b529-55d022527d7e}",
                      "@{kind=app_task; name=VeeamGetRepository; uuid=f95cd2f0-f2b8-49c0-af48-8daefee080e8}",
                      "@{kind=app_task; name=VeeamCloneJob; uuid=2622235c-f86e-4a28-90f9-2dbe4512d81c}",
                      "@{kind=app_task; name=VeeamEditJob; uuid=ba8c3260-6ffc-46bc-8bf8-1ee214100985}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "  ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "77f0eedb_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "b36a5f71-d158-42e7-b529-55d022527d7e",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       11/03/2020\n# task_name:    VeeamGetHierarchyRoots\n# description:  Get the hierarchyRoot UID\n#               The script retreives the hierarchyRoots UID\n# input vars:   vc_server, api_server, username, password\n# output vars:  veeam_hierarchyroot_uid\n# endregion\n\n# region dealing with Scaling In/Out the application\n# # this script will be executed only on the first Service/Instance\n# (ie: Service[0])\nif \"@@{calm_array_index}@@\" != \"0\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{veeam.username}@@\"\npassword = \"@@{veeam.secret}@@\"\napi_server = \"@@{veeam_endpoint}@@\"\nvc_server = \"@@{vc_endpoint}@@\"\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/sessionMngr/?v=latest\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to Veeam...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the session_cookie and session_id\nresp_parse = json.loads(resp.content)\nveeam_session_cookie = resp.headers.get('X-RestSvcSessionId')\nveeam_session_id = resp_parse['SessionId']\n# endregion\n\n# region main processing\n# region prepare api call\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/hierarchyRoots\"\nmethod = \"GET\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n# endregion\n\n# region get hierarchyroot (managed vcenter server)\n# make the api call\nprint(\"STEP: Gettings hiearchyroots...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the repo_uid so that it may be captured by Calm.\nobj_uid = \"\"\nresp_parse = json.loads(resp.content)\nfor obj in resp_parse['Refs']:\n    if obj['Name'] == vc_server:\n                obj_uid = obj['UID']               \nif obj_uid:\n    print (\"veeam_hierarchyroot_uid={}\".format(obj_uid.rsplit(':', 1)[1]))\nelse:\n    print(\"Error: Managed Server \"+vc_server+\" is not present ..\")\n    exit(1)\n# endregion\n# endregion\n\n# region logout\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/logonSessions\"\nmethod = \"DELETE\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n\n# making the call \nprint(\"STEP: Logging out of Veeam...\")\nurl = \"{0}/{1}\".format(url, veeam_session_id)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n# endregion\n\nexit(0)",
                      "eval_variables": "veeam_hierarchyroot_uid",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "VeeamGetHierarchyRoots"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "f95cd2f0-f2b8-49c0-af48-8daefee080e8",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       11/03/2020\n# task_name:    VeeamGetRepository\n# description:  Get Repository UID\n#               The script retreives the repository uid\n#               based on the provided repository's name\n# input vars:   veeam_job_name, username, password\n#               veeam_repo_name, api_server\n# output vars:  veeam_repo_uid\n# endregion\n\n# region dealing with Scaling In/Out the application\n# # this script will be executed only on the first Service/Instance\n# (ie: Service[0])\nif \"@@{calm_array_index}@@\" != \"0\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{veeam.username}@@\"\npassword = \"@@{veeam.secret}@@\"\nveeam_repo_name = \"@@{veeam_repo_name}@@\"\napi_server = \"@@{veeam_endpoint}@@\"\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/sessionMngr/?v=latest\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to Veeam...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the session_cookie and session_id\nresp_parse = json.loads(resp.content)\nveeam_session_cookie = resp.headers.get('X-RestSvcSessionId')\nveeam_session_id = resp_parse['SessionId']\n# endregion\n\n# region main processing\n# region prepare api call\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/repositories\"\nmethod = \"GET\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n# endregion\n\n# region get repositories\n# make the api call\nprint(\"STEP: Gettings repositories...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the repo_uid so that it may be captured by Calm.\nrepo_uid = \"\"\nresp_parse = json.loads(resp.content)\nfor repo in resp_parse['Refs']:\n    if repo['Name'] == veeam_repo_name:\n                repo_uid = repo['UID']\n                \nif repo_uid:\n    print (\"veeam_repo_uid={}\".format(repo_uid))\nelse:\n    print(\"Error: Repository \"+veeam_repo_name+\" is not present ..\")\n    exit(1)\n# endregion\n# endregion\n\n# region logout\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/logonSessions\"\nmethod = \"DELETE\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n\n# making the call \nprint(\"STEP: Logging out of Veeam...\")\nurl = \"{0}/{1}\".format(url, veeam_session_id)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n# endregion\n\nexit(0)",
                      "eval_variables": "veeam_repo_uid",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "VeeamGetRepository"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "2622235c-f86e-4a28-90f9-2dbe4512d81c",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       11/03/2020\n# task_name:    VeeamCloneJob\n# description:  Clone a Veeam Job\n#               The script clones a Veeam Job using the \n#               the veeam_job_url and veeam_repo_uid found\n#               on the VeeamGetJob and VeeamGetRepository\n# input vars:   username, password veeam_job_url\n#               veeam_job_name, veeam_repo_uid, api_server\n# output vars:  none\n# endregion\n\n# region dealing with Scaling In/Out the application\n# # this script will be executed only on the first Service/Instance\n# (ie: Service[0])\nif \"@@{calm_array_index}@@\" != \"0\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{veeam.username}@@\"\npassword = \"@@{veeam.secret}@@\"\nveeam_job_name = \"@@{calm_application_name}@@\"  # getting the calm apps job\nveeam_job_template_name = \"@@{veeam_job_template_name}@@\" # getting the template job on veeam\nveeam_repo_uid = \"@@{veeam_repo_uid}@@\"\nveeam_job_name = \"@@{calm_application_name}@@\"\napi_server = \"@@{veeam_endpoint}@@\"\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/sessionMngr/?v=latest\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to Veeam...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the session_cookie and session_id\nresp_parse = json.loads(resp.content)\nveeam_session_cookie = resp.headers.get('X-RestSvcSessionId')\nveeam_session_id = resp_parse['SessionId']\n# endregion\n\n# region main processing\n# region prepare api call\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/jobs\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n# endregion\n\n# region get job\n# make the api call\nprint(\"STEP: Gettings jobs...\")\nmethod = \"GET\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# get the job_url\njob_url = \"\"\nresp_parse = json.loads(resp.content)\nfor job in resp_parse['Refs']:\n    if job['Name'] == veeam_job_template_name:\n        job_url = job['Href']\n                \nif job_url:\n    veeam_job_url=job_url.rsplit('/', 1)[1] #get only the last occurence\nelse:\n    print(\"Error: Backup Job \"+veeam_job_template_name+\" is not present ..\")\n    exit(1)\n# endregion\n\n# region clone job\npayload = {\n   \"BackupJobCloneInfo\": {\n      \"JobName\": veeam_job_name,\n      \"FolderName\": veeam_job_name,\n      \"RepositoryUid\": veeam_repo_uid,\n      \"Description\": \"This job was created by CALM\"\n   }\n}\n\n# make the api call\nprint(\"STEP: Clone job ...\")\nmethod = \"POST\"\nurl = \"{0}/{1}?action=clone\".format(url, veeam_job_url)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\n# pass the task_id so that it may be captured by Calm.\nresp_parse = json.loads(resp.content)\ntask_id = resp_parse['TaskId']\nprint (\"veeam_task_id={}\".format(task_id))\n# endregion\n# endregion\n\n# region logout\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/logonSessions\"\nmethod = \"DELETE\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n\n# making the call \nprint(\"STEP: Logging out of Veeam...\")\nurl = \"{0}/{1}\".format(url, veeam_session_id)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n# endregion\n\nexit(0)",
                      "eval_variables": "veeam_task_id",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "VeeamCloneJob"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "ba8c3260-6ffc-46bc-8bf8-1ee214100985",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       11/03/2020\n# task_name:    VeeamEditJob\n# description:  Edit a Veeam Job\n#               The script edits a Veeam Job using the \n#               the veeam_job_url found on VeeamGetJob\n#               and attach a category_id found on \n#               VcRestGetCategory\n# input vars:   username, password, veeam_start_url,\n#               veeam_job_name, vc_category_name,\n# #             vc_category_id, api_server\n# output vars:  none\n# endregion\n\n# region dealing with Scaling In/Out the application\n# # this script will be executed only on the first Service/Instance\n# (ie: Service[0])\nif \"@@{calm_array_index}@@\" != \"0\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{veeam.username}@@\"\npassword = \"@@{veeam.secret}@@\"\nveeam_job_name = \"@@{calm_application_name}@@\"  # getting the calm apps job\nveeam_hierarchyroot_uid = \"@@{veeam_hierarchyroot_uid}@@\"\nveeam_job_daily_schedule = \"@@{veeam_job_daily_schedule}@@\"\nvc_category_id = \"@@{calm_array_vc_category_id}@@\"\nvc_category_name = \"@@{jira_parent_ticket}@@\"\napi_server = \"@@{veeam_endpoint}@@\"\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/sessionMngr/?v=latest\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to Veeam...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the session_cookie and session_id\nresp_parse = json.loads(resp.content)\nveeam_session_cookie = resp.headers.get('X-RestSvcSessionId')\nveeam_session_id = resp_parse['SessionId']\n# endregion\n\n# region main processing\n# region prepare api call\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/jobs\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n# endregion\n\n# region get job\n# make the api call\nprint(\"STEP: Gettings jobs...\")\nmethod = \"GET\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# get the job_url\njob_url = \"\"\nresp_parse = json.loads(resp.content)\nfor job in resp_parse['Refs']:\n    if job['Name'] == veeam_job_name:\n        job_url = job['Href']\n                \nif job_url:\n    veeam_job_url=job_url.rsplit('/', 1)[1] #get only the last occurence\nelse:\n    print(\"Error: Backup Job \"+veeam_job_name+\" is not present ..\")\n    exit(1)\n# endregion\n\n# region edit job\npayload = {\n    \"ScheduleConfigured\": True,\n    \"ScheduleEnabled\": True,\n    \"JobScheduleOptions\": { \n      \"Standart\": {\n          \"OptionsDaily\": {\n              \"Kind\": \"Everyday\",\n              \"Time\": veeam_job_daily_schedule,\n              \"Enabled\": True\n          },\n          \"OptionsMonthly\": {\n              \"Enabled\": False\n            }\n        }\n    },\n    \"JobInfo\": {\n      \"BackupJobInfo\": {\n        \"Includes\": {\n            \"ObjectInJobs\": [\n              {\n                \"HierarchyObjRef\": \"urn:VMware:Category:\"+veeam_hierarchyroot_uid+'.'+vc_category_id,\n                    \"Name\": vc_category_name,\n                    \"DisplayName\": vc_category_name,\n                    \"Type\": \"ObjectInJob\"\n                  }\n              ]\n          }\n      }\n  }\n}\n\n# make the api call\nprint(\"STEP: Edit job ...\")\nmethod = \"PUT\"\nurl = \"{0}/{1}?action=edit\".format(url, veeam_job_url)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\n# pass the task_id so that it may be captured by Calm.\nresp_parse = json.loads(resp.content)\ntask_id = resp_parse['TaskId']\nprint (\"veeam_task_id={}\".format(task_id))\n# endregion\n# endregion\n\n# region logout\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/logonSessions\"\nmethod = \"DELETE\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n\n# making the call \nprint(\"STEP: Logging out of Veeam...\")\nurl = \"{0}/{1}\".format(url, veeam_session_id)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n# endregion\n\nexit(0)",
                      "eval_variables": "veeam_task_id",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "VeeamEditJob"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "cbc9f1d0-0e10-47c4-aa0d-eef07b6a5b23",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "77f0eedb_dag",
                  "uuid": "76125231-221a-476d-856d-10eb589b1cbf"
                },
                "name": "99b33415_runbook"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "56064dcc-e52a-495b-8454-8a5b2f62ff86",
              "name": "VeaamDelJob",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "2cf9bd9b-522f-40b4-b4dd-ca2104e300af",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=VeeamDelJob; uuid=70e4b339-1f80-4407-ab69-ce317af1f594}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "7103d9da_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "70e4b339-1f80-4407-ab69-ce317af1f594",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       11/03/2020\n# task_name:    VeeamDeleteJob\n# description:  Deletes a Veeam Job\n#               The script deletes a Veeam Job using the \n#               the veeam_job_url on VeeamGetJob\n# input vars:   username, password, veeam_job_url, api_server\n# output vars:  none\n# endregion\n\n# region capture Calm variables\nusername = \"@@{veeam.username}@@\"\npassword = \"@@{veeam.secret}@@\"\nveeam_job_name = \"@@{calm_application_name}@@\"\napi_server = \"@@{veeam_endpoint}@@\"\n# endregion\n\n# region dealing with Scaling In/Out the application\n# # this script will be executed only on the first Service/Instance\n# (ie: Service[0])\nif \"@@{calm_array_index}@@\" != \"0\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/sessionMngr/?v=latest\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to Veeam...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the session_cookie and session_id\nresp_parse = json.loads(resp.content)\nveeam_session_cookie = resp.headers.get('X-RestSvcSessionId')\nveeam_session_id = resp_parse['SessionId']\n# endregion\n\n# region main processing\n# region prepare api call\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/jobs\"\nmethod = \"DELETE\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n# endregion\n\n# region get job\n# make the api call\nprint(\"STEP: Gettings jobs...\")\nmethod = \"GET\"\nprint(\"Making a {} API call to {}\".format(method, base_url))\nresp = process_request(base_url, method, headers)\n\n# get the job_url\njob_url = \"\"\nresp_parse = json.loads(resp.content)\nfor job in resp_parse['Refs']:\n    if job['Name'] == veeam_job_name:\n        job_url = job['Href']\n\nif job_url:\n    veeam_job_url=job_url.rsplit('/', 1)[1] #get only the last occurence\nelse:\n    print(\"Error: Backup Job \"+veeam_job_name+\" is not present ..\")\n    exit(1)\n# endregion\n\n# region get job backup sessions\n# make the api call\nprint(\"STEP: Get backup sessions...\")\nmethod = \"GET\"\nurl = \"{0}/{1}/backupSessions?format=entity\".format(base_url, veeam_job_url)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# check if any job is currently running\n# exiting if the job is running for more than 10 minutes\ni = 1\nwhile True:\n    loop_break = '0'\n    resp_parse = json.loads(resp.content)\n    for job in resp_parse['BackupJobSessions']:\n        if ((job['JobName'] == veeam_job_name) and (job['State'] == \"Working\")):\n            print (\"A job is currently running ..\")\n            print (\"Job's name: {}\" .format(job['JobName']))\n            print (\"Job's session name: {}\" .format(job['Name']))\n            print (\"Job's progress: {0}, state: {1}, result: {2}\" .format(job['Progress'], job['State'], job['Result']))\n            print (\"Sleep for: 2 minutes..\")\n            sleep(120)\n            i = i+1\n            loop_break = '1'\n            resp = process_request(url, method, headers)\n            if (i > 5):\n                print (\"Error.., we have waited for 10 minutes already ..\")\n                print (\"Job's name: {} is still in progress\" .format(job['JobName']))\n                print (\"Job's progress: {0}, state: {1}, result: {2}\" .format(job['Progress'], job['State'], job['Result']))\n                print (\"Please relaunch the application deletion after Backup's completion\")\n                exit(1)  \n    if loop_break == '0':\n        break\n# endregion\n\n# region delete job\n# make the api call\nprint(\"STEP: Delete job ...\")\nmethod = \"DELETE\"\nurl = \"{0}/{1}\".format(base_url, veeam_job_url)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the task_id so that it may be captured by Calm.\nresp_parse = json.loads(resp.content)\ntask_id = resp_parse['TaskId']\nprint (\"veeam_task_id={}\".format(task_id))\n# endregion\n# endregion\n\n# region logout\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/logonSessions\"\nmethod = \"DELETE\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n\n# making the call \nprint(\"STEP: Logging out of Veeam...\")\nurl = \"{0}/{1}\".format(url, veeam_session_id)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n# endregion\nexit(0)"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "VeeamDelJob"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "d5742432-a681-4792-81ed-cf5b0091c832",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "7103d9da_dag",
                  "uuid": "2cf9bd9b-522f-40b4-b4dd-ca2104e300af"
                },
                "name": "a25b9ced_runbook"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "958988ff-3b7e-cf3b-0519-753b41adb2af",
              "name": "EipDelHost",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "029ae7fa-3386-1676-9e75-d6162363e284",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=EipDeleteHost; uuid=1b4a54ee-e1d2-c264-8f8e-9d583481f91d}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "de8f6434_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "1b4a54ee-e1d2-c264-8f8e-9d583481f91d",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "#region headers\n# * authors:    igor.zecevic@nutanix.com\n# * date:       30/03/2020\n# task_name:    EIpDeleteHost\n# description:  Delete an IP/Host\n# input vars:   hostname, ip_public, ip_mgmt\n#               eip_dns_zone\n# output vars:  \n#endregion\n\n#region capture Calm variables\nusername = \"@@{eip.username}@@\"\npassword = \"@@{eip.secret}@@\"\napi_server = \"@@{eip_endpoint}@@\"\ndns_zone = \"@@{eip_dns_zone}@@\"\nhostname = \"@@{hostname}@@\"\nip_public = \"@@{hostname_ip_public}@@\"\nip_mgmt = \"@@{hostname_ip_mgmt}@@\"\nip_f5 = \"@@{hostname_ip_f5}@@\"\nf5_enabled = \"@@{f5_enabled}@@\"\nhostname_f5 = \"@@{eip_host_f5}@@\"\nhost_index = int('@@{calm_array_index}@@')\n# endregion\n\n#region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n        if (r.status_code == 204):\n            print(\"Response: No Content here..\")\n            exit(1)\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n#endregion\n\n#region main processing\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n# endregion\n\n# region delete ip addresses\nhostname_dns = hostname+\".\"+dns_zone\nfor ip in ip_public,ip_mgmt:\n    # get ip\n    method = \"GET\"\n    url = \"{0}/ip_address_list?WHERE={1}='{2}'&WHERE={3}='{4}'\".format(base_url, \"name\", hostname_dns, \"hostaddr\", ip)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n    ip_id = json.loads(resp.content)[0]['ip_id']\n    # delete ip\n    method = \"DELETE\"\n    url = \"{0}/ip_delete?{1}={2}\".format(base_url, \"ip_id\", ip_id)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n# endregion\n\n# region deleting f5 vs\nif ((host_index == 0) and (f5_enabled == \"yes\")):\n    ip = ip_f5\n    hostname = hostname_f5\n    hostname_dns = hostname+\".\"+dns_zone\n    # get ip\n    method = \"GET\"\n    url = \"{0}/ip_address_list?WHERE={1}='{2}'&WHERE={3}='{4}'\".format(base_url, \"name\", hostname_dns, \"hostaddr\", ip)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n    ip_id = json.loads(resp.content)[0]['ip_id']\n    # delete ip\n    method = \"DELETE\"\n    url = \"{0}/ip_delete?{1}={2}\".format(base_url, \"ip_id\", ip_id)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n# endregion\n# endregion\nexit(0)"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "EipDeleteHost"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "79990728-cbf1-e0cb-6893-399b42c35bd3",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "de8f6434_dag",
                  "uuid": "029ae7fa-3386-1676-9e75-d6162363e284"
                },
                "name": "98035853_runbook"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "ea4a127d-295b-d502-36c5-038dd97d9e5f",
              "name": "EipAddHost",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "1a77f765-e788-4263-9448-0a2cd7420b76",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=EipGetSiteId; uuid=5f735f07-ebe6-c524-2c63-5570e0f32cd5}",
                      "@{kind=app_task; name=EipGetSubnetId; uuid=b8b7f004-fd72-76f4-d9c5-8c6513842d53}",
                      "@{kind=app_task; name=EipReserveHost; uuid=c09746d7-d086-99bd-dc22-fca1f474ea8b}",
                      "@{kind=app_task; name=EipAddHost; uuid=913c96b4-821c-7c50-f956-f394b9b21ef8}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "  ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "42726cf8_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "5f735f07-ebe6-c524-2c63-5570e0f32cd5",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "#region headers\n# * authors:    igor.zecevic@nutanix.com\n# * date:       30/03/2020\n# task_name:    EipGetSiteId\n# description:  get site id\n# input vars:   eip_site_name\n# output vars:  eip_site_id\n#endregion\n\n#region capture Calm variables\nusername = \"@@{eip.username}@@\"\npassword = \"@@{eip.secret}@@\"\napi_server = \"@@{eip_endpoint}@@\"\nsite_name = \"@@{eip_site_name}@@\"\n#endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest\"\nmethod = \"GET\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n# endregion\n\n#region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n        #if r.content:\n        #    print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n    elif (r.status_code == 204):\n        print(\"Response: No Content here..\")\n        exit(1)\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n#endregion\n\n#region main processing\n# make the api call\nurl = \"{0}/ip_site_list?WHERE={1}='{2}'\".format(base_url, \"site_name\", site_name)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# parsing the response\nsites = json.loads(resp.content)\nfor site in sites:\n  if site['site_name'] == site_name:\n       print(\"eip_site_id={}\".format(site['site_id']))\n#endregion",
                      "eval_variables": "eip_site_id",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "EipGetSiteId"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "b8b7f004-fd72-76f4-d9c5-8c6513842d53",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "#region headers\n# * authors:    igor.zecevic@nutanix.com\n# * date:       30/03/2020\n# task_name:    EipGetSubnetId\n# description:  get subnet id\n# input vars:   eip_site_id, eip_public_subnet, eip_mgmt_subnet\n#               is_terminal, eip_min_free_ip\n# output vars:  eip_public_subnet_id, eip_mgmt_subnet_id\n#endregion\n\n#region capture Calm variables\nusername = \"@@{eip.username}@@\"\npassword = \"@@{eip.secret}@@\"\napi_server = \"@@{eip_endpoint}@@\"\nsite_id = \"@@{eip_site_id}@@\"\npublic_subnet_name = \"@@{eip_public_subnet}@@\"\nmgmt_subnet_name = \"@@{eip_mgmt_subnet}@@\"\nf5_subnet_name = \"@@{eip_f5_subnet}@@\"\nf5_enabled = \"@@{f5_enabled}@@\"\nmin_free_ip = \"@@{eip_min_free_ip}@@\"\nhost_index = int(\"@@{calm_array_index}@@\")\nis_terminal = \"1\"  #means the subnet cannot contains others subnets as children\n#endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest\"\nmethod = \"GET\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n# endregion\n\n#region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n    elif (r.status_code == 204):\n        print(\"Response: No Content here..\")\n        exit(1)\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n#endregion\n\n#region main processing\n# make the api call\nfor subnet in mgmt_subnet_name,public_subnet_name:\n    url = \"{0}/ip_block_subnet_list?WHERE={1}='{2}'&WHERE={3}='{4}'&WHERE={5}='{6}'\".format(base_url, \"site_id\", site_id, \"is_terminal\", is_terminal, \"subnet_name\", subnet)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n    # parsing the response\n    subnets = json.loads(resp.content)\n    for subnet in subnets:\n        if ((subnet['subnet_ip_free_size'] != int(min_free_ip)) and (subnet['subnet_name'] == public_subnet_name)):\n            print(\"eip_public_subnet_id={}\".format(subnet['subnet_id']))\n        elif ((subnet['subnet_ip_free_size'] != int(min_free_ip)) and (subnet['subnet_name'] == mgmt_subnet_name)):\n            print(\"eip_mgmt_subnet_id={}\".format(subnet['subnet_id']))\n        \nif ((host_index == 0) and (f5_enabled == \"yes\")):\n    subnet = f5_subnet_name\n    url = \"{0}/ip_block_subnet_list?WHERE={1}='{2}'&WHERE={3}='{4}'&WHERE={5}='{6}'\".format(base_url, \"site_id\", site_id, \"is_terminal\", is_terminal, \"subnet_name\", subnet)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n    # parsing the response\n    subnets = json.loads(resp.content)\n    for subnet in subnets:\n        if ((subnet['subnet_ip_free_size'] != int(min_free_ip)) and (subnet['subnet_name'] == f5_subnet_name)):\n            print(\"eip_f5_subnet_id={}\".format(subnet['subnet_id']))\n# endregion\nexit(0)",
                      "eval_variables": "eip_public_subnet_id eip_mgmt_subnet_id eip_f5_subnet_id",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "EipGetSubnetId"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "c09746d7-d086-99bd-dc22-fca1f474ea8b",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * authors:    igor.zecevic@nutanix.com\n# * date:       30/03/2020\n# task_name:    EipReserveHost\n# description:  Check DNS and Reserve an Hostname\n#               check if hostname is not exising on the DNS\n#               if exists, increment the suffix number\n# input vars:   eip_site_id, app_prefix, source_app, app_status\n#               eip_dns_zone, instance_count, rr_type, f5_enabled\n# output vars:  eip_host_list\n#endregion\n\n#region capture Calm variables\nusername = \"@@{eip.username}@@\"\npassword = \"@@{eip.secret}@@\"\napi_server = \"@@{eip_endpoint}@@\"\ndns_zone = \"@@{eip_dns_zone}@@\"\napp_prefix = \"@@{app_prefix}@@\"\napp_source = \"@@{source_app}@@\"\napp_status = \"@@{app_status}@@\"\nhost_index = int(\"@@{calm_array_index}@@\")\nnumber_instance = int(\"@@{instance_count}@@\")\nf5_enabled = \"@@{f5_enabled}@@\"\nrr_type = \"A\"\n#endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest\"\nmethod = \"GET\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n# endregion\n\n#region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n#endregion\n\n# region check dns hostname\ndef eip_dns_check(hostname_dns, rr_type):\n    api_server_port = \"443\"\n    api_server_endpoint = \"/rest\"\n    method = \"GET\"\n    base_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\n    headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    # make the api call\n    url = \"{0}/dns_rr_list?WHERE={1}='{2}'&WHERE={3}='{4}'\".format(base_url, \"rr_type\", rr_type, \"rr_full_name\", hostname_dns)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n    return resp\n# endregion\n\n#region main processing\ni = 1\nhost_list = []\nif ((host_index > 0) and (app_status == \"provisioning\")):\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\nelif ((app_status == \"provisioning\") and (host_index == 0)):\n    for instance in range(0,number_instance):\n        loop_break = 0\n        while True:\n            #checking if hostname exists on DNS\n            hostname = app_prefix+\"-\"+app_source+\"-0\"+str(i)\n            hostname_dns = hostname+\".\"+dns_zone\n            check_dns = eip_dns_check(hostname_dns, rr_type)\n            if (check_dns.status_code == 204) or (check_dns.status_code == 200 and json.loads(check_dns.content)[0]['delayed_delete_time'] == \"1\"):\n                host_list.append(format(hostname))\n                loop_break = 1\n                i = i +1\n                break\n            elif (check_dns.status_code == 200 and json.loads(check_dns.content)[0]['delayed_delete_time'] == \"0\" and json.loads(check_dns.content)[0]['delayed_create_time'] == \"0\"):\n                print (\"DNS already exists.. looping\")\n                i = i + 1\n        if ((loop_break == 1) and (instance == number_instance)):\n            break\nelif ((host_index > 0) and (app_status == \"running\")):\n    while True:\n            #checking if hostname exists on DNS\n            hostname = app_prefix+\"-\"+app_source+\"-0\"+str(i)\n            hostname_dns = hostname+\".\"+dns_zone\n            check_dns = eip_dns_check(hostname_dns, rr_type)\n            if (check_dns.status_code == 204) or (check_dns.status_code == 200 and json.loads(check_dns.content)[0]['delayed_delete_time'] == \"1\"):\n                host_list.append(format(hostname))\n                loop_break = 1\n                i = i +1\n                break\n            elif (check_dns.status_code == 200 and json.loads(check_dns.content)[0]['delayed_delete_time'] == \"0\" and json.loads(check_dns.content)[0]['delayed_create_time'] == \"0\"):\n                print (\"DNS already exists.. looping\")\n                i = i + 1\n\n# reserving hostname for the F5 virtual server\nif ((host_index == 0) and (app_status == \"provisioning\") and (f5_enabled == \"yes\")):\n    i = 1\n    while True:\n        #checking if hostname exists on DNS\n        hostname = app_prefix+\"-\"+app_source+\"-VS-0\"+str(i)\n        hostname_dns = hostname+\".\"+dns_zone\n        check_dns = eip_dns_check(hostname_dns, rr_type)\n        if (check_dns.status_code == 204) or (check_dns.status_code == 200 and json.loads(check_dns.content)[0]['delayed_delete_time'] == \"1\"):\n            host_f5 = hostname\n            print(\"eip_host_f5={}\".format(host_f5))\n            loop_break = 1\n            i = i +1\n            break\n        elif (check_dns.status_code == 200 and json.loads(check_dns.content)[0]['delayed_delete_time'] == \"0\" and json.loads(check_dns.content)[0]['delayed_create_time'] == \"0\"):\n            print (\"DNS already exists.. looping\")\n            i = i + 1\n# endregion\nprint(\"eip_host_list={}\".format(host_list))\n# endregion\nexit(0)\n",
                      "eval_variables": "eip_host_list eip_host_f5",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "EipReserveHost"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "913c96b4-821c-7c50-f956-f394b9b21ef8",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "#region headers\n# * authors:    igor.zecevic@nutanix.com\n# * date:       30/03/2020\n# task_name:    EipAddHost\n# description:  Create an IP/Host\n# input vars:   eip_site_id, eip_mgmt_subnet_id, eip_public_subnet_id\n#               eip_dns_zone, app_status, f5_enabled, add_flag\n#               ip_name_type, max_find\n# output vars:  hostname, ip_mgmt_vnic, ip_public_vnic, ip_f5_vs\n#endregion\n\n#region capture Calm variables\nusername = \"@@{eip.username}@@\"\npassword = \"@@{eip.secret}@@\"\napi_server = \"@@{eip_endpoint}@@\"\nsite_id = \"@@{eip_site_id}@@\"\nmgmt_subnet_id = \"@@{eip_mgmt_subnet_id}@@\"\npublic_subnet_id = \"@@{eip_public_subnet_id}@@\"\nf5_subnet_id = \"@@{eip_f5_subnet_id}@@\"\nf5_enabled = \"@@{f5_enabled}@@\" #if f5_enabled yes, we need another address \ndns_zone = \"@@{eip_dns_zone}@@\"\napp_status = \"@@{app_status}@@\"\nhost_index = int('@@{calm_array_index}@@')\nadd_flag = \"new_only\" # flag used to track new ip creation only\nmax_find = \"1\" # search for 1 available address\nip_name_type = \"A\" # create a DNS record\n#endregion\n\n#region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n        if (r.status_code == 204):\n            print(\"Response: No Content here..\")\n            exit(1)\n    elif ((r.status_code == 400) and (json.loads(r.content)['errmsg']) == \"Address already exists\"):\n        print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n#endregion\n\n# region find next free address function\ndef efficient_ip_find_free_address(subnet_id, max_find=max_find):\n    api_server_port = \"443\"\n    api_server_endpoint = \"/rpc\"\n    method = \"GET\"\n    base_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\n    headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    # make the api call\n    url = \"{0}/ip_find_free_address?{1}={2}&{3}={4}\".format(base_url, \"subnet_id\", subnet_id, \"max_find\", max_find)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n    return resp\n# endregion\n\n# region add host function\ndef efficient_ip_add_host(host_ip, hostname_dns, site_id=site_id, add_flag=add_flag):\n    api_server_port = \"443\"\n    api_server_endpoint = \"/rest\"\n    method = \"POST\"\n    base_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\n    headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    # make the api call\n    url = \"{0}/ip_add?{1}={2}&{3}={4}&{5}={6}&{7}={8}&{9}={10}\".format(base_url, \"hostaddr\", host_ip, \"ip_name\", hostname_dns, \"ip_name_type\", ip_name_type, \"site_id\", site_id, \"add_flag\", add_flag)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n    return resp\n# endregion\n\n# region main processing\n# region prepare and reserve hostname\n# sleep count based on the replica level\nsleep_count = (host_index * 3)\nprint (\"Sleep for: \"+str(sleep_count)+\" seconds\")\nsleep(sleep_count)\nif (app_status == \"provisioning\"):\n    # use the calm_array variable\n    hostname = @@{calm_array_eip_host_list}@@[host_index]\n    hostname_dns = hostname+\".\"+dns_zone\n    print(\"hostname={}\".format(hostname))\nelif (app_status == \"running\"):\n    # use the service variable\n    hostname = @@{eip_host_list}@@[0]\n    hostname_dns = hostname+\".\"+dns_zone\n    print(\"hostname={}\".format(hostname))\n# endregion\n\n# region add management and public ips\ni = 0\nfor subnet_id in mgmt_subnet_id,public_subnet_id:\n    while True:\n        next_free_ip = efficient_ip_find_free_address(subnet_id)\n        host_ip = json.loads(next_free_ip.content)[0]['hostaddr']\n        add_host = efficient_ip_add_host(host_ip, hostname_dns)\n        # if the address already exists, loop to find a new one\n        if ((add_host.status_code == 400) and (json.loads(add_host.content)['errmsg']) == \"Address already exists\"):\n            sleep_count = (host_index * 2)\n            print (\"Sleep for: \"+str(sleep_count)+\" seconds\")\n            sleep(sleep_count)\n            i = (i + 1)\n            if (i > 10):\n                print(\"Error: couldn't find any available address..\")\n                exit(1)\n        elif ((add_host.status_code == 201) and (subnet_id == mgmt_subnet_id)):\n            print (\"hostname_ip_mgmt={}\".format(host_ip))\n            break\n        elif ((add_host.status_code == 201) and (subnet_id == public_subnet_id)):\n            print (\"hostname_ip_public={}\".format(host_ip))\n            break\n# endregion\n\n# region F5 ip - run only on replica[0]\nif ((f5_enabled == \"yes\") and (host_index == 0)):\n  i = 0\n  subnet_id = f5_subnet_id\n  hostname = \"@@{eip_host_f5}@@\"\n  hostname_dns = hostname+\".\"+dns_zone\n  while True:\n      next_free_ip = efficient_ip_find_free_address(subnet_id)\n      host_ip = json.loads(next_free_ip.content)[0]['hostaddr']\n      add_host = efficient_ip_add_host(host_ip, hostname_dns)\n      # if the address already exists, loop to find a new one\n      if ((add_host.status_code == 400) and (json.loads(add_host.content)['errmsg']) == \"Address already exists\"):\n         sleep_count = (host_index * 2)\n         print (\"Sleep for: \"+str(sleep_count)+\" seconds\")\n         sleep(sleep_count)\n         i = (i + 1)\n         if (i > 10):\n              print(\"Error: couldn't find any available address..\")\n              exit(1)\n      elif (add_host.status_code == 201):\n          print (\"hostname_ip_f5={}\".format(host_ip))\n          break\n# endregion\n# endregion\nexit(0)",
                      "eval_variables": "hostname hostname_ip_public hostname_ip_mgmt hostname_ip_f5",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "EipAddHost"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "386890dc-4373-ef47-d41b-28df20801ce9",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "42726cf8_dag",
                  "uuid": "1a77f765-e788-4263-9448-0a2cd7420b76"
                },
                "name": "ae307199_runbook"
              }
            }
          ],
          "message_list": [],
          "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670",
          "state": "ACTIVE",
          "depends_on_list": [],
          "editables": {},
          "tier": "",
          "singleton": false,
          "variable_list": [
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "9ebc993c-1bc4-e4ff-8ff5-98bb1f727f9b",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "hostname_ip_f5"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "1464ba13-655b-f821-7843-fbd24fedcbaf",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "hostname_ip_mgmt"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "e5483edd-3e3a-9140-21ba-6d30a204db5d",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "hostname_ip_public"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "e001d3b3-6572-a27a-a467-3e11337b761a",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "hostname"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "06414021-0ffa-3bcf-9128-b7a6a8b40f04",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "eip_host_f5"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "7b48aff2-0ba9-990a-ae29-784bbb241696",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "eip_host_list"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "86b481d4-90d9-53b4-bd60-c40bea0aae12",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "eip_f5_subnet_id"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "623b2581-19db-3e27-e390-513646746acc",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "eip_mgmt_subnet_id"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "9668044e-7bcd-7eeb-9b5b-a3d203f3cf4e",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "eip_public_subnet_id"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "5311d444-a63d-10ea-9c28-e5d4d1636073",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "eip_site_id"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "edef8be7-d2eb-4c00-8ff4-bb5207dca6e3",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "app_status"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "f213c36f-1afb-4a22-917e-de418e71d291",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "veeam_task_id"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "d0ca6d26-8dc6-42ee-8bbc-1ebbeb6a8f7f",
              "value": "TEMPLATE-JOB-FOR-CALM",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "veeam_job_template_name"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "7020cf28-959a-49e8-a4e4-4d19fcccc24b",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "veeam_repo_uid"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "155d0fc6-3e22-467c-b9ef-2e8ec092f7f7",
              "value": "10.68.99.161",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "veeam_endpoint"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "8296b6ec-7f20-4cb5-9dd7-80f18be460f9",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "veeam_hierarchyroot_uid"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "3465af13-1107-48ed-b30f-5da6ea64c5c8",
              "value": "10.48.108.11",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "vc_endpoint"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "990e1c77-d7b8-44f4-88e2-87f9f8a9e34d",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "vc_vm_folder_id"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "4acf9f18-0329-432d-b9a6-0bebff8a6888",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "vc_category_id"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "95b1da68-e7c8-468a-b770-24ce0c87dc7f",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "vc_tag_id"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "2e6791c9-e61c-45f6-90b2-e7c9d5216163",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "vc_cluster_id"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "fb7a223e-35d6-4d42-8316-62de9d24d208",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "vc_vm_id"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "4dae1fcc-8e23-40a5-bf78-ea91b74273f3",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "vc_vm_folder_root_id"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "f2c6ad9e-6feb-449b-a9c9-c7af73cb4427",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "f5_pool_monitor"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "5c4ed301-6432-44cf-a6e8-143d8a15530b",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "f5_partition"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "2551e756-41ac-47c2-8fbf-6ca7d3e35c59",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "f5_vs_protocol"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "3309911c-c2a5-46e1-ab53-502db632113f",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "f5_network_pool"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "6e78c978-9012-482d-9ae1-9e160a8b0f3a",
              "value": "no",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "f5_enabled"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "31e92564-ab9a-4625-a10e-5436bdc41e11",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "f5_vs_port"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "d9cfc1ed-cef3-417e-bfdf-b9baf05c0b6a",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "jenkins_job_name"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "4f248da1-00da-40e8-8593-761fd1f4855a",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "application_name"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "432eae3f-83e9-4f2b-95a4-1d93d55b3bc9",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "awx_job_template_id"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "133cf72a-9722-4a13-a790-224a8e1ea279",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "awx_ansible_groups"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "b182d703-bbc1-4b43-8aa6-147d41db3ed3",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "awx_inventory_id"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "9bea3670-7dd1-462c-9620-d0ce7268f9d4",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "fortigate_group_name"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "6cfb82cd-ccb5-496d-ae37-b7c08c9b6440",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "fortigate_csrf_token"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "6f7513fe-107c-4c75-bf8a-c85bf2394649",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "job_build_id"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "63168d37-d6d7-4df7-b6a5-3aad9796ce94",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "awx_host_id"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "ac739164-1b91-4446-a37e-8aec348d472b",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "jira_child_ticket"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "64923b5c-31b4-42ad-aa97-c24cccd477cc",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {},
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "vm_name"
            }
          ],
          "name": "CentOS7"
        }
      ],
      "substrate_definition_list": [
        {
          "description": "",
          "action_list": [
            {
              "description": "",
              "message_list": [],
              "uuid": "a8fa9315-c0f4-4331-9a91-aa3fb2fcddd1",
              "name": "pre_action_create",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "fragment",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "40d7ed31-8747-4cf0-8f51-31bdf99fd473",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=ExtractAppConfig; uuid=41398105-2d22-4e4d-a997-67a732ed7650}",
                      "@{kind=app_task; name=CreateJiraTicket; uuid=f1a1aa5a-d92a-412c-9928-936f66175aa3}",
                      "@{kind=app_task; name=GetHostname; uuid=efd05652-1832-4d57-a096-1f0d55093275}",
                      "@{kind=app_task; name=GetIpAddress; uuid=436698b2-5499-450f-a216-c4018a509824}",
                      "@{kind=app_task; name=Pre_create task5; uuid=61fdeee0-7d19-448a-a683-9c00d3109bec}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "   ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "5ef1d61d_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "41398105-2d22-4e4d-a997-67a732ed7650",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "applications_config = {\n  \"WWW\": {\n    \"awx_inventory_id\": 2,\n    \"awx_ansible_groups\": \"linux,webservers\",\n    \"awx_job_template_id\": 9,\n    \"jenkins_job_name\": \"Calm_test\",\n    \"f5_config\": {\n      \"enabled\": \"yes\",\n      \"network_pool\": 12,\n      \"vs_port\": \"80\",\n      \"vs_protocol\": \"tcp\",\n      \"partition\": \"Common\",\n      \"pool_monitor\" : \"/Common/https and /Common/tcp\"\n    }\n  },\n  \"APP01\": {\n    \"awx_inventory_id\": 2,\n    \"awx_ansible_groups\": \"linux,webservers\",\n    \"awx_job_template_id\": 9,\n    \"jenkins_job_name\": \"Calm_test\",\n    \"f5_config\": {\n      \"enabled\": \"yes\",\n      \"network_pool\": 12,\n      \"vs_port\": \"80\",\n      \"vs_protocol\": \"tcp\",\n      \"partition\": \"Common\",\n      \"pool_monitor\" : \"/Common/https and /Common/tcp\"\n    }\n  },\n  \"APP02\": {\n    \"awx_inventory_id\": 3,\n    \"awx_ansible_groups\": \"linux,webservers\",\n    \"awx_job_template_id\": 9,\n    \"jenkins_job_name\": \"Calm_test\",\n    \"f5_config\": {\n      \"enabled\": \"yes\",\n      \"network_pool\": 12,\n      \"vs_port\": \"80\",\n      \"vs_protocol\": \"tcp\",\n      \"partition\": \"Common\",\n      \"pool_monitor\" : \"/Common/https and /Common/tcp\"\n    }\n  }\n}\n\napp_identity = json.loads(json.dumps(applications_config))\nprint(\"awx_inventory_id={}\".format(app_identity['@@{source_app}@@']['awx_inventory_id']))\nprint(\"awx_ansible_groups={}\".format(app_identity['@@{source_app}@@']['awx_ansible_groups']))\nprint(\"awx_job_template_id={}\".format(app_identity['@@{source_app}@@']['awx_job_template_id']))\nprint(\"awx_application_name={}\".format(app_identity['@@{source_app}@@']))\nprint(\"jenkins_job_name={}\".format(app_identity['@@{source_app}@@']['jenkins_job_name']))\nprint(\"f5_enabled={}\".format(app_identity['@@{source_app}@@']['f5_config']['enabled']))\nprint(\"f5_vs_port={}\".format(app_identity['@@{source_app}@@']['f5_config']['vs_port']))\nprint(\"f5_network_pool={}\".format(app_identity['@@{source_app}@@']['f5_config']['network_pool']))\nprint(\"f5_vs_protocol={}\".format(app_identity['@@{source_app}@@']['f5_config']['vs_protocol']))\nprint(\"f5_partition={}\".format(app_identity['@@{source_app}@@']['f5_config']['partition']))\nprint(\"f5_pool_monitor={}\".format(app_identity['@@{source_app}@@']['f5_config']['pool_monitor']))",
                      "eval_variables": "awx_inventory_id awx_ansible_groups awx_job_template_id application_name jenkins_job_name f5_enabled f5_vs_port f5_network_pool f5_vs_protocol f5_partition f5_pool_monitor",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "ExtractAppConfig"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "f1a1aa5a-d92a-412c-9928-936f66175aa3",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraCreateTicket\n# description:  Jira ticket creation using the deployed vm specs\n# input vars:   application_name, jira_project_key, policy_id, f5_enabled\n# output vars:  jira_parent_ticket_name\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\njira_project_key = \"@@{jira_project_name}@@\"\napplication_name = \"@@{calm_application_name}@@\"\npolicy_id = \"@@{fortigate_policy}@@\".split(\"-\")[0]\nf5_enabled = \"@@{f5_enabled}@@\"\ntotal_instances = str(\"@@{instance_count}@@\")\n# endregion\n\nif int(\"@@{calm_array_index}@@\") != 0:\n    exit(0)\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/api/3/issue\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\ncreate_payload = {\n    \"fields\": {\n    \"project\": {\n      \"key\": jira_project_key\n    },\n    \"description\": {\n      \"version\": 1,\n      \"type\": \"doc\",\n    \"content\": [\n    {\n      \"type\": \"paragraph\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"New instance of \" + application_name + \" is being deployed\"\n        },\n        {\n          \"type\": \"hardBreak\"\n        },\n        {\n          \"type\": \"text\",\n          \"text\": \"Current deployment configuration:\"\n        },\n        {\n          \"type\": \"hardBreak\"\n        },\n        {\n          \"type\": \"text\",\n          \"text\": \"Fortigate policy: \" + policy_id\n        },\n        {\n          \"type\": \"hardBreak\"\n        },\n        {\n          \"type\": \"text\",\n          \"text\": \"F5 loadbalancer enabled: \" + f5_enabled\n        },\n        {\n          \"type\": \"hardBreak\"\n        },\n        {\n          \"type\": \"text\",\n          \"text\": \"number of deployed instance: \" + total_instances\n        }\n      ]\n    }\n  ]\n    },\n    \"summary\": application_name + \" vm deployment\",\n\t\t\"labels\": [\n      \"calm\"\n    ],\t\t\n    \"issuetype\": {\n      \"name\": \"Task\"\n    }\n  }\n    \n}\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, params=json.dumps(create_payload),\\\n              auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n              verify=False\n             )\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful. Status code: {}\".format(resp.status_code))\n    result = json.loads(resp.content)\n    print(\"Ticket {} was created\".format(result['key']))\n    print(\"jira_parent_ticket={}\".format(result['key']))\n    \n    \nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion",
                      "eval_variables": "jira_parent_ticket",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "CreateJiraTicket"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "efd05652-1832-4d57-a096-1f0d55093275",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "print(\"vm_name=salah-@@{calm_array_index}@@\")",
                      "eval_variables": "vm_name",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "GetHostname"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "436698b2-5499-450f-a216-c4018a509824",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "print \"ok\""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "GetIpAddress"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "61fdeee0-7d19-448a-a683-9c00d3109bec",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "print(\"@@{calm_array_index}@@\")\nprint(\"@@{jira_parent_ticket}@@\")\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "Pre_create task5"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "6a69ee15-39b2-4713-a93a-1e35473e53de",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "5ef1d61d_dag",
                  "uuid": "40d7ed31-8747-4cf0-8f51-31bdf99fd473"
                },
                "name": "035aa427_runbook"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "0c7b4dd4-f0d2-43d9-98ff-2b99cef80485",
              "name": "post_action_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "fragment",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "752e3691-d69d-4d7a-b414-107dea5a1282",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=Post_delete task1_nuta; uuid=563d3001-ad88-4a4b-a9fb-046ba03553a7}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "3e7108cf_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "563d3001-ad88-4a4b-a9fb-046ba03553a7",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "print(\"ok\")"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "Post_delete task1_nuta"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "47e9b176-4bd1-4cbc-bbf9-ea5f789971c9",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "3e7108cf_dag",
                  "uuid": "752e3691-d69d-4d7a-b414-107dea5a1282"
                },
                "name": "097095e6_runbook"
              }
            },
            {
              "description": "System action for creating an application",
              "message_list": [],
              "uuid": "addc74b2-011c-4d0f-97d1-7f8dd5a52fd6",
              "name": "action_create",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "172f80e5-43bc-4342-a299-d2f28b33fde6",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Nutanix_Provision_e9f5177c_746f_4814_b024_505fc20559f2; uuid=9be50403-f8d9-4d47-a220-d9c4109dd7aa}",
                      "@{kind=app_task; name=SYS_GEN__check_login_for_CentOSVm_e9f5177c_746f_4814_b024_505fc20559f2; uuid=6a20106b-3e72-4425-9f67-6865be9f935d}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "PROVISION_NUTANIX",
                    "uuid": "9be50403-f8d9-4d47-a220-d9c4109dd7aa",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "name": "@@{vm_name}@@",
                      "categories": "",
                      "availability_zone_reference": null,
                      "backup_policy": null,
                      "type": "",
                      "cluster_reference": null,
                      "resources": "@{nic_list=System.Object[]; parent_reference=; guest_tools=; num_vcpus_per_socket=1; num_sockets=2; serial_port_list=System.Object[]; gpu_list=System.Object[]; memory_size_mib=4096; power_state=ON; hardware_clock_timezone=; guest_customization=; type=; account_uuid=28b0cf0a-59e5-4d3e-bef1-80bca0b8e4ff; boot_config=; disk_list=System.Object[]}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Nutanix_Provision_e9f5177c_746f_4814_b024_505fc20559f2"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CHECK_LOGIN",
                    "uuid": "6a20106b-3e72-4425-9f67-6865be9f935d",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "retries": "5",
                      "dial_timeout": "",
                      "timeout": "60",
                      "address": "@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
                      "type": "CHECK_LOGIN",
                      "sleep_time": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__check_login_for_CentOSVm_e9f5177c_746f_4814_b024_505fc20559f2"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "21829c6d-b9e3-4b50-aba3-720f7e2f625c",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_e9f5177c_746f_4814_b024_505fc20559f2",
                  "uuid": "172f80e5-43bc-4342-a299-d2f28b33fde6"
                },
                "name": "SYS_GEN__Runbook_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
              }
            },
            {
              "description": "System action for powering on an application",
              "message_list": [],
              "uuid": "f181ddc0-bce3-431e-93eb-c79b8ccce74d",
              "name": "action_poweron",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "d567fdaf-7d82-4df7-85c6-2bca5523efe1",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Nutanix_Operation_PowerOn_e9f5177c_746f_4814_b024_505fc20559f2; uuid=234b4da0-f622-41aa-84ce-ac4c8cab0b18}",
                      "@{kind=app_task; name=SYS_GEN__check_login_for_CentOSVm_e9f5177c_746f_4814_b024_505fc20559f2; uuid=5323325e-f860-44fb-acb1-4576220b61dd}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "VMOPERATION_NUTANIX",
                    "uuid": "234b4da0-f622-41aa-84ce-ac4c8cab0b18",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "operation_type": "action_poweron",
                      "type": "GENERIC_OPERATION"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Nutanix_Operation_PowerOn_e9f5177c_746f_4814_b024_505fc20559f2"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CHECK_LOGIN",
                    "uuid": "5323325e-f860-44fb-acb1-4576220b61dd",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "retries": "5",
                      "dial_timeout": "",
                      "timeout": "60",
                      "address": "@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
                      "type": "CHECK_LOGIN",
                      "sleep_time": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__check_login_for_CentOSVm_e9f5177c_746f_4814_b024_505fc20559f2"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "3b01ecd1-0b6e-42aa-ab27-5012a2d6840e",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_e9f5177c_746f_4814_b024_505fc20559f2",
                  "uuid": "d567fdaf-7d82-4df7-85c6-2bca5523efe1"
                },
                "name": "SYS_GEN__Runbook_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
              }
            },
            {
              "description": "System action for restarting an application",
              "message_list": [],
              "uuid": "5f662e32-e47e-487b-9f44-4c74a2b3e7b6",
              "name": "action_restart",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "2bf6cbaf-3237-47da-b43f-7f8fad2ed535",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Nutanix_Operation_Restart_e9f5177c_746f_4814_b024_505fc20559f2; uuid=40e84b39-04bf-47b8-bdfa-c3657dfd2767}",
                      "@{kind=app_task; name=SYS_GEN__check_login_for_CentOSVm_e9f5177c_746f_4814_b024_505fc20559f2; uuid=3cf2c763-af53-41c6-82b1-682fa3a903ce}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "VMOPERATION_NUTANIX",
                    "uuid": "40e84b39-04bf-47b8-bdfa-c3657dfd2767",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "operation_type": "action_restart",
                      "type": "GENERIC_OPERATION"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Nutanix_Operation_Restart_e9f5177c_746f_4814_b024_505fc20559f2"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CHECK_LOGIN",
                    "uuid": "3cf2c763-af53-41c6-82b1-682fa3a903ce",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "retries": "5",
                      "dial_timeout": "",
                      "timeout": "60",
                      "address": "@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
                      "type": "CHECK_LOGIN",
                      "sleep_time": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__check_login_for_CentOSVm_e9f5177c_746f_4814_b024_505fc20559f2"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "95ad7f40-244f-4e84-adba-d416b39e2318",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_e9f5177c_746f_4814_b024_505fc20559f2",
                  "uuid": "2bf6cbaf-3237-47da-b43f-7f8fad2ed535"
                },
                "name": "SYS_GEN__Runbook_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
              }
            },
            {
              "description": "System action for suspending an application",
              "message_list": [],
              "uuid": "5387727d-5594-4f36-bb42-2a44c2e0a878",
              "name": "action_suspend",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "71692481-5ccf-41b4-98f4-8c4ef058faad",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "ef21a5ff-566c-45e1-a5d6-c6c7aaf920ef",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_e9f5177c_746f_4814_b024_505fc20559f2",
                  "uuid": "71692481-5ccf-41b4-98f4-8c4ef058faad"
                },
                "name": "SYS_GEN__Runbook_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
              }
            },
            {
              "description": "System action for modifying an application",
              "message_list": [],
              "uuid": "f4ce3a9a-e0b4-499e-9741-cc3ca42c2880",
              "name": "action_modify",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "a2f6f68a-9369-4dcf-bcd8-026c34bde011",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "7d5675ca-1e45-4e31-86ce-4a3b4f966393",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_e9f5177c_746f_4814_b024_505fc20559f2",
                  "uuid": "a2f6f68a-9369-4dcf-bcd8-026c34bde011"
                },
                "name": "SYS_GEN__Runbook_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
              }
            },
            {
              "description": "System action for powering off an application",
              "message_list": [],
              "uuid": "6834ece9-c5ff-43d4-98bd-d4c60101c065",
              "name": "action_poweroff",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "f27eff0d-d2bd-4fdb-9122-86e11ff20a21",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Nutanix_Operation_PowerOff_e9f5177c_746f_4814_b024_505fc20559f2; uuid=e95e3a89-b98c-427f-a0d3-1a7acb16111e}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "VMOPERATION_NUTANIX",
                    "uuid": "e95e3a89-b98c-427f-a0d3-1a7acb16111e",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "operation_type": "action_poweroff",
                      "type": "GENERIC_OPERATION"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Nutanix_Operation_PowerOff_e9f5177c_746f_4814_b024_505fc20559f2"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "78737d7a-e48f-4044-a0a6-026804adc160",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_e9f5177c_746f_4814_b024_505fc20559f2",
                  "uuid": "f27eff0d-d2bd-4fdb-9122-86e11ff20a21"
                },
                "name": "SYS_GEN__Runbook_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
              }
            },
            {
              "description": "System action for deleting an application. Deletes created VMs as well",
              "message_list": [],
              "uuid": "75a4bafe-27be-4407-adfc-fb284152fce8",
              "name": "action_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "cf757505-e080-4fcd-a161-bd9cc882cef9",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Nutanix_Delete_e9f5177c_746f_4814_b024_505fc20559f2; uuid=a23a684b-8173-48ee-b345-d0dd7abd4c04}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DELETE_NUTANIX",
                    "uuid": "a23a684b-8173-48ee-b345-d0dd7abd4c04",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Nutanix_Delete_e9f5177c_746f_4814_b024_505fc20559f2"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "82e04739-2fca-4d69-a3a5-080efead300e",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_e9f5177c_746f_4814_b024_505fc20559f2",
                  "uuid": "cf757505-e080-4fcd-a161-bd9cc882cef9"
                },
                "name": "SYS_GEN__Runbook_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
              }
            },
            {
              "description": "System action for deleting an application. Does not delete created VMs",
              "message_list": [],
              "uuid": "dec6378f-0d64-4b97-bf62-b1418193f5e6",
              "name": "action_soft_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "445c23d3-994e-47f3-b4b5-6bfdc2ee89fb",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Nutanix_Soft_Delete_06e19016_513b_4633_b514_871a80cf2960; uuid=eb287f13-2fbd-4ba5-89d7-a2a50c4769de}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SOFT_DELETE_NUTANIX",
                    "uuid": "eb287f13-2fbd-4ba5-89d7-a2a50c4769de",
                    "child_tasks_local_reference_list": [],
                    "state": "NOT_VALIDATED",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Nutanix_Soft_Delete_06e19016_513b_4633_b514_871a80cf2960"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "a727a345-a501-4339-a351-bdbe6efa5f71",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_e9f5177c_746f_4814_b024_505fc20559f2",
                  "uuid": "445c23d3-994e-47f3-b4b5-6bfdc2ee89fb"
                },
                "name": "SYS_GEN__Runbook_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
              }
            }
          ],
          "message_list": [],
          "uuid": "06e19016-513b-4633-b514-871a80cf2960",
          "state": "ACTIVE",
          "readiness_probe": {
            "connection_type": "SSH",
            "retries": "5",
            "connection_protocol": "",
            "disable_readiness_probe": false,
            "address": "@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
            "delay_secs": "60",
            "connection_port": 22,
            "login_credential_local_reference": {
              "kind": "app_credential",
              "name": "centos",
              "uuid": "43d8326c-f917-4a7f-888f-21f5d2d6c36f"
            }
          },
          "editables": {
            "create_spec": {
              "resources": {
                "nic_list": {},
                "serial_port_list": {}
              }
            }
          },
          "os_type": "Linux",
          "type": "AHV_VM",
          "create_spec": {
            "name": "@@{vm_name}@@",
            "categories": {},
            "availability_zone_reference": null,
            "backup_policy": null,
            "type": "",
            "cluster_reference": null,
            "resources": {
              "nic_list": [
                {
                  "nic_type": "NORMAL_NIC",
                  "vpc_reference": null,
                  "ip_endpoint_list": [],
                  "network_function_chain_reference": null,
                  "network_function_nic_type": "INGRESS",
                  "mac_address": "",
                  "subnet_reference": {
                    "kind": "subnet",
                    "type": "",
                    "name": "",
                    "uuid": "061237a0-554a-4528-8e5c-9a9bdca8dd8c"
                  },
                  "type": ""
                }
              ],
              "parent_reference": null,
              "guest_tools": null,
              "num_vcpus_per_socket": 1,
              "num_sockets": 2,
              "serial_port_list": [],
              "gpu_list": [],
              "memory_size_mib": 4096,
              "power_state": "ON",
              "hardware_clock_timezone": "",
              "guest_customization": {
                "cloud_init": {
                  "meta_data": "",
                  "type": "",
                  "user_data": "#cloud-config\nusers:\n  - name: \"ansible\"\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']\n    ssh-authorized-keys:\n    - @@{ansible_public_key}@@\n    ssh_pwauth: True\n    disable_root: false\nchpasswd:\n  list: |\n    @@{centos.username}@@:@@{centos.secret}@@\n  expire: False\n \nruncmd:\n - [ hostnamectl, set-hostname, \"@@{vm_name}@@\" ]\n - [ ifdown, eth0 ]\n - [ ifup, eth0 ]"
                },
                "type": "",
                "sysprep": null
              },
              "type": "",
              "account_uuid": "28b0cf0a-59e5-4d3e-bef1-80bca0b8e4ff",
              "boot_config": {
                "boot_device": {
                  "type": "",
                  "disk_address": {
                    "adapter_type": "SCSI",
                    "device_index": 0,
                    "type": ""
                  }
                },
                "type": "",
                "boot_type": "",
                "mac_address": ""
              },
              "disk_list": [
                {
                  "data_source_reference": {
                    "kind": "image",
                    "type": "",
                    "name": "CentOS7-MoE",
                    "uuid": "ec79974b-7f99-49b3-bff1-e45bc39c15ce"
                  },
                  "type": "",
                  "disk_size_mib": 0,
                  "volume_group_reference": null,
                  "device_properties": {
                    "type": "",
                    "device_type": "DISK",
                    "disk_address": {
                      "adapter_type": "SCSI",
                      "device_index": 0,
                      "type": ""
                    }
                  }
                }
              ]
            }
          },
          "variable_list": [],
          "name": "CentOSVm"
        },
        {
          "description": "",
          "action_list": [
            {
              "description": "",
              "message_list": [],
              "uuid": "5cb75cad-6f4f-47cd-8dd8-94ae4be13b81",
              "name": "pre_action_create",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "fragment",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "bdcc1b71-4b61-4f38-95aa-753b0380c35a",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "b5cc9f06_dag"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "7070a710-990b-4edd-b11b-a3a70f226b19",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "b5cc9f06_dag",
                  "uuid": "bdcc1b71-4b61-4f38-95aa-753b0380c35a"
                },
                "name": "91724d19_runbook"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "e384a77b-6946-40f0-beb0-527261932cea",
              "name": "post_action_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "fragment",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "13049121-aace-431c-a698-7ada21218922",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "db01e8b9_dag"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "6b8c25cb-0722-47b1-86fd-71665561b2bb",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "db01e8b9_dag",
                  "uuid": "13049121-aace-431c-a698-7ada21218922"
                },
                "name": "0435bb56_runbook"
              }
            },
            {
              "description": "System action for creating an application",
              "message_list": [],
              "uuid": "cb9d6a0c-2206-45db-83fa-18a4364f48b8",
              "name": "action_create",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "36f044fd-7bac-4bec-a29b-0d1e49885e59",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Aws_Provision_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=6164a688-d5c5-47f6-8929-ba0a6c9c33f3}",
                      "@{kind=app_task; name=SYS_GEN__check_login_for_CentOSVm_2_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=cbce63ec-6cc9-40b6-b99d-e5f8b94b73a1}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "PROVISION_AWS_VM",
                    "uuid": "6164a688-d5c5-47f6-8929-ba0a6c9c33f3",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "name": "vm-@@{calm_array_index}@@-@@{calm_time}@@",
                      "availability_zone_reference": null,
                      "backup_policy": null,
                      "type": "PROVISION_AWS_VM",
                      "cluster_reference": null,
                      "resources": "@{instance_profile_name=; instance_type=t2.micro; subnet_id=subnet-b9c19af2; key_name=calm-user-key; region=us-west-2; availability_zone=us-west-2a; instance_initiated_shutdown_behavior=; user_data=; image_id=ami-018d89fd7bf4a0001; state=RUNNING; security_group_list=System.Object[]; block_device_map=; private_ip_address=; vpc_id=vpc-2d6cc055; tag_list=System.Object[]; type=; account_uuid=eaa2a061-0608-16d8-f81b-7bdbd6fc264b; associate_public_ip_address=True}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Aws_Provision_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CHECK_LOGIN",
                    "uuid": "cbce63ec-6cc9-40b6-b99d-e5f8b94b73a1",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "retries": "5",
                      "dial_timeout": "",
                      "timeout": "60",
                      "address": "@@{public_ip_address}@@",
                      "type": "CHECK_LOGIN",
                      "sleep_time": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__check_login_for_CentOSVm_2_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "251d943f-f378-45c6-a26d-1a24870aa567",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae",
                  "uuid": "36f044fd-7bac-4bec-a29b-0d1e49885e59"
                },
                "name": "SYS_GEN__Runbook_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
              }
            },
            {
              "description": "System action for powering on an application",
              "message_list": [],
              "uuid": "10cb1376-ecb7-41db-9fd6-a5506eae88e5",
              "name": "action_poweron",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "398927a1-d8c5-4bb1-9f20-6b3cf04ada1e",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Aws_Operation_PowerOn_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=99485139-1c6b-436f-8f1e-8dd9de21d199}",
                      "@{kind=app_task; name=SYS_GEN__check_login_for_CentOSVm_2_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=6a117101-a89a-465c-8e47-f0c6dff52025}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "VMOPERATION_AWS_VM",
                    "uuid": "99485139-1c6b-436f-8f1e-8dd9de21d199",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "operation_type": "action_poweron",
                      "type": "GENERIC_OPERATION"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Aws_Operation_PowerOn_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CHECK_LOGIN",
                    "uuid": "6a117101-a89a-465c-8e47-f0c6dff52025",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "retries": "5",
                      "dial_timeout": "",
                      "timeout": "60",
                      "address": "@@{public_ip_address}@@",
                      "type": "CHECK_LOGIN",
                      "sleep_time": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__check_login_for_CentOSVm_2_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "8c6f499c-9df1-4da2-a1c0-b9415e47b965",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae",
                  "uuid": "398927a1-d8c5-4bb1-9f20-6b3cf04ada1e"
                },
                "name": "SYS_GEN__Runbook_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
              }
            },
            {
              "description": "System action for restarting an application",
              "message_list": [],
              "uuid": "de9d7ccd-77de-42d5-82dc-74e99210bdd4",
              "name": "action_restart",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "aa7e2202-d1bd-4b5f-8b05-6849fa9eb12a",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Aws_Operation_Restart_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=a4da01fa-acd3-43db-ab4f-b53b4743e8cc}",
                      "@{kind=app_task; name=SYS_GEN__check_login_for_CentOSVm_2_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=c5d7a7e5-d795-4eef-ad60-429f1fe78876}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "VMOPERATION_AWS_VM",
                    "uuid": "a4da01fa-acd3-43db-ab4f-b53b4743e8cc",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "operation_type": "action_restart",
                      "type": "GENERIC_OPERATION"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Aws_Operation_Restart_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CHECK_LOGIN",
                    "uuid": "c5d7a7e5-d795-4eef-ad60-429f1fe78876",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "retries": "5",
                      "dial_timeout": "",
                      "timeout": "60",
                      "address": "@@{public_ip_address}@@",
                      "type": "CHECK_LOGIN",
                      "sleep_time": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__check_login_for_CentOSVm_2_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "b2e1db5c-34fd-4c76-b8d5-956889c6dcdb",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae",
                  "uuid": "aa7e2202-d1bd-4b5f-8b05-6849fa9eb12a"
                },
                "name": "SYS_GEN__Runbook_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
              }
            },
            {
              "description": "System action for suspending an application",
              "message_list": [],
              "uuid": "e107c67a-1aac-4972-af03-cac4d270fbb8",
              "name": "action_suspend",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "bef50810-3c4f-42f5-b36c-90b9b5adeccd",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "6616c2ef-b307-4929-9ae4-fcf859e437c9",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae",
                  "uuid": "bef50810-3c4f-42f5-b36c-90b9b5adeccd"
                },
                "name": "SYS_GEN__Runbook_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
              }
            },
            {
              "description": "System action for modifying an application",
              "message_list": [],
              "uuid": "24ca4eec-5398-4385-96b4-bae8081bb91c",
              "name": "action_modify",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "8686293c-be4a-4162-8e01-2699e88a5370",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "6c8b6efa-e6ec-4713-b528-5e7e395bee27",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae",
                  "uuid": "8686293c-be4a-4162-8e01-2699e88a5370"
                },
                "name": "SYS_GEN__Runbook_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
              }
            },
            {
              "description": "System action for powering off an application",
              "message_list": [],
              "uuid": "3829f850-e6c5-47af-93f9-2b797efec3c1",
              "name": "action_poweroff",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "49393156-f475-4d22-9320-f257b14fb134",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Aws_Operation_PowerOff_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=5e461158-dc29-4225-9f27-67cadb8e245f}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "VMOPERATION_AWS_VM",
                    "uuid": "5e461158-dc29-4225-9f27-67cadb8e245f",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "operation_type": "action_poweroff",
                      "type": "GENERIC_OPERATION"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Aws_Operation_PowerOff_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "5c2dd171-558d-4a2d-96dd-4b16eac76c7b",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae",
                  "uuid": "49393156-f475-4d22-9320-f257b14fb134"
                },
                "name": "SYS_GEN__Runbook_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
              }
            },
            {
              "description": "System action for deleting an application. Deletes created VMs as well",
              "message_list": [],
              "uuid": "46969d8e-79c1-4f95-8014-7b4c0e79cb6b",
              "name": "action_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "efc3de6c-4c1f-4cdb-a1e5-8dd677246e62",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Aws_Delete_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=d4375fda-86e5-4a04-b9ef-584c5819448c}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DELETE_AWS_VM",
                    "uuid": "d4375fda-86e5-4a04-b9ef-584c5819448c",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Aws_Delete_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "d97632e0-1b34-4ced-abc4-81b46e8d545a",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae",
                  "uuid": "efc3de6c-4c1f-4cdb-a1e5-8dd677246e62"
                },
                "name": "SYS_GEN__Runbook_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
              }
            },
            {
              "description": "System action for deleting an application. Does not delete created VMs",
              "message_list": [],
              "uuid": "45b5bee6-ebfc-4df5-a8a2-e0993b1d8f7f",
              "name": "action_soft_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "0ce236ff-164f-4aff-967b-4f353ee158e2",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Substrate_Element_Delete_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=92e5bbe6-8477-4ecc-bf43-c5d8d6d9fc8b}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SOFT_DELETE_ELEMENT",
                    "uuid": "92e5bbe6-8477-4ecc-bf43-c5d8d6d9fc8b",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Substrate_Element_Delete_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "0ced8358-1389-4afe-9353-e2fd522e3dd8",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae",
                  "uuid": "0ce236ff-164f-4aff-967b-4f353ee158e2"
                },
                "name": "SYS_GEN__Runbook_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
              }
            }
          ],
          "message_list": [],
          "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0",
          "state": "ACTIVE",
          "readiness_probe": {
            "connection_type": "SSH",
            "retries": "5",
            "connection_protocol": "",
            "disable_readiness_probe": true,
            "address": "@@{public_ip_address}@@",
            "delay_secs": "60",
            "connection_port": 22
          },
          "editables": {},
          "os_type": "Linux",
          "type": "AWS_VM",
          "create_spec": {
            "name": "vm-@@{calm_array_index}@@-@@{calm_time}@@",
            "availability_zone_reference": null,
            "backup_policy": null,
            "type": "PROVISION_AWS_VM",
            "cluster_reference": null,
            "resources": {
              "instance_profile_name": "",
              "instance_type": "t2.micro",
              "subnet_id": "subnet-b9c19af2",
              "key_name": "calm-user-key",
              "region": "us-west-2",
              "availability_zone": "us-west-2a",
              "instance_initiated_shutdown_behavior": "",
              "user_data": "",
              "image_id": "ami-018d89fd7bf4a0001",
              "state": "RUNNING",
              "security_group_list": [
                {
                  "type": "",
                  "security_group_id": "sg-0f4228333ed236d72"
                }
              ],
              "block_device_map": {
                "data_disk_list": [],
                "type": "",
                "root_disk": {
                  "size_gb": 8,
                  "volume_type": "GP2",
                  "device_name": "/dev/xvda",
                  "iops": 1,
                  "snapshot_id": "",
                  "type": "",
                  "delete_on_termination": true
                }
              },
              "private_ip_address": "",
              "vpc_id": "vpc-2d6cc055",
              "tag_list": [],
              "type": "",
              "account_uuid": "eaa2a061-0608-16d8-f81b-7bdbd6fc264b",
              "associate_public_ip_address": true
            }
          },
          "variable_list": [],
          "name": "CentOSVm_2"
        },
        {
          "description": "",
          "action_list": [
            {
              "description": "",
              "message_list": [],
              "uuid": "7e3aa26c-da17-4fdd-a187-6250d76193b4",
              "name": "pre_action_create",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "fragment",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "232758e5-206b-4a29-a72a-4c55ff06458e",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=CalmGetAppStatus; uuid=ffca6e01-d5b9-4498-b9d5-8dd294ae9ef0}",
                      "@{kind=app_task; name=ExtractAppConfig; uuid=65cd476d-9fd3-4170-9380-eee63ca92b49}",
                      "@{kind=app_task; name=CreateJiraTicket; uuid=6fc10136-2a74-48db-9993-8ec927a1e8eb}",
                      "@{kind=app_task; name=GetHostname; uuid=dd6402cd-018b-41fc-aba8-fb8c24137b48}",
                      "@{kind=app_task; name=GetIpAddress; uuid=3129d634-9513-4025-908d-588bfaa0207f}",
                      "@{kind=app_task; name=Pre_create task_5; uuid=a2ba6fda-b855-414c-bb82-3178c1ce05e7}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "    ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "5ef1d61d_dag_cloned_1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "ffca6e01-d5b9-4498-b9d5-8dd294ae9ef0",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:       salaheddine.gassim@nutanix.com\n# * version:      03242020 - initial version\n# task_name:      CalmGetAppStatus\n# description:    This script gets the status of an application.\n# endregion\n\n# region capture Calm macros\npc_ip = '@@{prism_ip}@@'\nprism_username = '@@{prism.username}@@'\nprism_secret = '@@{prism.secret}@@'\napp_uuid = '@@{calm_application_uuid}@@'\n# endregion\n\n# region prepare variables\nheaders = {'content-type': 'application/json'}\n# endregion\n\n# region REST call: Get Apps\nmethod = 'GET'\nurl = \"https://{}:9440/api/nutanix/v3/apps/{}\".format(pc_ip,app_uuid)\n\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, auth='BASIC', user=prism_username, passwd=prism_secret,\n              headers=headers, verify=False)\n\nif resp.ok:\n    json_resp = json.loads(resp.content)\n    print(\"app_status={}\".format(json_resp['status']['state']))\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n",
                      "eval_variables": "app_status",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "CalmGetAppStatus"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "65cd476d-9fd3-4170-9380-eee63ca92b49",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "applications_config = {\n  \"WWW\": {\n    \"awx_inventory_id\": 2,\n    \"awx_ansible_groups\": \"linux,webservers\",\n    \"awx_job_template_id\": 11,\n    \"jenkins_job_name\": \"Calm_test\",\n    \"f5_config\": {\n      \"enabled\": \"yes\",\n      \"network_pool\": 12,\n      \"vs_port\": \"80\",\n      \"vs_protocol\": \"tcp\",\n      \"partition\": \"Common\",\n      \"pool_monitor\" : \"/Common/https and /Common/tcp\"\n    }\n  },\n  \"APP01\": {\n    \"awx_inventory_id\": 2,\n    \"awx_ansible_groups\": \"linux,webservers\",\n    \"awx_job_template_id\": 9,\n    \"jenkins_job_name\": \"Calm_test\",\n    \"f5_config\": {\n      \"enabled\": \"yes\",\n      \"network_pool\": 12,\n      \"vs_port\": \"80\",\n      \"vs_protocol\": \"tcp\",\n      \"partition\": \"Common\",\n      \"pool_monitor\" : \"/Common/https and /Common/tcp\"\n    }\n  },\n  \"APP02\": {\n    \"awx_inventory_id\": 3,\n    \"awx_ansible_groups\": \"linux,webservers\",\n    \"awx_job_template_id\": 9,\n    \"jenkins_job_name\": \"Calm_test\",\n    \"f5_config\": {\n      \"enabled\": \"yes\",\n      \"network_pool\": 12,\n      \"vs_port\": \"80\",\n      \"vs_protocol\": \"tcp\",\n      \"partition\": \"Common\",\n      \"pool_monitor\" : \"/Common/https and /Common/tcp\"\n    }\n  }\n}\n\napp_identity = json.loads(json.dumps(applications_config))\nprint(\"awx_inventory_id={}\".format(app_identity['@@{source_app}@@']['awx_inventory_id']))\nprint(\"awx_ansible_groups={}\".format(app_identity['@@{source_app}@@']['awx_ansible_groups']))\nprint(\"awx_job_template_id={}\".format(app_identity['@@{source_app}@@']['awx_job_template_id']))\nprint(\"awx_application_name={}\".format(app_identity['@@{source_app}@@']))\nprint(\"jenkins_job_name={}\".format(app_identity['@@{source_app}@@']['jenkins_job_name']))\nprint(\"f5_enabled={}\".format(app_identity['@@{source_app}@@']['f5_config']['enabled']))\nprint(\"f5_vs_port={}\".format(app_identity['@@{source_app}@@']['f5_config']['vs_port']))\nprint(\"f5_network_pool={}\".format(app_identity['@@{source_app}@@']['f5_config']['network_pool']))\nprint(\"f5_vs_protocol={}\".format(app_identity['@@{source_app}@@']['f5_config']['vs_protocol']))\nprint(\"f5_partition={}\".format(app_identity['@@{source_app}@@']['f5_config']['partition']))\nprint(\"f5_pool_monitor={}\".format(app_identity['@@{source_app}@@']['f5_config']['pool_monitor']))",
                      "eval_variables": "awx_inventory_id awx_ansible_groups awx_job_template_id application_name jenkins_job_name f5_enabled f5_vs_port f5_network_pool f5_vs_protocol f5_partition f5_pool_monitor",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "ExtractAppConfig"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "6fc10136-2a74-48db-9993-8ec927a1e8eb",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraCreateTicket\n# description:  Jira ticket creation using the deployed vm specs\n# input vars:   application_name, jira_project_key, policy_id, f5_enabled\n# output vars:  jira_parent_ticket_name\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\njira_project_key = \"@@{jira_project_name}@@\"\napplication_name = \"@@{calm_application_name}@@\"\n#policy_id = \"@@{fortigate_policy}@@\".split(\"-\")[0]\n#f5_enabled = \"@@{f5_enabled}@@\"\ntotal_instances = str(\"@@{instance_count}@@\")\nticket_summary = application_name + \" vm deployment\"\n# endregion\n\n\ndef create_jira_ticket(api_server, jira_login, jira_api_token, jira_project_key,\n                       application_name, total_instances, ticket_summary):\n\n\n  # region prepare api call\n  api_server_port = \"443\"\n  api_server_endpoint = \"/rest/api/3/issue\"\n  url = \"https://{}:{}{}\".format(\n      api_server,\n      api_server_port,\n      api_server_endpoint\n  )\n  method = \"POST\"\n  headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n  }\n  create_payload = {\n      \"fields\": {\n          \"project\": {\n              \"key\": jira_project_key\n          },\n          \"description\": {\n              \"version\": 1,\n              \"type\": \"doc\",\n              \"content\": [\n                  {\n                      \"type\": \"paragraph\",\n                      \"content\": [\n                          {\n                              \"type\": \"text\",\n                              \"text\": ticket_summary\n                          },\n                          {\n                              \"type\": \"hardBreak\"\n                          },\n                          {\n                              \"type\": \"text\",\n                              \"text\": \"Current deployment configuration:\"\n                          },\n                          {\n                              \"type\": \"hardBreak\"\n                          },\n                          {\n                              \"type\": \"text\",\n                              \"text\": \"number of deployed instance: \" + total_instances\n                          }\n                      ]\n                  }\n              ]\n          },\n          \"summary\": ticket_summary,\n          \"labels\": [\n              \"calm\"\n          ],\n          \"issuetype\": {\n              \"name\": \"Task\"\n          }\n      }\n\n  }\n  # endregion\n\n  # region make api call\n  # make the API call and capture the results in the variable called \"resp\"\n  print(\"Making a {} API call to {}\".format(method, url))\n  resp = urlreq(url, verb=method, params=json.dumps(create_payload),\n                auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\n                verify=False\n                )\n\n  # deal with the result/response\n  if resp.ok:\n      print(\"Request was successful. Status code: {}\".format(resp.status_code))\n      result = json.loads(resp.content)\n      print(\"Ticket {} was created\".format(result['key']))\n      print(\"jira_parent_ticket={}\".format(result['key']))\n\n\n  else:\n      print(\"Request failed\")\n      print(\"Headers: {}\".format(headers))\n      print('Status code: {}'.format(resp.status_code))\n      print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n      exit(1)\n  # endregion\n\n\nsleep(10)\ncalm_array_index = int('@@{calm_array_index}@@')\nif (\"@@{app_status}@@\" == \"provisioning\") and (calm_array_index == 0):\n    print(\"Creating Jira ticket for the application deployment\")\n    ticket_summary = application_name + \" vm deployment\"\n    create_jira_ticket(api_server, jira_login, jira_api_token, jira_project_key,\n                       application_name, total_instances, ticket_summary)\nelif calm_array_index > 0 and (\"@@{app_status}@@\" == \"running\"):\n    ticket_summary = application_name + \" ScaleOut operation\"\n    print(\"Creating Jira ticket for ScaleOut operation\")\n    create_jira_ticket(api_server, jira_login, jira_api_token, jira_project_key,\n                       application_name, total_instances, ticket_summary)\n",
                      "eval_variables": "jira_parent_ticket",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "CreateJiraTicket"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "dd6402cd-018b-41fc-aba8-fb8c24137b48",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "print(\"vm_name=toto-@@{calm_array_index}@@\")",
                      "eval_variables": "vm_name",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "GetHostname"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "3129d634-9513-4025-908d-588bfaa0207f",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "print \"ok\""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "GetIpAddress"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "a2ba6fda-b855-414c-bb82-3178c1ce05e7",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "print(\"@@{calm_array_index}@@\")\nprint(\"@@{jira_parent_ticket}@@\")\n\n\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "Pre_create task_5"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "e6a79cd9-80bd-4fbc-8cfb-c1de2e8862b3",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "5ef1d61d_dag_cloned_1",
                  "uuid": "232758e5-206b-4a29-a72a-4c55ff06458e"
                },
                "name": "035aa427_runbook_cloned_0"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "f590d44d-156a-4474-8dac-2ff85dad042c",
              "name": "post_action_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "fragment",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "271edfd4-5493-4330-8847-2e313663e2c2",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=CloseJiraTicket; uuid=af17b7f9-e65b-495d-8fd4-7c5d3477b8b2}",
                      "@{kind=app_task; name=Post_delete task2; uuid=2d9440a7-1b63-4762-865f-258ce72be850}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "3e7108cf_dag_cloned_1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "af17b7f9-e65b-495d-8fd4-7c5d3477b8b2",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraUpdateTicket\n# description:  updating the ticket status with the provided payload\n# input vars:   transition_id, ticket_name\n# output vars:  none\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\ntransition_id = 41 # 31 = in progress / 41 = Done\nticket_name = \"@@{jira_child_ticket}@@\" # ticket that need to be updated\n# endregion\n\ndef update_jira_ticket(api_server, jira_login, jira_api_token, transition_id,\n                       ticket_name):\n        \n    # region prepare api call\n    api_server_port = \"443\"\n    api_server_endpoint = \"/rest/api/3/issue/\" + ticket_name + \"/transitions\"\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    }\n    update_payload = {\n        \"transition\": {\n        \"id\": transition_id\n    }\n        \n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(update_payload),\\\n                auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n                verify=False\n                )\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))    \n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\nprint(\"@@{app_status}@@\")\ncalm_array_index = int('@@{calm_array_index}@@')\nif (\"@@{app_status}@@\" == \"provisioning\") and calm_array_index == 0:\n    print(\"Updating Jira ticket for the application delete\")\n    \n    update_jira_ticket(api_server, jira_login, jira_api_token, transition_id,\n                       ticket_name)\nelif calm_array_index > 0 and (\"@@{app_status}@@\" == \"running\"):\n\n    print(\"Updating Jira ticket for ScaleOut operation\")\n    update_jira_ticket(api_server, jira_login, jira_api_token, transition_id,\n                       ticket_name)"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "CloseJiraTicket"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "2d9440a7-1b63-4762-865f-258ce72be850",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "print(\"@@{app_status}@@\")"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "Post_delete task2"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "2c3a538a-cda4-42fe-94fd-3548ba74a56b",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "3e7108cf_dag_cloned_1",
                  "uuid": "271edfd4-5493-4330-8847-2e313663e2c2"
                },
                "name": "097095e6_runbook_cloned_0"
              }
            },
            {
              "description": "System action for creating an application",
              "message_list": [],
              "uuid": "4839199b-585b-4249-9d2d-0de91c9e57ca",
              "name": "action_create",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "cd02e35c-1dab-4449-aff1-483b9e97ceb6",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Vmware_Provision_aff2237c_2a45_4ac1_aa79_bf1128381203; uuid=e381bbb7-2ebb-483e-b892-abae7867f1a2}",
                      "@{kind=app_task; name=SYS_GEN__check_login_for_CentOSVm_Vmw_aff2237c_2a45_4ac1_aa79_bf1128381203; uuid=b4e52c78-df67-45f4-8c77-1e7286a54ee7}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "PROVISION_VCENTER",
                    "uuid": "e381bbb7-2ebb-483e-b892-abae7867f1a2",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "compute_drs_mode": false,
                      "name": "@@{vm_name}@@",
                      "storage_pod": "",
                      "drs_mode": false,
                      "library": null,
                      "cluster": "",
                      "host": "00000000-0000-0000-0000-0cc47a64b3a0",
                      "clone_is_template": false,
                      "template": "503c5c2c-1a61-33aa-5bba-9e6511692a21",
                      "datastore": "ds:///vmfs/volumes/be77b032-1ec18851/",
                      "storage_drs_mode": false,
                      "type": "PROVISION_VMWARE_VM",
                      "folder": null,
                      "resources": "@{nic_list=System.Object[]; tag_list=System.Object[]; template_nic_list=System.Object[]; template_controller_list=System.Object[]; num_vcpus_per_socket=1; memory_hot_plug=False; num_sockets=1; controller_list=System.Object[]; memory_size_mib=2048; power_state=poweron; guest_customization=; cpu_hot_add=False; template_disk_list=System.Object[]; type=; account_uuid=01eccf8a-e870-530b-c3a5-1bff2ed2f650; disk_list=System.Object[]}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Vmware_Provision_aff2237c_2a45_4ac1_aa79_bf1128381203"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CHECK_LOGIN",
                    "uuid": "b4e52c78-df67-45f4-8c77-1e7286a54ee7",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "retries": "5",
                      "dial_timeout": "",
                      "timeout": "60",
                      "address": "@@{platform.ipAddressList[0]}@@",
                      "type": "CHECK_LOGIN",
                      "sleep_time": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__check_login_for_CentOSVm_Vmw_aff2237c_2a45_4ac1_aa79_bf1128381203"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "21ae3aa4-29c8-4d90-8c9c-db1edda58ef8",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b",
                  "uuid": "cd02e35c-1dab-4449-aff1-483b9e97ceb6"
                },
                "name": "SYS_GEN__Runbook_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
              }
            },
            {
              "description": "System action for powering on an application",
              "message_list": [],
              "uuid": "93aae598-82c2-42a6-81dd-87727b41471a",
              "name": "action_poweron",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "f675406a-414d-41cc-bc9a-a77570a3759a",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Vmware_Operation_PowerOn_aff2237c_2a45_4ac1_aa79_bf1128381203; uuid=74dd73f7-14c2-4f87-a272-b7f35e1feff7}",
                      "@{kind=app_task; name=SYS_GEN__check_login_for_CentOSVm_Vmw_aff2237c_2a45_4ac1_aa79_bf1128381203; uuid=f14c9399-13d9-4988-aac4-85678796326c}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "VMOPERATION_VCENTER",
                    "uuid": "74dd73f7-14c2-4f87-a272-b7f35e1feff7",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "operation_type": "action_poweron",
                      "type": "GENERIC_OPERATION"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Vmware_Operation_PowerOn_aff2237c_2a45_4ac1_aa79_bf1128381203"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CHECK_LOGIN",
                    "uuid": "f14c9399-13d9-4988-aac4-85678796326c",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "retries": "5",
                      "dial_timeout": "",
                      "timeout": "60",
                      "address": "@@{platform.ipAddressList[0]}@@",
                      "type": "CHECK_LOGIN",
                      "sleep_time": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__check_login_for_CentOSVm_Vmw_aff2237c_2a45_4ac1_aa79_bf1128381203"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "5b2b41fd-ef3f-4869-8a05-cdc029fb3531",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b",
                  "uuid": "f675406a-414d-41cc-bc9a-a77570a3759a"
                },
                "name": "SYS_GEN__Runbook_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
              }
            },
            {
              "description": "System action for restarting an application",
              "message_list": [],
              "uuid": "7a94dd67-4d8e-402b-9698-694dd46da5f0",
              "name": "action_restart",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "115d8a6c-802f-4199-b3d4-cf7a868d44ef",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Vmware_Operation_Restartaff2237c_2a45_4ac1_aa79_bf1128381203; uuid=a2add8b8-8190-4ed4-b533-95c13e49a1cc}",
                      "@{kind=app_task; name=SYS_GEN__check_login_for_CentOSVm_Vmw_aff2237c_2a45_4ac1_aa79_bf1128381203; uuid=df5f1c4f-8874-406c-8086-531933fe614a}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "VMOPERATION_VCENTER",
                    "uuid": "a2add8b8-8190-4ed4-b533-95c13e49a1cc",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "operation_type": "action_restart",
                      "type": "GENERIC_OPERATION"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Vmware_Operation_Restartaff2237c_2a45_4ac1_aa79_bf1128381203"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CHECK_LOGIN",
                    "uuid": "df5f1c4f-8874-406c-8086-531933fe614a",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "retries": "5",
                      "dial_timeout": "",
                      "timeout": "60",
                      "address": "@@{platform.ipAddressList[0]}@@",
                      "type": "CHECK_LOGIN",
                      "sleep_time": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__check_login_for_CentOSVm_Vmw_aff2237c_2a45_4ac1_aa79_bf1128381203"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "5cc16368-da15-4c08-a60c-9784b15c136d",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b",
                  "uuid": "115d8a6c-802f-4199-b3d4-cf7a868d44ef"
                },
                "name": "SYS_GEN__Runbook_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
              }
            },
            {
              "description": "System action for suspending an application",
              "message_list": [],
              "uuid": "02aed437-466c-4050-b9ca-1d787bc5ec55",
              "name": "action_suspend",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "12e3a46d-177b-4985-b5d0-66aecebd6cd4",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "3120c0f0-2568-4bfc-acf6-0dc784731278",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b",
                  "uuid": "12e3a46d-177b-4985-b5d0-66aecebd6cd4"
                },
                "name": "SYS_GEN__Runbook_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
              }
            },
            {
              "description": "System action for modifying an application",
              "message_list": [],
              "uuid": "6279762f-f80c-41e8-8c65-5cc1ff85d6ab",
              "name": "action_modify",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "94264643-e37d-4442-96de-71fe80ba44aa",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "4c041d5b-7242-4db3-af8d-ab8e501f9164",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b",
                  "uuid": "94264643-e37d-4442-96de-71fe80ba44aa"
                },
                "name": "SYS_GEN__Runbook_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
              }
            },
            {
              "description": "System action for powering off an application",
              "message_list": [],
              "uuid": "384410e2-77a8-4741-be96-4db7e45b8a71",
              "name": "action_poweroff",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "e71f7867-f4c2-473c-accc-e2749db17c50",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Vmware_Operation_Poweroff_aff2237c_2a45_4ac1_aa79_bf1128381203; uuid=dd7c4607-3cb2-4f2a-8d02-1c4dbfa75960}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "VMOPERATION_VCENTER",
                    "uuid": "dd7c4607-3cb2-4f2a-8d02-1c4dbfa75960",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "operation_type": "action_poweroff",
                      "type": "GENERIC_OPERATION"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Vmware_Operation_Poweroff_aff2237c_2a45_4ac1_aa79_bf1128381203"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "cd97a262-b553-4a11-91a3-8ca1ff5b3264",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b",
                  "uuid": "e71f7867-f4c2-473c-accc-e2749db17c50"
                },
                "name": "SYS_GEN__Runbook_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
              }
            },
            {
              "description": "System action for deleting an application. Deletes created VMs as well",
              "message_list": [],
              "uuid": "50867046-f081-432f-82da-90619fd2611d",
              "name": "action_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "48ba9db5-09b6-490a-a6d0-9750273c6714",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Vmware_Delete_aff2237c_2a45_4ac1_aa79_bf1128381203; uuid=3ca8d303-01ef-48a0-a19b-ec992e5699d4}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DELETE_VCENTER",
                    "uuid": "3ca8d303-01ef-48a0-a19b-ec992e5699d4",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Vmware_Delete_aff2237c_2a45_4ac1_aa79_bf1128381203"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "6acea0d7-6182-4e2b-965f-de1118b8d94d",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b",
                  "uuid": "48ba9db5-09b6-490a-a6d0-9750273c6714"
                },
                "name": "SYS_GEN__Runbook_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
              }
            },
            {
              "description": "System action for deleting an application. Does not delete created VMs",
              "message_list": [],
              "uuid": "7c5d818f-c02f-4217-88e6-5a134f685e40",
              "name": "action_soft_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "0850a5d3-83da-41df-a170-3ffccae330ae",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Substrate_Element_Delete_aff2237c_2a45_4ac1_aa79_bf1128381203; uuid=cb9b73d9-0d6b-4216-a773-097da898ddfe}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SOFT_DELETE_ELEMENT",
                    "uuid": "cb9b73d9-0d6b-4216-a773-097da898ddfe",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Substrate_Element_Delete_aff2237c_2a45_4ac1_aa79_bf1128381203"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "c262630c-7945-4058-b67b-923f842a4d88",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b",
                  "uuid": "0850a5d3-83da-41df-a170-3ffccae330ae"
                },
                "name": "SYS_GEN__Runbook_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
              }
            }
          ],
          "message_list": [],
          "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a",
          "state": "ACTIVE",
          "readiness_probe": {
            "connection_type": "SSH",
            "retries": "5",
            "connection_protocol": "",
            "disable_readiness_probe": false,
            "address": "@@{platform.ipAddressList[0]}@@",
            "delay_secs": "60",
            "connection_port": 22,
            "login_credential_local_reference": {
              "kind": "app_credential",
              "name": "centos",
              "uuid": "43d8326c-f917-4a7f-888f-21f5d2d6c36f"
            }
          },
          "editables": {
            "create_spec": {
              "resources": {
                "template_nic_list": {},
                "template_disk_list": {},
                "controller_list": {},
                "template_controller_list": {},
                "nic_list": {}
              }
            }
          },
          "os_type": "Linux",
          "type": "VMWARE_VM",
          "create_spec": {
            "compute_drs_mode": false,
            "name": "@@{vm_name}@@",
            "storage_pod": "",
            "drs_mode": false,
            "library": null,
            "cluster": "",
            "host": "00000000-0000-0000-0000-0cc47a64b3a0",
            "clone_is_template": false,
            "template": "503c5c2c-1a61-33aa-5bba-9e6511692a21",
            "datastore": "ds:///vmfs/volumes/be77b032-1ec18851/",
            "storage_drs_mode": false,
            "type": "PROVISION_VMWARE_VM",
            "folder": null,
            "resources": {
              "nic_list": [
                {
                  "nic_type": "vmxnet3",
                  "type": "",
                  "net_name": "key-vim.host.PortGroup-568"
                }
              ],
              "tag_list": [],
              "template_nic_list": [
                {
                  "nic_type": "vmxnet3",
                  "is_deleted": true,
                  "type": "",
                  "net_name": "key-vim.host.PortGroup-568",
                  "key": 4000
                }
              ],
              "template_controller_list": [
                {
                  "controller_type": "ParaVirtualSCSIController",
                  "bus_sharing": "noSharing",
                  "type": "",
                  "is_deleted": false,
                  "key": 1000
                }
              ],
              "num_vcpus_per_socket": 1,
              "memory_hot_plug": false,
              "num_sockets": 1,
              "controller_list": [],
              "memory_size_mib": 2048,
              "power_state": "poweron",
              "guest_customization": {
                "customization_type": "GUEST_OS_LINUX",
                "cloud_init": "#cloud-config\nusers:\n  - name: \"centos\"\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']\n    ssh-authorized-keys:\n    - @@{ansible_public_key}@@\n    ssh_pwauth: True\n    disable_root: false\n \nruncmd:\n - [ hostnamectl, set-hostname, \"@@{vm_name}@@\" ]\n - [ ifdown, eth0 ]\n - [ ifup, eth0 ]",
                "type": "",
                "customization_name": ""
              },
              "cpu_hot_add": false,
              "template_disk_list": [
                {
                  "disk_size_mb": -1,
                  "is_deleted": false,
                  "disk_mode": "persistent",
                  "device_slot": 0,
                  "adapter_type": "IDE",
                  "iso_path": "",
                  "location": "",
                  "key": 16000,
                  "controller_key": 15000,
                  "disk_type": "cdrom",
                  "type": ""
                },
                {
                  "disk_size_mb": 8192,
                  "is_deleted": false,
                  "disk_mode": "persistent",
                  "device_slot": 0,
                  "adapter_type": "SCSI",
                  "iso_path": "",
                  "location": "ds:///vmfs/volumes/af476b04-86f0cbd1/",
                  "key": 2000,
                  "controller_key": 1000,
                  "disk_type": "disk",
                  "type": ""
                }
              ],
              "type": "",
              "account_uuid": "01eccf8a-e870-530b-c3a5-1bff2ed2f650",
              "disk_list": []
            }
          },
          "variable_list": [],
          "name": "CentOSVm_Vmw"
        }
      ],
      "credential_definition_list": [
        {
          "username": "admin",
          "description": "",
          "state": "ACTIVE",
          "uuid": "6ab7b67c-716d-4fd7-9439-e040ddf95e63",
          "secret": {
            "attrs": {
              "is_secret_modified": false,
              "secret_reference": {}
            }
          },
          "editables": {},
          "cred_class": "static",
          "type": "PASSWORD",
          "name": "awx"
        },
        {
          "username": "salaheddine.gassim@nutanix.com",
          "description": "",
          "state": "ACTIVE",
          "uuid": "795f141f-92c0-4722-a26e-e1c5091dcff4",
          "secret": {
            "attrs": {
              "is_secret_modified": false,
              "secret_reference": {}
            }
          },
          "editables": {},
          "cred_class": "static",
          "type": "PASSWORD",
          "name": "jira"
        },
        {
          "username": "admin",
          "description": "",
          "state": "ACTIVE",
          "uuid": "d7c82f8e-78e4-4c23-b9f8-a83556eb53ab",
          "secret": {
            "attrs": {
              "is_secret_modified": false,
              "secret_reference": {}
            }
          },
          "editables": {},
          "cred_class": "static",
          "type": "PASSWORD",
          "name": "jenkins"
        },
        {
          "username": "centos",
          "description": "",
          "state": "ACTIVE",
          "uuid": "43d8326c-f917-4a7f-888f-21f5d2d6c36f",
          "secret": {
            "attrs": {
              "is_secret_modified": false,
              "secret_reference": {}
            }
          },
          "editables": {},
          "cred_class": "static",
          "type": "KEY",
          "name": "centos"
        },
        {
          "username": "salah.gassim@emeagso.lab",
          "description": "",
          "state": "ACTIVE",
          "uuid": "83a058da-6fc8-4e15-ade0-4a5cb5fa0b8d",
          "secret": {
            "attrs": {
              "is_secret_modified": false,
              "secret_reference": {}
            }
          },
          "editables": {},
          "cred_class": "static",
          "type": "PASSWORD",
          "name": "prism"
        },
        {
          "username": "admin",
          "description": "",
          "state": "ACTIVE",
          "uuid": "75a9238b-6460-4021-9d2b-5a9b803d4d5e",
          "secret": {
            "attrs": {
              "is_secret_modified": false,
              "secret_reference": {}
            }
          },
          "editables": {},
          "cred_class": "static",
          "type": "PASSWORD",
          "name": "fortigate"
        },
        {
          "username": "admin",
          "description": "",
          "state": "ACTIVE",
          "uuid": "6a432e36-5207-4165-b0b0-d3d9694f87ca",
          "secret": {
            "attrs": {
              "is_secret_modified": false,
              "secret_reference": {}
            }
          },
          "editables": {},
          "cred_class": "static",
          "type": "PASSWORD",
          "name": "f5"
        },
        {
          "username": "igor.zecevic@gso.lab",
          "description": "",
          "state": "ACTIVE",
          "uuid": "34adbb95-a462-4b80-b1fc-a06712d66c3b",
          "secret": {
            "attrs": {
              "is_secret_modified": false,
              "secret_reference": {}
            }
          },
          "editables": {},
          "cred_class": "static",
          "type": "PASSWORD",
          "name": "vc"
        },
        {
          "username": "administrator",
          "description": "",
          "state": "ACTIVE",
          "uuid": "6ba3fd11-ffb9-4b5a-b32d-8e196cf0aec5",
          "secret": {
            "attrs": {
              "is_secret_modified": false,
              "secret_reference": {}
            }
          },
          "editables": {},
          "cred_class": "static",
          "type": "PASSWORD",
          "name": "veeam"
        },
        {
          "username": "nutanix",
          "description": "",
          "state": "ACTIVE",
          "uuid": "3ed4cb14-c90e-6526-4cbb-79008fa95647",
          "secret": {
            "attrs": {
              "is_secret_modified": false,
              "secret_reference": {}
            }
          },
          "editables": {},
          "cred_class": "static",
          "type": "PASSWORD",
          "name": "eip"
        }
      ],
      "type": "USER",
      "app_profile_list": [
        {
          "deployment_create_list": [
            {
              "description": "",
              "action_list": [
                {
                  "description": "System action for creating an application",
                  "message_list": [],
                  "uuid": "23e2ab3b-a435-4b10-88df-43054687adfe",
                  "name": "action_create",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=9798f6db-d768-478f-855a-28beb59fd303; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120}",
                      "@{target_any_local_reference=; retries=0; description=; type=CREATE_DEPLOYMENT_ELEMENT; uuid=292c144d-ba42-45a9-ab63-eaaaebd1b884; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__DE_Provision_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=4a6a8d79-0a2e-4a71-a9a8-00c264608415; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__pre_create_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=ffcf2ca9-3d00-4a53-9bb9-a82f353ee8a2; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__create_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=3072daa5-ddf7-431e-931f-e5e274a5fe64; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__install_CRb_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=59e38816-3ccb-4f9a-9302-01fcc1ca8ee4; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__create_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=3256ce37-be5b-4367-b36e-aee040f3fd69; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "2621803f-bafc-4989-9a69-264dfc169c03",
                    "state": "ACTIVE",
                    "variable_list": [],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120",
                      "uuid": "9798f6db-d768-478f-855a-28beb59fd303"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120"
                  }
                },
                {
                  "description": "System action for starting an application",
                  "message_list": [],
                  "uuid": "eaa291b7-9d9c-41f6-b354-fe2d150bf86c",
                  "name": "action_start",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=74d29021-0670-4da2-b280-8aecf41c6fb7; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=b51b328f-d9f7-4494-b05d-be6ffbfa9a3f; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__start_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=708227ac-964c-4b6c-806b-dcfcddfb9769; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "85b91a82-354b-4c55-8a9e-383c0cf96936",
                    "state": "ACTIVE",
                    "variable_list": [],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120",
                      "uuid": "74d29021-0670-4da2-b280-8aecf41c6fb7"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120"
                  }
                },
                {
                  "description": "System action for restarting an application",
                  "message_list": [],
                  "uuid": "8600602c-a52b-4b04-8317-862de7585d0a",
                  "name": "action_restart",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=9fff25f0-becc-4ff3-8c8d-17dbecc3d5a1; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=2a09c434-05f8-49f0-907e-b1899046c7ea; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__restart_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=3d4fb9fd-b695-4ace-8daa-a7e1e1b4ced9; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__restart_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "a3807150-4012-4b1d-b617-00af15f658b7",
                    "state": "ACTIVE",
                    "variable_list": [],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120",
                      "uuid": "9fff25f0-becc-4ff3-8c8d-17dbecc3d5a1"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120"
                  }
                },
                {
                  "description": "System action for stopping an application",
                  "message_list": [],
                  "uuid": "1df46400-f998-4800-9342-85b8650529cf",
                  "name": "action_stop",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=068195af-ec7d-4ec1-94cb-7e80d9209064; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=94c512e5-221d-4a63-9469-eb99d874a4a0; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=fde1e34c-f699-4bd8-b790-ad7fcd8498a1; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__stop_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "f26b1575-6b9f-4da8-ad34-c98dc18f0447",
                    "state": "ACTIVE",
                    "variable_list": [],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120",
                      "uuid": "068195af-ec7d-4ec1-94cb-7e80d9209064"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120"
                  }
                },
                {
                  "description": "System action for deleting an application. Deletes created VMs as well",
                  "message_list": [],
                  "uuid": "c32edea8-fce3-4afa-b75b-4d334d097e25",
                  "name": "action_delete",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=f2a0e795-e6f7-4470-a65e-f6718756d75d; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=139c86d3-aade-4f3a-b846-24b6933fe01c; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=7dcd414b-8695-4066-b002-493732b82c23; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=d8e55b5a-a290-4fcb-b9bb-916d1eb83c6a; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__uninstall_CRb_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=c6ee85be-9952-445b-bc64-3f0af2fcf924; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__delete_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=adaf98c7-6a62-4414-8fe6-185eae07b3c4; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__post_delete_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2}",
                      "@{target_any_local_reference=; retries=0; description=; type=DELETE_DEPLOYMENT_ELEMENT; uuid=439f21ad-36b0-46e4-8350-9a7b47b20e87; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__DE_Delete_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "5879933b-dac6-41e6-b5c5-7b7f64c78572",
                    "state": "ACTIVE",
                    "variable_list": [],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120",
                      "uuid": "f2a0e795-e6f7-4470-a65e-f6718756d75d"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120"
                  }
                },
                {
                  "description": "System action for scaleout",
                  "message_list": [],
                  "uuid": "9bd3a2b4-5d76-42a9-93e4-7a733780713b",
                  "name": "action_scaleout",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=f2c6e0c4-646d-4768-a0c9-eef6ede52b2e; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120}",
                      "@{target_any_local_reference=; retries=0; description=; type=SCALING; uuid=6598b964-7e6c-4ccf-bf77-fde8c27fd223; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Deployment_Scaleout_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "abcffbe5-7a88-4257-a809-e66c61c73ce7",
                    "state": "ACTIVE",
                    "variable_list": [
                      "@{regex=; val_type=STRING; is_mandatory=False; description=; data_type=BASE; message_list=System.Object[]; uuid=a58474e6-954a-4510-b7bd-f05780699fd1; value=0; label=; state=NOT_VALIDATED; attrs=; editables=; is_hidden=False; type=LOCAL; options=; name=scaling_count}"
                    ],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120",
                      "uuid": "f2c6e0c4-646d-4768-a0c9-eef6ede52b2e"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120"
                  }
                },
                {
                  "description": "System action for scalein",
                  "message_list": [],
                  "uuid": "b3071667-b2a5-44c4-81c9-892c466fa9dc",
                  "name": "action_scalein",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=fd3a3fdc-83ce-4436-8dbf-9032c5420b6b; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120}",
                      "@{target_any_local_reference=; retries=0; description=; type=SCALING; uuid=d8a3973d-c456-4ca9-81c2-f45b1a54415a; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Deployment_Scalein_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "2069dd57-5d22-46ef-9a2d-e30fba1b1b3c",
                    "state": "ACTIVE",
                    "variable_list": [
                      "@{regex=; val_type=STRING; is_mandatory=False; description=; data_type=BASE; message_list=System.Object[]; uuid=29dbe95c-df6a-40a9-a0c6-f30a8d9db0cd; value=0; label=; state=NOT_VALIDATED; attrs=; editables=; is_hidden=False; type=LOCAL; options=; name=scaling_count}"
                    ],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120",
                      "uuid": "fd3a3fdc-83ce-4436-8dbf-9032c5420b6b"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120"
                  }
                },
                {
                  "description": "System action for deleting an application. Does not delete created VMs",
                  "message_list": [],
                  "uuid": "6ca11e34-e3c9-434f-875c-66d0d6b80d5c",
                  "name": "action_soft_delete",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=c44d5ae7-684f-4f15-9333-ae3ad76a1965; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=9c3a3f1f-2111-4d71-8953-0fbc468f2a8b; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__soft_delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}",
                      "@{target_any_local_reference=; retries=0; description=; type=SOFT_DELETE_ELEMENT; uuid=70c5ac41-ffa2-4f07-be69-8f01b2639c8e; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Package_Element_Delete_c8247076_e8ea_4ec9_9f66_8cf32084d0ee}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=6b2500a1-01bc-4b5e-a7a8-283f76e6e561; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__soft_delete_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2}",
                      "@{target_any_local_reference=; retries=0; description=; type=SOFT_DELETE_DEPLOYMENT_ELEMENT; uuid=d8cecb01-c2a5-488b-80c0-7ae75f514941; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__DE_Soft_Delete_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "29864b43-2649-4459-8aed-fb251c140642",
                    "state": "ACTIVE",
                    "variable_list": [],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120",
                      "uuid": "c44d5ae7-684f-4f15-9333-ae3ad76a1965"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120"
                  }
                }
              ],
              "message_list": [],
              "published_service_local_reference_list": [],
              "uuid": "737cd01c-4368-4a5d-a4f9-1cde43efa680",
              "default_replicas": "@@{instance_count}@@",
              "min_replicas": "@@{instance_count}@@",
              "state": "ACTIVE",
              "max_replicas": "4",
              "depends_on_list": [],
              "editables": {},
              "package_local_reference_list": [
                {
                  "kind": "app_package",
                  "name": "Package1",
                  "uuid": "9cb5f39d-26e8-4eef-9edc-a39bc9f7dc0c"
                }
              ],
              "substrate_local_reference": {
                "kind": "app_substrate",
                "name": "CentOSVm",
                "uuid": "06e19016-513b-4633-b514-871a80cf2960"
              },
              "type": "GREENFIELD",
              "options": {},
              "variable_list": [],
              "name": "7b8be9c1_deployment"
            }
          ],
          "environment_reference_list": [],
          "application_url": "",
          "description": "",
          "action_list": [
            {
              "description": "",
              "message_list": [],
              "uuid": "edaf38b1-8363-47a1-9b29-4696f9899029",
              "name": "Scale Out",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "8bb53218-6e93-4fdb-8c5d-ef9f2abecf46",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=AddInstance; uuid=4763627a-e5d6-438c-9167-640bfe7fc57f}",
                      "@{kind=app_task; name=my_scale_out; uuid=d0b3c2b4-f8fb-4b96-8e5b-f9cc05789b7d}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "49a380fa_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_blueprint_deployment",
                      "name": "7b8be9c1_deployment",
                      "uuid": "737cd01c-4368-4a5d-a4f9-1cde43efa680"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SCALING",
                    "uuid": "4763627a-e5d6-438c-9167-640bfe7fc57f",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "scaling_count": "1",
                      "type": "",
                      "scaling_type": "SCALEOUT"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "AddInstance"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "d0b3c2b4-f8fb-4b96-8e5b-f9cc05789b7d",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "print(\"bof\")"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "my_scale_out"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "8ef61efa-7a28-43c5-9d39-35c103ad8502",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "49a380fa_dag",
                  "uuid": "8bb53218-6e93-4fdb-8c5d-ef9f2abecf46"
                },
                "name": "c875b7ca_runbook"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "425c1b29-567d-4d21-a095-744020248735",
              "name": "Scale In",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "789347cf-6523-4a70-be1c-cd4b230d6408",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=RemoveInstance; uuid=939e5057-50fe-4996-bf1d-89f66821c4d4}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "72a3d1a3_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_blueprint_deployment",
                      "name": "7b8be9c1_deployment",
                      "uuid": "737cd01c-4368-4a5d-a4f9-1cde43efa680"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SCALING",
                    "uuid": "939e5057-50fe-4996-bf1d-89f66821c4d4",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "scaling_count": "1",
                      "type": "",
                      "scaling_type": "SCALEIN"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "RemoveInstance"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "32f59539-19df-4965-aa83-703716562437",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "72a3d1a3_dag",
                  "uuid": "789347cf-6523-4a70-be1c-cd4b230d6408"
                },
                "name": "e3b02cf9_runbook"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "31d34373-3ef5-4468-a0de-cf62b011d1cf",
              "name": "Take Backup",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "c7ce8dd7-ab8e-4e02-a826-4d9c05ff20dd",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=CreateJiraTicket; uuid=459360d2-1ece-47c0-9e61-daf1f9d52cc1}",
                      "@{kind=app_task; name=LinkJiraParent; uuid=9f0f8bdf-0ce8-48d1-8d66-19bfe9a71767}",
                      "@{kind=app_task; name=CreateVeeamBackup; uuid=f25ae1f5-901b-4add-86e8-c44fd5b060c6}",
                      "@{kind=app_task; name=TagVeeamBackup; uuid=753fd6c6-bd43-4a7c-9589-fe2c7145dd70}",
                      "@{kind=app_task; name=StartVeeamBackup; uuid=7efc289a-e075-4d9f-95d1-23b69515f1bb}",
                      "@{kind=app_task; name=CloseJiraTicket; uuid=b80ceaff-bcd0-410e-97a7-c531ad419dba}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "    ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "ecb3e0ba_dag"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "459360d2-1ece-47c0-9e61-daf1f9d52cc1",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraCreateTicket\n# description:  Jira ticket creation using the deployed vm specs\n# input vars:   application_name, jira_project_key\n# output vars:  jira_ticket_name\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\njira_project_key = \"@@{jira_project_name}@@\"\napplication_name = \"@@{calm_application_name}@@\"\n# endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/api/3/issue\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\ncreate_payload = {\n    \"fields\": {\n    \"project\": {\n      \"key\": jira_project_key\n    },\n    \"description\": {\n      \"version\": 1,\n      \"type\": \"doc\",\n      \"content\": [\n        {\n          \"type\": \"paragraph\",\n          \"content\": [\n            {\n              \"type\": \"text\",\n              \"text\": \"Backup in progress\"\n            }\n          ]\n        }\n      ]\n    },\n    \"summary\": \"Backing-Up \"+ application_name,\n        \"labels\": [\n      \"calm\"\n    ],        \n    \"issuetype\": {\n      \"name\": \"Task\"\n    }\n  }\n    \n}\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, params=json.dumps(create_payload),\\\n              auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n              verify=False\n             )\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful. Status code: {}\".format(resp.status_code))\n    result = json.loads(resp.content)\n    print(\"Ticket {} was created\".format(result['key']))\n    print \"jira_child_ticket=\",result['key']\n    \n    \nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion",
                      "eval_variables": "jira_child_ticket",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "CreateJiraTicket"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "9f0f8bdf-0ce8-48d1-8d66-19bfe9a71767",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraUpdateTicket\n# description:  Link a ticket to it's parent\n# input vars:   jira_link_type\n# output vars:  none\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\njira_link_type = \"@@{jira_link_type}@@\" #10003 = relates to\njira_parent_ticket = \"@@{jira_parent_ticket}@@\"\njira_child_ticket = \"@@{jira_child_ticket}@@\"\n# endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/api/3/issueLink\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\n\nlink_payload = {\n    \"outwardIssue\": {\n        \"key\": jira_child_ticket\n    },\n    \"inwardIssue\": {\n        \"key\": jira_parent_ticket\n    },\n    \"type\": {\n        \"id\": jira_link_type\n    }\n}\n\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, params=json.dumps(link_payload),\\\n              auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n              verify=False\n             )\n\nprint(resp)\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful. Status code: {}\".format(resp.status_code))    \n    \nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(resp.content))\n    exit(1)\n# endregion\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "LinkJiraParent"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "f25ae1f5-901b-4add-86e8-c44fd5b060c6",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "print(\"ok\")"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "CreateVeeamBackup"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "753fd6c6-bd43-4a7c-9589-fe2c7145dd70",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "print(\"ok\")"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "TagVeeamBackup"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "7efc289a-e075-4d9f-95d1-23b69515f1bb",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "print(\"ok\")"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "StartVeeamBackup"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "b80ceaff-bcd0-410e-97a7-c531ad419dba",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraUpdateTicket\n# description:  updating the ticket status with the provided payload\n# input vars:   transition_id, ticket_name\n# output vars:  none\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\ntransition_id = 41 # 31 = in progress / 41 = Done\nticket_name = \"@@{jira_child_ticket}@@\" # ticket that need to be updated\n# endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/api/3/issue/\" + ticket_name + \"/transitions\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\nupdate_payload = {\n    \"transition\": {\n    \"id\": transition_id\n  }\n    \n}\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, params=json.dumps(update_payload),\\\n              auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n              verify=False\n             )\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful. Status code: {}\".format(resp.status_code))    \n    \nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "CloseJiraTicket"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "10e37da5-607b-4b62-987e-de78795a95cf",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "ecb3e0ba_dag",
                  "uuid": "c7ce8dd7-ab8e-4e02-a826-4d9c05ff20dd"
                },
                "name": "ab6f61cd_runbook"
              }
            },
            {
              "description": "System action for creating an application",
              "message_list": [],
              "uuid": "781ab225-5601-48ed-8c26-7624836390fa",
              "name": "action_create",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_profile",
                      "name": "Default",
                      "uuid": "96ba5d77-941f-4f2b-b4ef-6a1eb2196a76"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "712e71aa-72f3-4d9d-8d30-678aca20879a",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__DE_Provision_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120; uuid=a3de72f1-03e2-45f3-a8eb-904e7d8cc356}",
                      "@{kind=app_task; name=SYS_GEN__pre_create_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2; uuid=031d6890-5f89-422f-99c4-7e0a51698b77}",
                      "@{kind=app_task; name=SYS_GEN__create_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2; uuid=669f0862-8b48-4501-a29f-5280c0a129b4}",
                      "@{kind=app_task; name=SYS_GEN__install_CRb_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee; uuid=d0b9e849-2c84-4431-a265-8f89c8c77fef}",
                      "@{kind=app_task; name=SYS_GEN__create_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=c4b5bd28-9a36-4e27-b84c-1a94625d370e}",
                      "@{kind=app_task; name=SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=ce3d5552-1025-4904-b906-01dfcb8f0c3e}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "    ",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Application_ba9a5443_363f_40c7_a86d_c336f340222b"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_blueprint_deployment",
                      "name": "7b8be9c1_deployment",
                      "uuid": "737cd01c-4368-4a5d-a4f9-1cde43efa680"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CREATE_DEPLOYMENT_ELEMENT",
                    "uuid": "a3de72f1-03e2-45f3-a8eb-904e7d8cc356",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DE_Provision_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "031d6890-5f89-422f-99c4-7e0a51698b77",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7b8be9c1_deployment; uuid=737cd01c-4368-4a5d-a4f9-1cde43efa680}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=035aa427_runbook; uuid=6a69ee15-39b2-4713-a93a-1e35473e53de}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__pre_create_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "669f0862-8b48-4501-a29f-5280c0a129b4",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7b8be9c1_deployment; uuid=737cd01c-4368-4a5d-a4f9-1cde43efa680}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Substrate_e9f5177c_746f_4814_b024_505fc20559f2; uuid=21829c6d-b9e3-4b50-aba3-720f7e2f625c}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__create_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1",
                      "uuid": "9cb5f39d-26e8-4eef-9edc-a39bc9f7dc0c"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "d0b9e849-2c84-4431-a265-8f89c8c77fef",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7b8be9c1_deployment; uuid=737cd01c-4368-4a5d-a4f9-1cde43efa680}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee; uuid=50677039-79e5-4d55-b200-2979e00496d6}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__install_CRb_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "c4b5bd28-9a36-4e27-b84c-1a94625d370e",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7b8be9c1_deployment; uuid=737cd01c-4368-4a5d-a4f9-1cde43efa680}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=f0d6aa56_runbook; uuid=6f03436d-c46f-42c1-838f-3ef00b072f23}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__create_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "ce3d5552-1025-4904-b906-01dfcb8f0c3e",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7b8be9c1_deployment; uuid=737cd01c-4368-4a5d-a4f9-1cde43efa680}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=efba402c_runbook; uuid=d0e1b19c-af6c-419d-87be-27afa329e778}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "cfe3d64a-801c-4498-92ea-831c57b4db9b",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Application_ba9a5443_363f_40c7_a86d_c336f340222b",
                  "uuid": "712e71aa-72f3-4d9d-8d30-678aca20879a"
                },
                "name": "SYS_GEN__Runbook_Application_ba9a5443_363f_40c7_a86d_c336f340222b"
              }
            },
            {
              "description": "System action for starting an application",
              "message_list": [],
              "uuid": "68e63679-ac82-486c-9803-c2f09f74c42b",
              "name": "action_start",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_profile",
                      "name": "Default",
                      "uuid": "96ba5d77-941f-4f2b-b4ef-6a1eb2196a76"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "7486b5eb-0940-4521-9e56-8e40aaaa4afd",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__start_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2; uuid=62970a3e-221b-46d9-953d-7020dd059e2c}",
                      "@{kind=app_task; name=SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=d8472c0a-0114-4b90-a511-000edc0af3c9}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Application_ba9a5443_363f_40c7_a86d_c336f340222b"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "62970a3e-221b-46d9-953d-7020dd059e2c",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7b8be9c1_deployment; uuid=737cd01c-4368-4a5d-a4f9-1cde43efa680}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Substrate_e9f5177c_746f_4814_b024_505fc20559f2; uuid=3b01ecd1-0b6e-42aa-ab27-5012a2d6840e}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__start_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "d8472c0a-0114-4b90-a511-000edc0af3c9",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7b8be9c1_deployment; uuid=737cd01c-4368-4a5d-a4f9-1cde43efa680}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=efba402c_runbook; uuid=d0e1b19c-af6c-419d-87be-27afa329e778}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "888dff09-9fc0-401c-ac19-cf23c966fe46",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Application_ba9a5443_363f_40c7_a86d_c336f340222b",
                  "uuid": "7486b5eb-0940-4521-9e56-8e40aaaa4afd"
                },
                "name": "SYS_GEN__Runbook_Application_ba9a5443_363f_40c7_a86d_c336f340222b"
              }
            },
            {
              "description": "System action for restarting an application",
              "message_list": [],
              "uuid": "528766fe-d02b-4354-b09d-0c4f5eb5e95d",
              "name": "action_restart",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_profile",
                      "name": "Default",
                      "uuid": "96ba5d77-941f-4f2b-b4ef-6a1eb2196a76"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "27447860-417b-47b7-8cfd-82117b77e5d5",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__restart_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2; uuid=ab96372f-c464-4633-8c3f-4688efad5737}",
                      "@{kind=app_task; name=SYS_GEN__restart_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=cd1db28f-bb91-48f8-98f1-d3ba9e576d16}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Application_ba9a5443_363f_40c7_a86d_c336f340222b"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "ab96372f-c464-4633-8c3f-4688efad5737",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7b8be9c1_deployment; uuid=737cd01c-4368-4a5d-a4f9-1cde43efa680}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Substrate_e9f5177c_746f_4814_b024_505fc20559f2; uuid=95ad7f40-244f-4e84-adba-d416b39e2318}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__restart_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "cd1db28f-bb91-48f8-98f1-d3ba9e576d16",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7b8be9c1_deployment; uuid=737cd01c-4368-4a5d-a4f9-1cde43efa680}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=b25bb7e8_runbook; uuid=6c48900b-c924-48f6-b946-2c26e51be9c0}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__restart_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "efc4a091-e1ec-4726-bf9d-ce09f6f05831",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Application_ba9a5443_363f_40c7_a86d_c336f340222b",
                  "uuid": "27447860-417b-47b7-8cfd-82117b77e5d5"
                },
                "name": "SYS_GEN__Runbook_Application_ba9a5443_363f_40c7_a86d_c336f340222b"
              }
            },
            {
              "description": "System action for stopping an application",
              "message_list": [],
              "uuid": "fca59e9e-f4a7-42fc-8594-6e7ece0a1b96",
              "name": "action_stop",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_profile",
                      "name": "Default",
                      "uuid": "96ba5d77-941f-4f2b-b4ef-6a1eb2196a76"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "21cfa131-2fcb-43d6-b3db-252b5f515584",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=fb8eb8fb-9933-49c6-81ea-0908493fc24d}",
                      "@{kind=app_task; name=SYS_GEN__stop_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2; uuid=15554fe7-251c-4bd5-8c3d-af595bec1831}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Application_ba9a5443_363f_40c7_a86d_c336f340222b"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "fb8eb8fb-9933-49c6-81ea-0908493fc24d",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7b8be9c1_deployment; uuid=737cd01c-4368-4a5d-a4f9-1cde43efa680}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=53c0046c_runbook; uuid=67c4c206-3937-41c5-b191-4e4840ae55a5}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "15554fe7-251c-4bd5-8c3d-af595bec1831",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7b8be9c1_deployment; uuid=737cd01c-4368-4a5d-a4f9-1cde43efa680}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Substrate_e9f5177c_746f_4814_b024_505fc20559f2; uuid=78737d7a-e48f-4044-a0a6-026804adc160}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__stop_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "44fbbb52-27fb-48d2-8220-db4238fe384f",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Application_ba9a5443_363f_40c7_a86d_c336f340222b",
                  "uuid": "21cfa131-2fcb-43d6-b3db-252b5f515584"
                },
                "name": "SYS_GEN__Runbook_Application_ba9a5443_363f_40c7_a86d_c336f340222b"
              }
            },
            {
              "description": "System action for deleting an application. Deletes created VMs as well",
              "message_list": [],
              "uuid": "a67a52cc-b20f-4d49-8976-eb42b13296eb",
              "name": "action_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_profile",
                      "name": "Default",
                      "uuid": "96ba5d77-941f-4f2b-b4ef-6a1eb2196a76"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "2ed9e44b-dda9-4019-804c-27743c02f5fb",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=fe56818e-7908-4e48-9992-549bb1bc4558}",
                      "@{kind=app_task; name=SYS_GEN__delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=1c62aad6-81c1-44fe-a5bb-86252b8a7dc9}",
                      "@{kind=app_task; name=SYS_GEN__uninstall_CRb_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee; uuid=2f34b901-fca2-42c0-b480-74b81ef93f6c}",
                      "@{kind=app_task; name=SYS_GEN__delete_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2; uuid=12ce769d-e143-4800-8bba-aefb36a07a68}",
                      "@{kind=app_task; name=SYS_GEN__post_delete_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2; uuid=1197f52b-345c-49d0-8f3f-f8fb676c6a07}",
                      "@{kind=app_task; name=SYS_GEN__DE_Delete_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120; uuid=fc8be34a-3417-4ab2-80a5-056554f7df37}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "    ",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Application_ba9a5443_363f_40c7_a86d_c336f340222b"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "fe56818e-7908-4e48-9992-549bb1bc4558",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7b8be9c1_deployment; uuid=737cd01c-4368-4a5d-a4f9-1cde43efa680}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=53c0046c_runbook; uuid=67c4c206-3937-41c5-b191-4e4840ae55a5}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "1c62aad6-81c1-44fe-a5bb-86252b8a7dc9",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7b8be9c1_deployment; uuid=737cd01c-4368-4a5d-a4f9-1cde43efa680}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=df173f1e_runbook; uuid=5a750d31-8cd9-402f-b4b1-50af0ec1536a}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1",
                      "uuid": "9cb5f39d-26e8-4eef-9edc-a39bc9f7dc0c"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "2f34b901-fca2-42c0-b480-74b81ef93f6c",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7b8be9c1_deployment; uuid=737cd01c-4368-4a5d-a4f9-1cde43efa680}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee; uuid=f17ac097-298d-48ab-8356-6b79ff686de3}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__uninstall_CRb_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "12ce769d-e143-4800-8bba-aefb36a07a68",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7b8be9c1_deployment; uuid=737cd01c-4368-4a5d-a4f9-1cde43efa680}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Substrate_e9f5177c_746f_4814_b024_505fc20559f2; uuid=82e04739-2fca-4d69-a3a5-080efead300e}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__delete_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "1197f52b-345c-49d0-8f3f-f8fb676c6a07",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7b8be9c1_deployment; uuid=737cd01c-4368-4a5d-a4f9-1cde43efa680}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=097095e6_runbook; uuid=47e9b176-4bd1-4cbc-bbf9-ea5f789971c9}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__post_delete_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_blueprint_deployment",
                      "name": "7b8be9c1_deployment",
                      "uuid": "737cd01c-4368-4a5d-a4f9-1cde43efa680"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DELETE_DEPLOYMENT_ELEMENT",
                    "uuid": "fc8be34a-3417-4ab2-80a5-056554f7df37",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DE_Delete_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "4d4d6db8-5f97-4a6c-8295-c0016e922236",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Application_ba9a5443_363f_40c7_a86d_c336f340222b",
                  "uuid": "2ed9e44b-dda9-4019-804c-27743c02f5fb"
                },
                "name": "SYS_GEN__Runbook_Application_ba9a5443_363f_40c7_a86d_c336f340222b"
              }
            },
            {
              "description": "System action for deleting an application. Does not delete created VMs",
              "message_list": [],
              "uuid": "54917c54-a0d0-4215-919b-ba4acb157eeb",
              "name": "action_soft_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_profile",
                      "name": "Default",
                      "uuid": "96ba5d77-941f-4f2b-b4ef-6a1eb2196a76"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "a9f3ef02-7f1c-49f1-90eb-5245836d31ab",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__soft_delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=d7535365-0203-4cc3-9067-31a446a5a879}",
                      "@{kind=app_task; name=SYS_GEN__Package_Element_Delete_c8247076_e8ea_4ec9_9f66_8cf32084d0ee; uuid=e01bba70-c193-4126-ad3d-3bf556b64018}",
                      "@{kind=app_task; name=SYS_GEN__soft_delete_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2; uuid=1a3a57b9-f14b-4029-b49b-2cc03470048d}",
                      "@{kind=app_task; name=SYS_GEN__DE_Soft_Delete_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120; uuid=357145a7-b943-4da1-b1ae-df52aac254fe}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "  ",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Application_ba9a5443_363f_40c7_a86d_c336f340222b"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "d7535365-0203-4cc3-9067-31a446a5a879",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7b8be9c1_deployment; uuid=737cd01c-4368-4a5d-a4f9-1cde43efa680}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=d7d4619f-b55d-4d78-8c54-618b787f4bec}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__soft_delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1",
                      "uuid": "9cb5f39d-26e8-4eef-9edc-a39bc9f7dc0c"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SOFT_DELETE_ELEMENT",
                    "uuid": "e01bba70-c193-4126-ad3d-3bf556b64018",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Package_Element_Delete_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm",
                      "uuid": "06e19016-513b-4633-b514-871a80cf2960"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "1a3a57b9-f14b-4029-b49b-2cc03470048d",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7b8be9c1_deployment; uuid=737cd01c-4368-4a5d-a4f9-1cde43efa680}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Substrate_e9f5177c_746f_4814_b024_505fc20559f2; uuid=a727a345-a501-4339-a351-bdbe6efa5f71}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__soft_delete_CRb_Substrate_e9f5177c_746f_4814_b024_505fc20559f2"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_blueprint_deployment",
                      "name": "7b8be9c1_deployment",
                      "uuid": "737cd01c-4368-4a5d-a4f9-1cde43efa680"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SOFT_DELETE_DEPLOYMENT_ELEMENT",
                    "uuid": "357145a7-b943-4da1-b1ae-df52aac254fe",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DE_Soft_Delete_3a7a01c3_a719_4a6c_a7ee_6fb05e1e6120"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "fdb16106-46df-43d9-b8e0-a2c529a756fa",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Application_ba9a5443_363f_40c7_a86d_c336f340222b",
                  "uuid": "a9f3ef02-7f1c-49f1-90eb-5245836d31ab"
                },
                "name": "SYS_GEN__Runbook_Application_ba9a5443_363f_40c7_a86d_c336f340222b"
              }
            }
          ],
          "message_list": [],
          "uuid": "96ba5d77-941f-4f2b-b4ef-6a1eb2196a76",
          "dependency_list": [],
          "snapshot_config_list": [],
          "state": "ACTIVE",
          "patch_list": [],
          "restore_config_list": [],
          "variable_list": [
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": true,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "f49fde4e-cdf4-40de-988a-8152c6f3edc0",
              "value": "WWW",
              "label": "Which application to install?",
              "state": "ACTIVE",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "WWW",
                  "CMS",
                  "SFTP",
                  "Captive2 Server",
                  "Virgin API Server",
                  "Logstash",
                  "Identity Server",
                  "Support Manager",
                  "Radius",
                  "Captive Manager Server",
                  "Policy Manager Master & Slave"
                ]
              },
              "name": "source_app"
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^.*$"
              },
              "val_type": "STRING",
              "is_mandatory": true,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "b3c205e3-713a-497e-a41d-a02af3f8b827",
              "value": "entbase",
              "label": "What is the application prefix?",
              "state": "ACTIVE",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "entbase"
                ]
              },
              "name": "app_prefix"
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^[\\d]*$"
              },
              "val_type": "INT",
              "is_mandatory": true,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "0146b461-f7c9-4b5d-bc32-2c7b63077d71",
              "value": "1",
              "label": "How many instance to deploy?",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "instance_count"
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^.*$"
              },
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "library_reference": "2f04a001-f227-483e-9eb8-eba2b46ba16f",
              "uuid": "a9ebe57a-e52d-4a54-9fc8-182ca843ab83",
              "value": "",
              "label": "Which application to replace?",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "type": "EXEC_LOCAL",
              "options": {
                "type": "EXEC",
                "attrs": {
                  "script_type": "static",
                  "type": "EXEC",
                  "command_line_args": "",
                  "exit_status": [],
                  "script": "# region headers\n# escript-template v20190605 / stephane.bourdeaud@nutanix.com\n# * author:       stephane.bourdeaud@nutanix.com\n# * version:      2020/01/22\n# task_name:      CalmGetApp\n# description:    This script gets the list of application instances from Calm.\n# TODO: test\n# endregion\n\n# region capture Calm macros\npc_ip = '@@{prism_ip}@@'\nusername = '@@{prism_username}@@'\nusername_secret = '@@{prism_secret}@@'\n# endregion\n\n# region prepare variables\nheaders = {'content-type': 'application/json'}\n# endregion\n\n# region REST call: Get Apps\nmethod = 'POST'\nurl = \"https://{}:9440/api/nutanix/v3/apps/list\".format(pc_ip)\npayload = {\n    \"kind\": \"app\",\n    \"length\": 250\n}\n#print(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    params=json.dumps(payload),\n    headers=headers,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    verify=False\n)\n\nif resp.ok:\n    json_resp = json.loads(resp.content)\n    if json_resp['metadata']['total_matches'] > 0:\n        apps_list = []\n        for app in json_resp['entities']:\n            apps_list.append(app['metadata']['name'])\n        print(\",\".join(apps_list))\n    else:\n        print(\"Could not find any apps.\")\n        exit(1)\n    exit(0)\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion"
                }
              },
              "name": "target_app"
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^.*$"
              },
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "LIST",
              "message_list": [],
              "uuid": "a34a7332-9292-43a3-9727-9e5fe1462ad6",
              "value": "",
              "label": "What firewall policy you would like to apply?",
              "state": "ACTIVE",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "type": "EXEC_LOCAL",
              "options": {
                "type": "EXEC",
                "attrs": {
                  "script_type": "static",
                  "type": "EXEC",
                  "command_line_args": "",
                  "exit_status": [],
                  "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    FortigateListAllPolicies\n# description:  List all Fortigate policies\n# input vars:   fortigate cookie and csrf token\n# output vars:  fortigate_policy_id, fortigate_policy_name\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate_username}@@\"\nfortigate_password = \"@@{fortigate_password}@@\"\napi_server_port = 80\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\n# endregion\n\ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'text/plain'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    #print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        #print(\"Successfully authenticated\")\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\ndef fortiget_get_policies(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/policy/?format=policyid|name&skip=1&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n        'Accept': 'application/json'\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    #print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        policies_list = []\n        #print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        for policy in result['results']:\n            policies_list.append(str(policy['policyid']) + \"-\" + str(policy['name']))\n            #print(\"{}-{}\".format(policy['policyid'],policy['name']))\n        print(\",\".join(policies_list))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \n\nfortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\nfortiget_get_policies(api_server, api_server_port, fortigate_csrf_token,\n                      fortigate_cookie, fortigate_vdom)\n"
                }
              },
              "name": "fortigate_policy"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "ff32c19b-d289-4d3b-901d-92d611b44a18",
              "value": "10.68.99.208",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "f5_endpoint"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "3dc5b10c-1149-44f0-af32-574a2ed082ec",
              "value": "admin",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "fortigate_username"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "bfdb0dab-3668-4d39-a0bf-534a8955bfd1",
              "value": "nutanix/4u",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "fortigate_password"
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^.*$"
              },
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "22d7444e-aecf-4c6b-8cb1-bafca0102fa7",
              "value": "root",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "fortigate_vdom"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "9eb39df5-917a-4120-aff4-8ad8f2f862ca",
              "value": "nutanix/4u",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "prism_secret"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "094f7237-5301-4638-bc56-1e230c10628b",
              "value": "10.68.99.222",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "fortigate_endpoint"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "390dfecf-7ec9-4bbb-b8a1-75ebec07c961",
              "value": "salah.gassim@emeagso.lab",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "prism_username"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "0be1745d-8e35-432d-a2a4-17551375cec8",
              "value": "10.68.99.210",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "jenkins_endpoint"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "01dc8a49-b119-402d-a0bb-b769aa4b4a89",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "is_secret_modified": false,
                "secret_reference": {
                  "uuid": "1ec8ba2f-a0cc-4a6c-8a16-3dc4798e2ae0"
                },
                "type": "SECRET"
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "SECRET",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "ansible_public_key"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "403f435f-e268-411d-882e-9ae3d1a66a0d",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "jira_parent_ticket"
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^[\\d]*$"
              },
              "val_type": "INT",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "f00c2a7f-6d3c-4a51-a83e-f5d6482fd25e",
              "value": "10003",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "jira_link_type"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "63c11371-6594-4474-abe1-37080ffc1346",
              "value": "WIFICALM",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "jira_project_name"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "14029482-6dc4-45f2-bd48-d6b571401412",
              "value": "o2channels.atlassian.net",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "jira_endpoint"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "7a4606bb-3015-423d-baca-5d2297507135",
              "value": "10.68.99.210",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "jenkins_ip"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "acc96309-c587-47ce-9168-d4fbe4529df1",
              "value": "10.68.99.210",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "awx_ip"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "f4759791-94ed-401c-8df0-558b998d4a97",
              "value": "10.68.97.150",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "prism_ip"
            }
          ],
          "name": "Default"
        },
        {
          "deployment_create_list": [
            {
              "description": "",
              "action_list": [
                {
                  "description": "System action for creating an application",
                  "message_list": [],
                  "uuid": "dabf4c72-d3ab-460f-8715-349960de7285",
                  "name": "action_create",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=57abdd31-52f8-4175-ac01-f89ea908fe15; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_8393e703_6144_420a_b945_3ea804c964be}",
                      "@{target_any_local_reference=; retries=0; description=; type=CREATE_DEPLOYMENT_ELEMENT; uuid=b1e3f9bb-b68b-4283-b3d9-78578f545c5a; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__DE_Provision_8393e703_6144_420a_b945_3ea804c964be}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=1ab2a04e-18ac-4a80-a588-3a35ecc79a90; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__pre_create_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=28f64a77-d6fa-4d06-aeee-33fb91611103; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__create_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=2b1aff30-42fb-443e-b4dc-1b855b33fc46; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__install_CRb_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=9ccf0f27-38c4-4f86-9e60-7e26402b63bf; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__create_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=17227e5c-b422-486d-9d1b-c34d76971556; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "fa6c23b9-3191-4e1d-9aff-24d403cf5141",
                    "state": "ACTIVE",
                    "variable_list": [],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_8393e703_6144_420a_b945_3ea804c964be",
                      "uuid": "57abdd31-52f8-4175-ac01-f89ea908fe15"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_8393e703_6144_420a_b945_3ea804c964be"
                  }
                },
                {
                  "description": "System action for starting an application",
                  "message_list": [],
                  "uuid": "5825b797-d78f-4cc4-960c-64f8af1281cc",
                  "name": "action_start",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=48e7c0e7-acf9-4a14-ab81-ec18d7206eb4; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_8393e703_6144_420a_b945_3ea804c964be}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=e15f462f-889d-4c65-96b0-b7e8b5372e73; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__start_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=e504fa99-c312-47c1-a801-04b729fa9a48; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "4627e776-55e2-4802-a7e4-452ba6b50032",
                    "state": "ACTIVE",
                    "variable_list": [],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_8393e703_6144_420a_b945_3ea804c964be",
                      "uuid": "48e7c0e7-acf9-4a14-ab81-ec18d7206eb4"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_8393e703_6144_420a_b945_3ea804c964be"
                  }
                },
                {
                  "description": "System action for restarting an application",
                  "message_list": [],
                  "uuid": "979bc7d4-c5a2-4338-8dc1-71131c51e261",
                  "name": "action_restart",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=79b965ca-a5a9-4901-b072-f4c788c5b500; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_8393e703_6144_420a_b945_3ea804c964be}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=a82b3929-788d-49ed-9ed2-414f8fc50927; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__restart_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=33ce7d03-e6af-4114-bfa8-1bbc54b0562c; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__restart_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "dc7c660e-00d7-4caf-ae3b-4ff74b1992a8",
                    "state": "ACTIVE",
                    "variable_list": [],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_8393e703_6144_420a_b945_3ea804c964be",
                      "uuid": "79b965ca-a5a9-4901-b072-f4c788c5b500"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_8393e703_6144_420a_b945_3ea804c964be"
                  }
                },
                {
                  "description": "System action for stopping an application",
                  "message_list": [],
                  "uuid": "79f483ca-d95a-4c95-a754-25c2acce6837",
                  "name": "action_stop",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=95271fd9-661e-444a-8de0-b289442727d0; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_8393e703_6144_420a_b945_3ea804c964be}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=f63ffbd0-1a45-49cf-a569-928c95c1788f; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=bb4d05d5-a300-4c15-9819-a3f09990aea3; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__stop_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "b3058bbc-ef5a-47a8-ab46-dc2f4e3cbf8f",
                    "state": "ACTIVE",
                    "variable_list": [],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_8393e703_6144_420a_b945_3ea804c964be",
                      "uuid": "95271fd9-661e-444a-8de0-b289442727d0"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_8393e703_6144_420a_b945_3ea804c964be"
                  }
                },
                {
                  "description": "System action for deleting an application. Deletes created VMs as well",
                  "message_list": [],
                  "uuid": "60e411e7-5915-43c6-b6e0-6c19fb09c946",
                  "name": "action_delete",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=9f5eee70-d272-44a1-b9a9-eb69b875df97; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_8393e703_6144_420a_b945_3ea804c964be}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=ed6e0fd3-d197-426b-a64e-011f569a2136; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=a2a2b221-84f1-4608-ab40-ac3dd29726f7; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=ec4188c7-c9ba-434b-94e4-a8e9934e1b3a; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__uninstall_CRb_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=0089477a-c6c2-4b4b-bc7f-87140a70c082; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__delete_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=2cbefdb7-4718-4a03-9638-6230913119d0; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__post_delete_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae}",
                      "@{target_any_local_reference=; retries=0; description=; type=DELETE_DEPLOYMENT_ELEMENT; uuid=543bd795-858b-48c0-9905-41df258db20a; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__DE_Delete_8393e703_6144_420a_b945_3ea804c964be}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "a08ac190-2a11-4fd7-958a-aa2ded6c52f7",
                    "state": "ACTIVE",
                    "variable_list": [],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_8393e703_6144_420a_b945_3ea804c964be",
                      "uuid": "9f5eee70-d272-44a1-b9a9-eb69b875df97"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_8393e703_6144_420a_b945_3ea804c964be"
                  }
                },
                {
                  "description": "System action for scaleout",
                  "message_list": [],
                  "uuid": "449a2338-523e-4fe3-92ac-4bdbda1070a9",
                  "name": "action_scaleout",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=c8092170-6d35-4e26-ac0b-dd22a7ccc9d8; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_8393e703_6144_420a_b945_3ea804c964be}",
                      "@{target_any_local_reference=; retries=0; description=; type=SCALING; uuid=cc4d7ac1-5f40-4a90-9b8f-ff73d270d041; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Deployment_Scaleout_8393e703_6144_420a_b945_3ea804c964be}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "e668c390-5aad-4aa5-b0ae-4e8a7db1c466",
                    "state": "ACTIVE",
                    "variable_list": [
                      "@{regex=; val_type=STRING; is_mandatory=False; description=; data_type=BASE; message_list=System.Object[]; uuid=7c1db975-9a1e-4173-90c8-28f3d3a93600; value=0; label=; state=NOT_VALIDATED; attrs=; editables=; is_hidden=False; type=LOCAL; options=; name=scaling_count}"
                    ],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_8393e703_6144_420a_b945_3ea804c964be",
                      "uuid": "c8092170-6d35-4e26-ac0b-dd22a7ccc9d8"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_8393e703_6144_420a_b945_3ea804c964be"
                  }
                },
                {
                  "description": "System action for scalein",
                  "message_list": [],
                  "uuid": "5bf841ac-ae71-4c0a-9c9e-8d688fdd82d8",
                  "name": "action_scalein",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=b0b849cf-4736-4aec-b512-8123ff1baa5b; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_8393e703_6144_420a_b945_3ea804c964be}",
                      "@{target_any_local_reference=; retries=0; description=; type=SCALING; uuid=06637e73-cfca-4be8-93e3-a84f5ca4e26d; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Deployment_Scalein_8393e703_6144_420a_b945_3ea804c964be}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "c9243bfc-8763-445c-b79e-465d49532ee4",
                    "state": "ACTIVE",
                    "variable_list": [
                      "@{regex=; val_type=STRING; is_mandatory=False; description=; data_type=BASE; message_list=System.Object[]; uuid=b852beb0-bc57-4d56-9d54-6be9bca2557c; value=0; label=; state=NOT_VALIDATED; attrs=; editables=; is_hidden=False; type=LOCAL; options=; name=scaling_count}"
                    ],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_8393e703_6144_420a_b945_3ea804c964be",
                      "uuid": "b0b849cf-4736-4aec-b512-8123ff1baa5b"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_8393e703_6144_420a_b945_3ea804c964be"
                  }
                },
                {
                  "description": "System action for deleting an application. Does not delete created VMs",
                  "message_list": [],
                  "uuid": "ebd48181-1233-47f2-ad8e-7f611c2e84d2",
                  "name": "action_soft_delete",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=e45baf6e-d408-47c3-a25f-77b31baf185f; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_8393e703_6144_420a_b945_3ea804c964be}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=c9c770f3-a71b-418e-a69d-48e1114df339; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__soft_delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}",
                      "@{target_any_local_reference=; retries=0; description=; type=SOFT_DELETE_ELEMENT; uuid=1508ce80-ad99-47d2-9a38-5aab4f6ae38f; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Package_Element_Delete_0eea5d91_b5b2_42f7_9cdc_be0408c636ea}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=a9f0ae0a-400c-42b1-89da-9277621d4c35; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__soft_delete_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae}",
                      "@{target_any_local_reference=; retries=0; description=; type=SOFT_DELETE_DEPLOYMENT_ELEMENT; uuid=0673784d-cd3d-42d4-807e-8419461abc4f; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__DE_Soft_Delete_8393e703_6144_420a_b945_3ea804c964be}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "0c069f5e-0f53-491b-923e-24246028652d",
                    "state": "ACTIVE",
                    "variable_list": [],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_8393e703_6144_420a_b945_3ea804c964be",
                      "uuid": "e45baf6e-d408-47c3-a25f-77b31baf185f"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_8393e703_6144_420a_b945_3ea804c964be"
                  }
                }
              ],
              "message_list": [],
              "published_service_local_reference_list": [],
              "uuid": "344a92b7-9b48-44df-a51b-06ea016bf5c9",
              "default_replicas": "1",
              "min_replicas": "1",
              "state": "ACTIVE",
              "max_replicas": "1",
              "depends_on_list": [],
              "editables": {},
              "package_local_reference_list": [
                {
                  "kind": "app_package",
                  "name": "Package2",
                  "uuid": "f0b4e5fa-8d41-4d66-aeaa-eb49167edb1a"
                }
              ],
              "substrate_local_reference": {
                "kind": "app_substrate",
                "name": "CentOSVm_2",
                "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
              },
              "type": "GREENFIELD",
              "options": {},
              "variable_list": [],
              "name": "5bd7300a_deployment"
            }
          ],
          "environment_reference_list": [],
          "application_url": "",
          "description": "",
          "action_list": [
            {
              "description": "System action for creating an application",
              "message_list": [],
              "uuid": "3eab6d60-6b8a-4372-943a-65f4b6caae4c",
              "name": "action_create",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_profile",
                      "name": "Profile2",
                      "uuid": "cb0f2c12-3b0e-4495-91d9-69d8fd8fa00b"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "ec3d5c3b-11dc-41ed-8d06-262e7cd21045",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__DE_Provision_8393e703_6144_420a_b945_3ea804c964be; uuid=8a6b5a39-c8bf-40c1-9a48-0b7f0634fe64}",
                      "@{kind=app_task; name=SYS_GEN__pre_create_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=ed61ad17-b6cc-4f69-9efb-4012f6a53704}",
                      "@{kind=app_task; name=SYS_GEN__create_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=c649a842-cddd-4d8e-8856-834d4aaadf89}",
                      "@{kind=app_task; name=SYS_GEN__install_CRb_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea; uuid=36819335-287c-4b4f-bbd2-dd7cd881ec71}",
                      "@{kind=app_task; name=SYS_GEN__create_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=4c324393-fd65-42ba-a397-0969be830ca4}",
                      "@{kind=app_task; name=SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=a26465f4-5193-40f4-bcec-4b5ba7fc3d5a}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "    ",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Application_782cd956_cd54_4e79_9345_adc02d3725f9"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_blueprint_deployment",
                      "name": "5bd7300a_deployment",
                      "uuid": "344a92b7-9b48-44df-a51b-06ea016bf5c9"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CREATE_DEPLOYMENT_ELEMENT",
                    "uuid": "8a6b5a39-c8bf-40c1-9a48-0b7f0634fe64",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DE_Provision_8393e703_6144_420a_b945_3ea804c964be"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "ed61ad17-b6cc-4f69-9efb-4012f6a53704",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=5bd7300a_deployment; uuid=344a92b7-9b48-44df-a51b-06ea016bf5c9}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=91724d19_runbook; uuid=7070a710-990b-4edd-b11b-a3a70f226b19}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__pre_create_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "c649a842-cddd-4d8e-8856-834d4aaadf89",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=5bd7300a_deployment; uuid=344a92b7-9b48-44df-a51b-06ea016bf5c9}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=251d943f-f378-45c6-a26d-1a24870aa567}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__create_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package2",
                      "uuid": "f0b4e5fa-8d41-4d66-aeaa-eb49167edb1a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "36819335-287c-4b4f-bbd2-dd7cd881ec71",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=5bd7300a_deployment; uuid=344a92b7-9b48-44df-a51b-06ea016bf5c9}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea; uuid=bf7310e0-29b9-458f-a9c8-788577400e75}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__install_CRb_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "4c324393-fd65-42ba-a397-0969be830ca4",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=5bd7300a_deployment; uuid=344a92b7-9b48-44df-a51b-06ea016bf5c9}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=f0d6aa56_runbook; uuid=6f03436d-c46f-42c1-838f-3ef00b072f23}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__create_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "a26465f4-5193-40f4-bcec-4b5ba7fc3d5a",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=5bd7300a_deployment; uuid=344a92b7-9b48-44df-a51b-06ea016bf5c9}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=efba402c_runbook; uuid=d0e1b19c-af6c-419d-87be-27afa329e778}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "07dd3303-0dab-40d4-b5a1-28995d59ca47",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Application_782cd956_cd54_4e79_9345_adc02d3725f9",
                  "uuid": "ec3d5c3b-11dc-41ed-8d06-262e7cd21045"
                },
                "name": "SYS_GEN__Runbook_Application_782cd956_cd54_4e79_9345_adc02d3725f9"
              }
            },
            {
              "description": "System action for starting an application",
              "message_list": [],
              "uuid": "7cfd5d17-5f54-4e26-87c7-20837b652b7f",
              "name": "action_start",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_profile",
                      "name": "Profile2",
                      "uuid": "cb0f2c12-3b0e-4495-91d9-69d8fd8fa00b"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "388c993a-8f2f-4aea-9def-9fa35fb4500c",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__start_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=14d75177-ac82-45c7-8d8e-e0eb8eae158b}",
                      "@{kind=app_task; name=SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=f4c81fb4-5e68-4613-862c-7e0b8da0f608}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Application_782cd956_cd54_4e79_9345_adc02d3725f9"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "14d75177-ac82-45c7-8d8e-e0eb8eae158b",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=5bd7300a_deployment; uuid=344a92b7-9b48-44df-a51b-06ea016bf5c9}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=8c6f499c-9df1-4da2-a1c0-b9415e47b965}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__start_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "f4c81fb4-5e68-4613-862c-7e0b8da0f608",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=5bd7300a_deployment; uuid=344a92b7-9b48-44df-a51b-06ea016bf5c9}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=efba402c_runbook; uuid=d0e1b19c-af6c-419d-87be-27afa329e778}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "502375cf-8ec8-40d2-9cb1-65b66acecf03",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Application_782cd956_cd54_4e79_9345_adc02d3725f9",
                  "uuid": "388c993a-8f2f-4aea-9def-9fa35fb4500c"
                },
                "name": "SYS_GEN__Runbook_Application_782cd956_cd54_4e79_9345_adc02d3725f9"
              }
            },
            {
              "description": "System action for restarting an application",
              "message_list": [],
              "uuid": "c77b751d-700b-43a9-86dd-b9dbf82f3fe2",
              "name": "action_restart",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_profile",
                      "name": "Profile2",
                      "uuid": "cb0f2c12-3b0e-4495-91d9-69d8fd8fa00b"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "603b5855-ca7f-4af7-b156-2944eae9e570",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__restart_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=9249a734-08c6-47a9-b98b-f65a60996888}",
                      "@{kind=app_task; name=SYS_GEN__restart_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=5c22e082-c52b-463f-bf04-a324866be0ab}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Application_782cd956_cd54_4e79_9345_adc02d3725f9"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "9249a734-08c6-47a9-b98b-f65a60996888",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=5bd7300a_deployment; uuid=344a92b7-9b48-44df-a51b-06ea016bf5c9}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=b2e1db5c-34fd-4c76-b8d5-956889c6dcdb}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__restart_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "5c22e082-c52b-463f-bf04-a324866be0ab",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=5bd7300a_deployment; uuid=344a92b7-9b48-44df-a51b-06ea016bf5c9}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=b25bb7e8_runbook; uuid=6c48900b-c924-48f6-b946-2c26e51be9c0}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__restart_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "7310c6eb-5427-483c-b120-388454e97fbd",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Application_782cd956_cd54_4e79_9345_adc02d3725f9",
                  "uuid": "603b5855-ca7f-4af7-b156-2944eae9e570"
                },
                "name": "SYS_GEN__Runbook_Application_782cd956_cd54_4e79_9345_adc02d3725f9"
              }
            },
            {
              "description": "System action for stopping an application",
              "message_list": [],
              "uuid": "d586fb89-274f-4b15-aef1-500372a3ef52",
              "name": "action_stop",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_profile",
                      "name": "Profile2",
                      "uuid": "cb0f2c12-3b0e-4495-91d9-69d8fd8fa00b"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "a300dc3c-3030-4bdb-89e2-df75e78ef164",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=d024bc7f-2423-40c8-be63-6b49a38b43e0}",
                      "@{kind=app_task; name=SYS_GEN__stop_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=a781f671-df3d-4351-8a27-db2f890a7f9d}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Application_782cd956_cd54_4e79_9345_adc02d3725f9"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "d024bc7f-2423-40c8-be63-6b49a38b43e0",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=5bd7300a_deployment; uuid=344a92b7-9b48-44df-a51b-06ea016bf5c9}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=53c0046c_runbook; uuid=67c4c206-3937-41c5-b191-4e4840ae55a5}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "a781f671-df3d-4351-8a27-db2f890a7f9d",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=5bd7300a_deployment; uuid=344a92b7-9b48-44df-a51b-06ea016bf5c9}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=5c2dd171-558d-4a2d-96dd-4b16eac76c7b}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__stop_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "59109ba2-45b9-44d8-bb8e-5d21d81a8195",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Application_782cd956_cd54_4e79_9345_adc02d3725f9",
                  "uuid": "a300dc3c-3030-4bdb-89e2-df75e78ef164"
                },
                "name": "SYS_GEN__Runbook_Application_782cd956_cd54_4e79_9345_adc02d3725f9"
              }
            },
            {
              "description": "System action for deleting an application. Deletes created VMs as well",
              "message_list": [],
              "uuid": "da6e4b1c-a29f-465e-a9e5-a34311a053f1",
              "name": "action_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_profile",
                      "name": "Profile2",
                      "uuid": "cb0f2c12-3b0e-4495-91d9-69d8fd8fa00b"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "845df41b-6da5-4f98-9558-6f91452a2632",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=86d95c74-8188-4ee7-b666-782c07aa2bd8}",
                      "@{kind=app_task; name=SYS_GEN__delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=f1a77a98-67ef-4f14-ac6f-52a9f163f584}",
                      "@{kind=app_task; name=SYS_GEN__uninstall_CRb_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea; uuid=997d2fe0-68e0-4052-8d3a-42b511ee8b63}",
                      "@{kind=app_task; name=SYS_GEN__delete_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=aea3436a-006b-401a-ac13-0a55e507f5ef}",
                      "@{kind=app_task; name=SYS_GEN__post_delete_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=f79765f4-8496-4ae4-afaa-f461da85b7f1}",
                      "@{kind=app_task; name=SYS_GEN__DE_Delete_8393e703_6144_420a_b945_3ea804c964be; uuid=0d81e634-fb48-411a-ad1e-e55104106cb2}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "    ",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Application_782cd956_cd54_4e79_9345_adc02d3725f9"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "86d95c74-8188-4ee7-b666-782c07aa2bd8",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=5bd7300a_deployment; uuid=344a92b7-9b48-44df-a51b-06ea016bf5c9}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=53c0046c_runbook; uuid=67c4c206-3937-41c5-b191-4e4840ae55a5}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "f1a77a98-67ef-4f14-ac6f-52a9f163f584",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=5bd7300a_deployment; uuid=344a92b7-9b48-44df-a51b-06ea016bf5c9}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=df173f1e_runbook; uuid=5a750d31-8cd9-402f-b4b1-50af0ec1536a}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package2",
                      "uuid": "f0b4e5fa-8d41-4d66-aeaa-eb49167edb1a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "997d2fe0-68e0-4052-8d3a-42b511ee8b63",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=5bd7300a_deployment; uuid=344a92b7-9b48-44df-a51b-06ea016bf5c9}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea; uuid=1846f411-4a15-4dbe-9fcc-3e673539b660}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__uninstall_CRb_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "aea3436a-006b-401a-ac13-0a55e507f5ef",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=5bd7300a_deployment; uuid=344a92b7-9b48-44df-a51b-06ea016bf5c9}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=d97632e0-1b34-4ced-abc4-81b46e8d545a}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__delete_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "f79765f4-8496-4ae4-afaa-f461da85b7f1",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=5bd7300a_deployment; uuid=344a92b7-9b48-44df-a51b-06ea016bf5c9}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=0435bb56_runbook; uuid=6b8c25cb-0722-47b1-86fd-71665561b2bb}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__post_delete_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_blueprint_deployment",
                      "name": "5bd7300a_deployment",
                      "uuid": "344a92b7-9b48-44df-a51b-06ea016bf5c9"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DELETE_DEPLOYMENT_ELEMENT",
                    "uuid": "0d81e634-fb48-411a-ad1e-e55104106cb2",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DE_Delete_8393e703_6144_420a_b945_3ea804c964be"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "be252508-617a-4702-ac6c-e8bdeafcc5a5",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Application_782cd956_cd54_4e79_9345_adc02d3725f9",
                  "uuid": "845df41b-6da5-4f98-9558-6f91452a2632"
                },
                "name": "SYS_GEN__Runbook_Application_782cd956_cd54_4e79_9345_adc02d3725f9"
              }
            },
            {
              "description": "System action for deleting an application. Does not delete created VMs",
              "message_list": [],
              "uuid": "61bf64b2-0a18-4be1-a820-f626bc7cb926",
              "name": "action_soft_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_profile",
                      "name": "Profile2",
                      "uuid": "cb0f2c12-3b0e-4495-91d9-69d8fd8fa00b"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "108c981a-8dd5-408c-9289-876218d78c6c",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__soft_delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=29eb6018-f47c-427b-a724-382de9caf973}",
                      "@{kind=app_task; name=SYS_GEN__Package_Element_Delete_0eea5d91_b5b2_42f7_9cdc_be0408c636ea; uuid=c9d3bf28-cc2a-4d59-ae23-4d2d26edf501}",
                      "@{kind=app_task; name=SYS_GEN__soft_delete_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=ea23ed40-b593-46a4-bf10-38919d991127}",
                      "@{kind=app_task; name=SYS_GEN__DE_Soft_Delete_8393e703_6144_420a_b945_3ea804c964be; uuid=36bd60a3-2beb-4dc9-afaa-2e3bf08fd360}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "  ",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Application_782cd956_cd54_4e79_9345_adc02d3725f9"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "29eb6018-f47c-427b-a724-382de9caf973",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=5bd7300a_deployment; uuid=344a92b7-9b48-44df-a51b-06ea016bf5c9}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=d7d4619f-b55d-4d78-8c54-618b787f4bec}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__soft_delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package2",
                      "uuid": "f0b4e5fa-8d41-4d66-aeaa-eb49167edb1a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SOFT_DELETE_ELEMENT",
                    "uuid": "c9d3bf28-cc2a-4d59-ae23-4d2d26edf501",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Package_Element_Delete_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2",
                      "uuid": "d279538a-97bd-4115-9dfc-f7d9b348a5f0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "ea23ed40-b593-46a4-bf10-38919d991127",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=5bd7300a_deployment; uuid=344a92b7-9b48-44df-a51b-06ea016bf5c9}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae; uuid=0ced8358-1389-4afe-9353-e2fd522e3dd8}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__soft_delete_CRb_Substrate_a6d12d4d_8b5a_47ec_b253_af54e1b3ffae"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_blueprint_deployment",
                      "name": "5bd7300a_deployment",
                      "uuid": "344a92b7-9b48-44df-a51b-06ea016bf5c9"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SOFT_DELETE_DEPLOYMENT_ELEMENT",
                    "uuid": "36bd60a3-2beb-4dc9-afaa-2e3bf08fd360",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DE_Soft_Delete_8393e703_6144_420a_b945_3ea804c964be"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "944d58a5-2202-4edf-a732-5e5b483c201e",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Application_782cd956_cd54_4e79_9345_adc02d3725f9",
                  "uuid": "108c981a-8dd5-408c-9289-876218d78c6c"
                },
                "name": "SYS_GEN__Runbook_Application_782cd956_cd54_4e79_9345_adc02d3725f9"
              }
            }
          ],
          "message_list": [],
          "uuid": "cb0f2c12-3b0e-4495-91d9-69d8fd8fa00b",
          "dependency_list": [],
          "snapshot_config_list": [],
          "state": "ACTIVE",
          "patch_list": [],
          "restore_config_list": [],
          "variable_list": [],
          "name": "Profile2"
        },
        {
          "deployment_create_list": [
            {
              "description": "",
              "action_list": [
                {
                  "description": "System action for creating an application",
                  "message_list": [],
                  "uuid": "0efcec4f-7be6-44b8-8a59-849cea0b9ab2",
                  "name": "action_create",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=8b11ac3a-3149-4de9-96b1-c6d6ca9fde21; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04}",
                      "@{target_any_local_reference=; retries=0; description=; type=CREATE_DEPLOYMENT_ELEMENT; uuid=96625324-43ea-4296-b598-7bec71c01905; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__DE_Provision_86664f0c_08f6_4001_bb48_867bfd3e7a04}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=304fcbac-5195-4f92-80f0-226d9905036d; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__pre_create_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=f0c80beb-c326-4bbc-91cf-19fbad7496f7; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__create_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=c04960ac-0add-432e-be61-5457da898381; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__install_CRb_Package_d9af0a93_735a_49f3_943b_212b65058a40}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=c7615fc7-10a3-4d34-ae8b-021ee1922b82; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__create_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=383aa9a2-d8e7-4541-a942-0b977dcc076d; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "5cf582e9-a881-47b0-b076-3ff4be5c4781",
                    "state": "ACTIVE",
                    "variable_list": [],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04",
                      "uuid": "8b11ac3a-3149-4de9-96b1-c6d6ca9fde21"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04"
                  }
                },
                {
                  "description": "System action for starting an application",
                  "message_list": [],
                  "uuid": "b794ad7f-5dab-44dd-8a67-de80f4ff95ca",
                  "name": "action_start",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=71a01ea1-2506-43fa-aef1-d8057d9665db; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=dd7f813d-7b8f-47be-9a2d-a2453b25a150; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__start_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=720f8315-0c0c-44f6-9db3-00fa901911e8; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "e0bff907-9cd9-409b-adbb-9e40dfd0d259",
                    "state": "ACTIVE",
                    "variable_list": [],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04",
                      "uuid": "71a01ea1-2506-43fa-aef1-d8057d9665db"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04"
                  }
                },
                {
                  "description": "System action for restarting an application",
                  "message_list": [],
                  "uuid": "8ba63215-c596-416c-b2dc-2b8424dcef1e",
                  "name": "action_restart",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=efc3bc8a-8c0c-46ff-82f8-f29316444c61; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=05f57dbe-deee-4a0f-8322-f57b3c6de50c; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__restart_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=f5a4e92d-234e-4f26-b4b8-fd18c6c4672a; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__restart_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "6b762d9d-892d-4a0c-841e-bae0cc88fa3a",
                    "state": "ACTIVE",
                    "variable_list": [],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04",
                      "uuid": "efc3bc8a-8c0c-46ff-82f8-f29316444c61"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04"
                  }
                },
                {
                  "description": "System action for stopping an application",
                  "message_list": [],
                  "uuid": "08c9d369-98c2-4384-ad39-e53df9056de9",
                  "name": "action_stop",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=5deedc0d-04fb-4fa9-bd69-9f457dfe7e5c; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=9644c5c6-7be5-427c-a487-7a231e02fdfa; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=2112e5c7-62c6-42bf-a3aa-242cb906b1af; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__stop_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "106f3a0d-31e7-44cc-b2e4-519f54b59a1c",
                    "state": "ACTIVE",
                    "variable_list": [],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04",
                      "uuid": "5deedc0d-04fb-4fa9-bd69-9f457dfe7e5c"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04"
                  }
                },
                {
                  "description": "System action for deleting an application. Deletes created VMs as well",
                  "message_list": [],
                  "uuid": "32f288db-c207-42cd-883f-f49c47b70242",
                  "name": "action_delete",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=bc05f0a3-ab14-44ef-93b7-3631c6d0490a; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=f153f958-c2a9-4088-9868-c9a8fdab2e43; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=e5de7683-f285-44fc-84d9-ae6eeb333c14; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=a7daaf97-7c1c-4529-a982-737f9aa7429c; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__uninstall_CRb_Package_d9af0a93_735a_49f3_943b_212b65058a40}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=7ad201b8-61a3-41b8-bb6e-69086668f819; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__delete_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=9518fda7-af04-469a-939c-27d19ef3d973; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__post_delete_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b}",
                      "@{target_any_local_reference=; retries=0; description=; type=DELETE_DEPLOYMENT_ELEMENT; uuid=2787c095-0788-4719-87ae-b9f16e834c67; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__DE_Delete_86664f0c_08f6_4001_bb48_867bfd3e7a04}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "552d012d-55eb-4fc3-ad27-c4f6b5e21891",
                    "state": "ACTIVE",
                    "variable_list": [],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04",
                      "uuid": "bc05f0a3-ab14-44ef-93b7-3631c6d0490a"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04"
                  }
                },
                {
                  "description": "System action for scaleout",
                  "message_list": [],
                  "uuid": "5d5c65b3-578e-401a-9569-9b4ed5d66830",
                  "name": "action_scaleout",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=9a0b277c-f4c7-4aef-a310-84a0271f4587; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04}",
                      "@{target_any_local_reference=; retries=0; description=; type=SCALING; uuid=17d89bda-5169-4527-b7e8-3d9b1fd64bde; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Deployment_Scaleout_86664f0c_08f6_4001_bb48_867bfd3e7a04}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "2f3950fb-7beb-4f64-843b-a9c5c571e6dd",
                    "state": "ACTIVE",
                    "variable_list": [
                      "@{regex=; val_type=STRING; is_mandatory=False; description=; data_type=BASE; message_list=System.Object[]; uuid=d472a508-ac36-4cb9-8a5b-9bf54251a1a3; value=0; label=; state=NOT_VALIDATED; attrs=; editables=; is_hidden=False; type=LOCAL; options=; name=scaling_count}"
                    ],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04",
                      "uuid": "9a0b277c-f4c7-4aef-a310-84a0271f4587"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04"
                  }
                },
                {
                  "description": "System action for scalein",
                  "message_list": [],
                  "uuid": "f97574a3-c9b5-4283-992b-4faa1ccda8fa",
                  "name": "action_scalein",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=52db71c9-f8c2-499f-b943-637cc05c43db; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04}",
                      "@{target_any_local_reference=; retries=0; description=; type=SCALING; uuid=dfb5e0ec-688a-4361-a607-f28a6719bc03; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Deployment_Scalein_86664f0c_08f6_4001_bb48_867bfd3e7a04}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "93e77a79-e95d-4494-84a7-bef21b0353f5",
                    "state": "ACTIVE",
                    "variable_list": [
                      "@{regex=; val_type=STRING; is_mandatory=False; description=; data_type=BASE; message_list=System.Object[]; uuid=b0669f79-b9f8-4b3b-a4e5-65433e0826e2; value=0; label=; state=NOT_VALIDATED; attrs=; editables=; is_hidden=False; type=LOCAL; options=; name=scaling_count}"
                    ],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04",
                      "uuid": "52db71c9-f8c2-499f-b943-637cc05c43db"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04"
                  }
                },
                {
                  "description": "System action for deleting an application. Does not delete created VMs",
                  "message_list": [],
                  "uuid": "0a13ea19-1502-4926-83d9-4e7b6409a88b",
                  "name": "action_soft_delete",
                  "state": "ACTIVE",
                  "critical": false,
                  "attrs": {},
                  "type": "system",
                  "runbook": {
                    "task_definition_list": [
                      "@{target_any_local_reference=; retries=0; description=; type=DAG; uuid=935aacd7-9338-4f7c-9134-2fe39c396e2a; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Composite_DAG_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=becccdc1-8663-4483-9d0a-df64e6fef328; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__soft_delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1}",
                      "@{target_any_local_reference=; retries=0; description=; type=SOFT_DELETE_ELEMENT; uuid=def33816-d883-469f-b435-ed0ca436da5e; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__Package_Element_Delete_d9af0a93_735a_49f3_943b_212b65058a40}",
                      "@{target_any_local_reference=; retries=0; description=; type=CALL_RUNBOOK; uuid=9d4f677c-9bb4-4265-a80d-d56f27d56078; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__soft_delete_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b}",
                      "@{target_any_local_reference=; retries=0; description=; type=SOFT_DELETE_DEPLOYMENT_ELEMENT; uuid=edc483bb-ec1e-43a1-95ce-d4674878fcf6; child_tasks_local_reference_list=System.Object[]; state=ACTIVE; attrs=; timeout_secs=0; inherit_target=False; message_list=System.Object[]; variable_list=System.Object[]; name=SYS_GEN__DE_Soft_Delete_86664f0c_08f6_4001_bb48_867bfd3e7a04}"
                    ],
                    "description": "",
                    "message_list": [],
                    "uuid": "4fb7e3fe-4515-416b-ad6d-17bd33aff130",
                    "state": "ACTIVE",
                    "variable_list": [],
                    "main_task_local_reference": {
                      "kind": "app_task",
                      "name": "SYS_GEN__Composite_DAG_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04",
                      "uuid": "935aacd7-9338-4f7c-9134-2fe39c396e2a"
                    },
                    "name": "SYS_GEN__Runbook_Deployment_86664f0c_08f6_4001_bb48_867bfd3e7a04"
                  }
                }
              ],
              "message_list": [],
              "published_service_local_reference_list": [],
              "uuid": "aa17056a-8691-44a8-b4fc-850932ba95b4",
              "default_replicas": "@@{instance_count}@@",
              "min_replicas": "1",
              "state": "ACTIVE",
              "max_replicas": "4",
              "depends_on_list": [],
              "editables": {},
              "package_local_reference_list": [
                {
                  "kind": "app_package",
                  "name": "Package1_cloned_0",
                  "uuid": "5c071c1c-0d37-4e30-a4d7-1114e8ca78b0"
                }
              ],
              "substrate_local_reference": {
                "kind": "app_substrate",
                "name": "CentOSVm_Vmw",
                "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
              },
              "type": "GREENFIELD",
              "options": {},
              "variable_list": [],
              "name": "7af2d8ea_deployment"
            }
          ],
          "environment_reference_list": [],
          "application_url": "",
          "description": "",
          "action_list": [
            {
              "description": "",
              "message_list": [],
              "uuid": "2b28abeb-14bf-40b6-b21c-7cc447c2e135",
              "name": "Scale Out",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "6fc9dfdc-fea8-46b1-9f7a-85a7b9cbb09b",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=AddInstance; uuid=43712cf2-b667-4ee3-9a13-f27f13a29217}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "49a380fa_dag_cloned_1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_blueprint_deployment",
                      "name": "7af2d8ea_deployment",
                      "uuid": "aa17056a-8691-44a8-b4fc-850932ba95b4"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SCALING",
                    "uuid": "43712cf2-b667-4ee3-9a13-f27f13a29217",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "scaling_count": "1",
                      "type": "",
                      "scaling_type": "SCALEOUT"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "AddInstance"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "54c6a5e8-a136-4a58-a66d-267bfd7fdc31",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "49a380fa_dag_cloned_1",
                  "uuid": "6fc9dfdc-fea8-46b1-9f7a-85a7b9cbb09b"
                },
                "name": "c875b7ca_runbook_cloned_0"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "e47e3ea5-689b-4844-a3cc-e6afac2f61ed",
              "name": "Scale In",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "920df0b1-ed6a-4b14-b646-cf228163e49e",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=RemoveInstance; uuid=5c28141a-02db-4920-90b9-ab190b7abadc}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "72a3d1a3_dag_cloned_1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_blueprint_deployment",
                      "name": "7af2d8ea_deployment",
                      "uuid": "aa17056a-8691-44a8-b4fc-850932ba95b4"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SCALING",
                    "uuid": "5c28141a-02db-4920-90b9-ab190b7abadc",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "scaling_count": "1",
                      "type": "",
                      "scaling_type": "SCALEIN"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "RemoveInstance"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "daeda80b-1685-483a-8bdc-cc173365b302",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "72a3d1a3_dag_cloned_1",
                  "uuid": "920df0b1-ed6a-4b14-b646-cf228163e49e"
                },
                "name": "e3b02cf9_runbook_cloned_0"
              }
            },
            {
              "description": "",
              "message_list": [],
              "uuid": "9a45daf5-fe1d-4e2f-96d8-8d7a283fcc0f",
              "name": "Take Backup",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "user",
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "e7e93693-7f9e-4032-a01c-c90a7f656fa8",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=CreateJiraTicket_cloned_1; uuid=1c813ee7-19cc-408d-a73e-2e02143ba454}",
                      "@{kind=app_task; name=VeeamStartJob; uuid=53f4e9e5-feed-43bb-99b2-bcfb132a21a4}",
                      "@{kind=app_task; name=CloseJiraTicket_cloned_1; uuid=9391a843-117b-4c74-af5d-91f6b9abd665}",
                      "@{kind=app_task; name=LinkJiraParent_cloned_1; uuid=b4cd9d40-c9ce-47f5-a999-051323bf12f4}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": " ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "ecb3e0ba_dag_cloned_1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "1c813ee7-19cc-408d-a73e-2e02143ba454",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraCreateTicket\n# description:  Jira ticket creation using the deployed vm specs\n# input vars:   application_name, jira_project_key\n# output vars:  jira_ticket_name\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\njira_project_key = \"@@{jira_project_name}@@\"\napplication_name = \"@@{calm_application_name}@@\"\n# endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/api/3/issue\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\ncreate_payload = {\n    \"fields\": {\n    \"project\": {\n      \"key\": jira_project_key\n    },\n    \"description\": {\n      \"version\": 1,\n      \"type\": \"doc\",\n      \"content\": [\n        {\n          \"type\": \"paragraph\",\n          \"content\": [\n            {\n              \"type\": \"text\",\n              \"text\": \"Backup in progress\"\n            }\n          ]\n        }\n      ]\n    },\n    \"summary\": \"Backing-Up \"+ application_name,\n        \"labels\": [\n      \"calm\"\n    ],        \n    \"issuetype\": {\n      \"name\": \"Task\"\n    }\n  }\n    \n}\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, params=json.dumps(create_payload),\\\n              auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n              verify=False\n             )\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful. Status code: {}\".format(resp.status_code))\n    result = json.loads(resp.content)\n    print(\"Ticket {} was created\".format(result['key']))\n    print \"jira_child_ticket=\",result['key']\n    \n    \nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion",
                      "eval_variables": "jira_child_ticket",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "CreateJiraTicket_cloned_1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SET_VARIABLE",
                    "uuid": "53f4e9e5-feed-43bb-99b2-bcfb132a21a4",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       11/03/2020\n# task_name:    VeeamStartJob\n# description:  Starts a Veeam Job\n#               The script starts a Veeam Job using the \n#               the veeam_job_url on VeeamGetJob\n# input vars:   veeam_session_cookie, veeam_job_start_url, api_server\n# output vars:  none\n# endregion\n\n# region dealing with Scaling In/Out the application\n# # this script will be executed only on the first Service/Instance\n# (ie: Service[0])\nif \"@@{calm_array_index}@@\" != \"0\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{veeam.username}@@\"\npassword = \"@@{veeam.secret}@@\"\nveeam_job_name = \"@@{calm_application_name}@@\"  # getting the calm apps job\napi_server = \"@@{veeam_endpoint}@@\"\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/sessionMngr/?v=latest\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to Veeam...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the session_cookie and session_id\nresp_parse = json.loads(resp.content)\nveeam_session_cookie = resp.headers.get('X-RestSvcSessionId')\nveeam_session_id = resp_parse['SessionId']\n# endregion\n\n# region main processing\n# region prepare api call\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/jobs\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n# endregion\n\n# region get job\n# make the api call\nprint(\"STEP: Gettings jobs...\")\nmethod = \"GET\"\nprint(\"Making a {} API call to {}\".format(method, base_url))\nresp = process_request(base_url, method, headers)\n\n# get the job_url\njob_url = \"\"\nresp_parse = json.loads(resp.content)\nfor job in resp_parse['Refs']:\n    if job['Name'] == veeam_job_name:\n        job_url = job['Href']\n                \nif job_url:\n    veeam_job_url=job_url.rsplit('/', 1)[1] #get only the last occurence\nelse:\n    print(\"Error: Backup Job \"+veeam_job_name+\" is not present ..\")\n    exit(1)\n# endregion\n\n# region get job backup sessions\n# make the api call\nprint(\"STEP: Get backup sessions...\")\nmethod = \"GET\"\nurl = \"{0}/{1}/backupSessions?format=entity\".format(base_url, veeam_job_url)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# check if any job is currently running\nresp_parse = json.loads(resp.content)\nfor job in resp_parse['BackupJobSessions']:\n    if ((job['JobName'] == veeam_job_name) and (job['State'] == \"Working\")):\n        print(\"A job is currently running ..\")\n        print (\"Job's name: {}\" .format(job['JobName']))\n        print (\"Job's session name: {}\" .format(job['Name']))\n        print (\"Job's progress: {0}, state: {1}, result: {2}\" .format(job['Progress'], job['State'], job['Result']))\n        exit (1)\n# endregion\n\n# region start job\n# make the api call\nprint(\"STEP: Start job ...\")\nmethod = \"POST\"\nurl = \"{0}/{1}?action=start\".format(base_url, veeam_job_url)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the task_id so that it may be captured by Calm.\nresp_parse = json.loads(resp.content)\ntask_id = resp_parse['TaskId']\nprint (\"veeam_task_id={}\".format(task_id))\n# endregion\n# endregion\n\n# region logout\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/logonSessions\"\nmethod = \"DELETE\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n\n# making the call \nprint(\"STEP: Logging out of Veeam...\")\nurl = \"{0}/{1}\".format(url, veeam_session_id)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n# endregion\n\nexit(0)",
                      "eval_variables": "veeam_task_id",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "VeeamStartJob"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "9391a843-117b-4c74-af5d-91f6b9abd665",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraUpdateTicket\n# description:  updating the ticket status with the provided payload\n# input vars:   transition_id, ticket_name\n# output vars:  none\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\ntransition_id = 41 # 31 = in progress / 41 = Done\nticket_name = \"@@{jira_child_ticket}@@\" # ticket that need to be updated\n# endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/api/3/issue/\" + ticket_name + \"/transitions\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\nupdate_payload = {\n    \"transition\": {\n    \"id\": transition_id\n  }\n    \n}\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, params=json.dumps(update_payload),\\\n              auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n              verify=False\n             )\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful. Status code: {}\".format(resp.status_code))    \n    \nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "CloseJiraTicket_cloned_1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "EXEC",
                    "uuid": "b4cd9d40-c9ce-47f5-a999-051323bf12f4",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "script_type": "static",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraUpdateTicket\n# description:  Link a ticket to it's parent\n# input vars:   jira_link_type\n# output vars:  none\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\njira_link_type = \"@@{jira_link_type}@@\" #10003 = relates to\njira_parent_ticket = \"@@{jira_parent_ticket}@@\"\njira_child_ticket = \"@@{jira_child_ticket}@@\"\n# endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/api/3/issueLink\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\n\nlink_payload = {\n    \"outwardIssue\": {\n        \"key\": jira_child_ticket\n    },\n    \"inwardIssue\": {\n        \"key\": jira_parent_ticket\n    },\n    \"type\": {\n        \"id\": jira_link_type\n    }\n}\n\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, params=json.dumps(link_payload),\\\n              auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n              verify=False\n             )\n\nprint(resp)\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful. Status code: {}\".format(resp.status_code))    \n    \nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(resp.content))\n    exit(1)\n# endregion\n"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "LinkJiraParent_cloned_1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "76522bf4-7bdc-46fc-9e15-d4b4d35ef0fb",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "ecb3e0ba_dag_cloned_1",
                  "uuid": "e7e93693-7f9e-4032-a01c-c90a7f656fa8"
                },
                "name": "ab6f61cd_runbook_cloned_0"
              }
            },
            {
              "description": "System action for creating an application",
              "message_list": [],
              "uuid": "c6d57fb8-66a2-42d9-9b50-d595613505e5",
              "name": "action_create",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_profile",
                      "name": "Default_VMW",
                      "uuid": "4dc80a47-a30b-46e6-a1c3-5dfbca9f61b7"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "0b28e73a-3495-445a-a040-87a992c5b609",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__DE_Provision_86664f0c_08f6_4001_bb48_867bfd3e7a04; uuid=c531466a-6c83-4f58-8e13-cd03307cde38}",
                      "@{kind=app_task; name=SYS_GEN__pre_create_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b; uuid=8348ffa4-bb1e-446e-9cd7-ae15010d28e6}",
                      "@{kind=app_task; name=SYS_GEN__create_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b; uuid=22cc647b-dd66-4653-bc11-89b2a9575511}",
                      "@{kind=app_task; name=SYS_GEN__install_CRb_Package_d9af0a93_735a_49f3_943b_212b65058a40; uuid=2f2f1bd8-67f0-4a73-bf3a-af92fcad1c90}",
                      "@{kind=app_task; name=SYS_GEN__create_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=7683585a-758d-4f4b-b094-a84bd21fe3da}",
                      "@{kind=app_task; name=SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=7dcabee0-fef0-4e12-80f9-4aed2ab75fce}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "    ",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Application_4fafc0a3_31ec_4208_9fea_57848adfecb4"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_blueprint_deployment",
                      "name": "7af2d8ea_deployment",
                      "uuid": "aa17056a-8691-44a8-b4fc-850932ba95b4"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CREATE_DEPLOYMENT_ELEMENT",
                    "uuid": "c531466a-6c83-4f58-8e13-cd03307cde38",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DE_Provision_86664f0c_08f6_4001_bb48_867bfd3e7a04"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "8348ffa4-bb1e-446e-9cd7-ae15010d28e6",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7af2d8ea_deployment; uuid=aa17056a-8691-44a8-b4fc-850932ba95b4}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=035aa427_runbook_cloned_0; uuid=e6a79cd9-80bd-4fbc-8cfb-c1de2e8862b3}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__pre_create_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "22cc647b-dd66-4653-bc11-89b2a9575511",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7af2d8ea_deployment; uuid=aa17056a-8691-44a8-b4fc-850932ba95b4}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b; uuid=21ae3aa4-29c8-4d90-8c9c-db1edda58ef8}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__create_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1_cloned_0",
                      "uuid": "5c071c1c-0d37-4e30-a4d7-1114e8ca78b0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "2f2f1bd8-67f0-4a73-bf3a-af92fcad1c90",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7af2d8ea_deployment; uuid=aa17056a-8691-44a8-b4fc-850932ba95b4}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Package_d9af0a93_735a_49f3_943b_212b65058a40; uuid=fa4cda28-2628-497e-b25a-8eb25bebe540}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__install_CRb_Package_d9af0a93_735a_49f3_943b_212b65058a40"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "7683585a-758d-4f4b-b094-a84bd21fe3da",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7af2d8ea_deployment; uuid=aa17056a-8691-44a8-b4fc-850932ba95b4}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=f0d6aa56_runbook; uuid=6f03436d-c46f-42c1-838f-3ef00b072f23}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__create_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "7dcabee0-fef0-4e12-80f9-4aed2ab75fce",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7af2d8ea_deployment; uuid=aa17056a-8691-44a8-b4fc-850932ba95b4}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=efba402c_runbook; uuid=d0e1b19c-af6c-419d-87be-27afa329e778}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "68b2496b-845e-4b96-8c9f-df7ea3cc370e",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Application_4fafc0a3_31ec_4208_9fea_57848adfecb4",
                  "uuid": "0b28e73a-3495-445a-a040-87a992c5b609"
                },
                "name": "SYS_GEN__Runbook_Application_4fafc0a3_31ec_4208_9fea_57848adfecb4"
              }
            },
            {
              "description": "System action for starting an application",
              "message_list": [],
              "uuid": "dce0371f-63fb-42ab-bf1d-b544b934862f",
              "name": "action_start",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_profile",
                      "name": "Default_VMW",
                      "uuid": "4dc80a47-a30b-46e6-a1c3-5dfbca9f61b7"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "94ff3412-e4dc-4e86-a891-16c4e6a1860f",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__start_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b; uuid=864ab796-fe20-427e-949c-3bdd9f8d32d9}",
                      "@{kind=app_task; name=SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=3fa2abac-5eee-408b-b4fe-19c8661b8d88}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Application_4fafc0a3_31ec_4208_9fea_57848adfecb4"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "864ab796-fe20-427e-949c-3bdd9f8d32d9",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7af2d8ea_deployment; uuid=aa17056a-8691-44a8-b4fc-850932ba95b4}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b; uuid=5b2b41fd-ef3f-4869-8a05-cdc029fb3531}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__start_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "3fa2abac-5eee-408b-b4fe-19c8661b8d88",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7af2d8ea_deployment; uuid=aa17056a-8691-44a8-b4fc-850932ba95b4}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=efba402c_runbook; uuid=d0e1b19c-af6c-419d-87be-27afa329e778}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "9c76ac7c-6930-4383-bc31-9afd19cab36b",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Application_4fafc0a3_31ec_4208_9fea_57848adfecb4",
                  "uuid": "94ff3412-e4dc-4e86-a891-16c4e6a1860f"
                },
                "name": "SYS_GEN__Runbook_Application_4fafc0a3_31ec_4208_9fea_57848adfecb4"
              }
            },
            {
              "description": "System action for restarting an application",
              "message_list": [],
              "uuid": "e11b86c8-e940-4978-a72a-57e613063fb5",
              "name": "action_restart",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_profile",
                      "name": "Default_VMW",
                      "uuid": "4dc80a47-a30b-46e6-a1c3-5dfbca9f61b7"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "63364aff-4cdf-4e69-aedf-ea57e2ff20fe",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__restart_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b; uuid=62909590-32de-4a4b-a221-220912e167da}",
                      "@{kind=app_task; name=SYS_GEN__restart_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=3fc9fdf0-5308-4470-8a06-00f4cca889a1}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Application_4fafc0a3_31ec_4208_9fea_57848adfecb4"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "62909590-32de-4a4b-a221-220912e167da",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7af2d8ea_deployment; uuid=aa17056a-8691-44a8-b4fc-850932ba95b4}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b; uuid=5cc16368-da15-4c08-a60c-9784b15c136d}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__restart_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "3fc9fdf0-5308-4470-8a06-00f4cca889a1",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7af2d8ea_deployment; uuid=aa17056a-8691-44a8-b4fc-850932ba95b4}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=b25bb7e8_runbook; uuid=6c48900b-c924-48f6-b946-2c26e51be9c0}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__restart_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "178081c7-c0fe-4d7b-acb2-a4abcf1394f0",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Application_4fafc0a3_31ec_4208_9fea_57848adfecb4",
                  "uuid": "63364aff-4cdf-4e69-aedf-ea57e2ff20fe"
                },
                "name": "SYS_GEN__Runbook_Application_4fafc0a3_31ec_4208_9fea_57848adfecb4"
              }
            },
            {
              "description": "System action for stopping an application",
              "message_list": [],
              "uuid": "975eca82-171e-4a7d-b51b-c4a6e5cb5afb",
              "name": "action_stop",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_profile",
                      "name": "Default_VMW",
                      "uuid": "4dc80a47-a30b-46e6-a1c3-5dfbca9f61b7"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "9e6acd07-ef1a-4174-87eb-782e7ffbe401",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=bbd48434-bb5c-42b2-bb98-6a8cca12974d}",
                      "@{kind=app_task; name=SYS_GEN__stop_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b; uuid=c381a3dc-31f7-49f2-8c94-d4dbb585c7c9}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Application_4fafc0a3_31ec_4208_9fea_57848adfecb4"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "bbd48434-bb5c-42b2-bb98-6a8cca12974d",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7af2d8ea_deployment; uuid=aa17056a-8691-44a8-b4fc-850932ba95b4}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=53c0046c_runbook; uuid=67c4c206-3937-41c5-b191-4e4840ae55a5}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "c381a3dc-31f7-49f2-8c94-d4dbb585c7c9",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7af2d8ea_deployment; uuid=aa17056a-8691-44a8-b4fc-850932ba95b4}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b; uuid=cd97a262-b553-4a11-91a3-8ca1ff5b3264}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__stop_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "16895ba4-94fe-41dc-89e1-07da578c09b8",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Application_4fafc0a3_31ec_4208_9fea_57848adfecb4",
                  "uuid": "9e6acd07-ef1a-4174-87eb-782e7ffbe401"
                },
                "name": "SYS_GEN__Runbook_Application_4fafc0a3_31ec_4208_9fea_57848adfecb4"
              }
            },
            {
              "description": "System action for deleting an application. Deletes created VMs as well",
              "message_list": [],
              "uuid": "cb37e31d-ae8b-41cb-8d3f-6a0ef9b0ed13",
              "name": "action_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_profile",
                      "name": "Default_VMW",
                      "uuid": "4dc80a47-a30b-46e6-a1c3-5dfbca9f61b7"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "606454bd-c2da-45f9-9cae-4e63a55afcfe",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=25699239-697f-41ce-9992-724a7e352a7c}",
                      "@{kind=app_task; name=SYS_GEN__delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=2d346e32-902d-4751-87ee-9f3514b95500}",
                      "@{kind=app_task; name=SYS_GEN__uninstall_CRb_Package_d9af0a93_735a_49f3_943b_212b65058a40; uuid=f756116c-d5ee-49d3-acf8-3f0854a033cd}",
                      "@{kind=app_task; name=SYS_GEN__delete_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b; uuid=1dee3f55-12aa-4d60-8c1e-efe8cf8862ec}",
                      "@{kind=app_task; name=SYS_GEN__post_delete_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b; uuid=ec5628f2-4d1e-4d2b-80e7-8895737715f2}",
                      "@{kind=app_task; name=SYS_GEN__DE_Delete_86664f0c_08f6_4001_bb48_867bfd3e7a04; uuid=f10e85dc-b291-4f97-b48b-84d64b0acae7}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "    ",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Application_4fafc0a3_31ec_4208_9fea_57848adfecb4"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "25699239-697f-41ce-9992-724a7e352a7c",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7af2d8ea_deployment; uuid=aa17056a-8691-44a8-b4fc-850932ba95b4}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=53c0046c_runbook; uuid=67c4c206-3937-41c5-b191-4e4840ae55a5}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "2d346e32-902d-4751-87ee-9f3514b95500",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7af2d8ea_deployment; uuid=aa17056a-8691-44a8-b4fc-850932ba95b4}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=df173f1e_runbook; uuid=5a750d31-8cd9-402f-b4b1-50af0ec1536a}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1_cloned_0",
                      "uuid": "5c071c1c-0d37-4e30-a4d7-1114e8ca78b0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "f756116c-d5ee-49d3-acf8-3f0854a033cd",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7af2d8ea_deployment; uuid=aa17056a-8691-44a8-b4fc-850932ba95b4}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Package_d9af0a93_735a_49f3_943b_212b65058a40; uuid=84c56806-03f8-428a-8317-8af6f7df4f9c}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__uninstall_CRb_Package_d9af0a93_735a_49f3_943b_212b65058a40"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "1dee3f55-12aa-4d60-8c1e-efe8cf8862ec",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7af2d8ea_deployment; uuid=aa17056a-8691-44a8-b4fc-850932ba95b4}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b; uuid=6acea0d7-6182-4e2b-965f-de1118b8d94d}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__delete_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "ec5628f2-4d1e-4d2b-80e7-8895737715f2",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7af2d8ea_deployment; uuid=aa17056a-8691-44a8-b4fc-850932ba95b4}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=097095e6_runbook_cloned_0; uuid=2c3a538a-cda4-42fe-94fd-3548ba74a56b}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__post_delete_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_blueprint_deployment",
                      "name": "7af2d8ea_deployment",
                      "uuid": "aa17056a-8691-44a8-b4fc-850932ba95b4"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DELETE_DEPLOYMENT_ELEMENT",
                    "uuid": "f10e85dc-b291-4f97-b48b-84d64b0acae7",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DE_Delete_86664f0c_08f6_4001_bb48_867bfd3e7a04"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "795612f7-8021-4756-bf0f-4fe1d8914b59",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Application_4fafc0a3_31ec_4208_9fea_57848adfecb4",
                  "uuid": "606454bd-c2da-45f9-9cae-4e63a55afcfe"
                },
                "name": "SYS_GEN__Runbook_Application_4fafc0a3_31ec_4208_9fea_57848adfecb4"
              }
            },
            {
              "description": "System action for deleting an application. Does not delete created VMs",
              "message_list": [],
              "uuid": "a4d1ae22-157b-42ec-922f-a121c93deb2e",
              "name": "action_soft_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_profile",
                      "name": "Default_VMW",
                      "uuid": "4dc80a47-a30b-46e6-a1c3-5dfbca9f61b7"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "16e4be48-5d3e-42fb-b5f4-f305c9737468",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__soft_delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=31dada2b-ed25-4196-9f81-162a863323f8}",
                      "@{kind=app_task; name=SYS_GEN__Package_Element_Delete_d9af0a93_735a_49f3_943b_212b65058a40; uuid=8754fc40-22b5-441c-a5a8-f93332cd3ebf}",
                      "@{kind=app_task; name=SYS_GEN__soft_delete_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b; uuid=c362b2f5-4215-4a5a-b96d-e02b663e2972}",
                      "@{kind=app_task; name=SYS_GEN__DE_Soft_Delete_86664f0c_08f6_4001_bb48_867bfd3e7a04; uuid=3bd02ed2-8dbb-4fda-8470-f752d33f5aaf}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "  ",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Application_4fafc0a3_31ec_4208_9fea_57848adfecb4"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "31dada2b-ed25-4196-9f81-162a863323f8",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7af2d8ea_deployment; uuid=aa17056a-8691-44a8-b4fc-850932ba95b4}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=d7d4619f-b55d-4d78-8c54-618b787f4bec}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__soft_delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1_cloned_0",
                      "uuid": "5c071c1c-0d37-4e30-a4d7-1114e8ca78b0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SOFT_DELETE_ELEMENT",
                    "uuid": "8754fc40-22b5-441c-a5a8-f93332cd3ebf",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Package_Element_Delete_d9af0a93_735a_49f3_943b_212b65058a40"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw",
                      "uuid": "5cc34a29-43e0-4adb-9d4e-28ed3719263a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "c362b2f5-4215-4a5a-b96d-e02b663e2972",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "deployment_reference": "@{kind=app_blueprint_deployment; name=7af2d8ea_deployment; uuid=aa17056a-8691-44a8-b4fc-850932ba95b4}",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b; uuid=c262630c-7945-4058-b67b-923f842a4d88}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__soft_delete_CRb_Substrate_6771aa29_178c_4974_ba12_96e4e0d3174b"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_blueprint_deployment",
                      "name": "7af2d8ea_deployment",
                      "uuid": "aa17056a-8691-44a8-b4fc-850932ba95b4"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SOFT_DELETE_DEPLOYMENT_ELEMENT",
                    "uuid": "3bd02ed2-8dbb-4fda-8470-f752d33f5aaf",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DE_Soft_Delete_86664f0c_08f6_4001_bb48_867bfd3e7a04"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "3c53ae2c-0b8c-4a92-9fe1-f85263b4cbce",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Application_4fafc0a3_31ec_4208_9fea_57848adfecb4",
                  "uuid": "16e4be48-5d3e-42fb-b5f4-f305c9737468"
                },
                "name": "SYS_GEN__Runbook_Application_4fafc0a3_31ec_4208_9fea_57848adfecb4"
              }
            }
          ],
          "message_list": [],
          "uuid": "4dc80a47-a30b-46e6-a1c3-5dfbca9f61b7",
          "dependency_list": [],
          "snapshot_config_list": [],
          "state": "ACTIVE",
          "patch_list": [],
          "restore_config_list": [],
          "variable_list": [
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "1daf28a9-ff18-213e-4f13-dde5cb30fd9c",
              "value": "DHCP",
              "label": "Public vSphere Portgroup",
              "state": "ACTIVE",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "DHCP",
                  "VM Network"
                ]
              },
              "name": "vc_public_network"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "c29ea58a-8e8c-a714-03eb-4c50965840ba",
              "value": "DHCP",
              "label": "Management vSphere Portgroup",
              "state": "ACTIVE",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "DHCP",
                  "VM Network"
                ]
              },
              "name": "vc_mgmt_network"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": true,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "fd42d05c-9cc4-4947-a40a-9d50f46e5cb9",
              "value": "WWW",
              "label": "Which application to install?",
              "state": "ACTIVE",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "WWW",
                  "CMS",
                  "SFTP",
                  "Captive2 Server",
                  "Virgin API Server",
                  "Logstash",
                  "Identity Server",
                  "Support Manager",
                  "Radius",
                  "Captive Manager Server",
                  "Policy Manager Master & Slave"
                ]
              },
              "name": "source_app"
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^.*$"
              },
              "val_type": "STRING",
              "is_mandatory": true,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "bf9bc864-a122-464c-8d76-4a2e1e4088c9",
              "value": "entbase",
              "label": "What is the application prefix?",
              "state": "ACTIVE",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "entbase"
                ]
              },
              "name": "app_prefix"
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^[\\d]*$"
              },
              "val_type": "INT",
              "is_mandatory": true,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "1e5b3a99-2ee7-4d8d-8064-b1c9e7e9458e",
              "value": "1",
              "label": "How many instance to deploy?",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "instance_count"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "90e60f8f-3a93-4ffd-a468-0f1261d23baf",
              "value": "10.68.99.208",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "f5_endpoint"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "e57e4814-2411-a851-d805-99817163eed8",
              "value": "yes",
              "label": "Virtual server",
              "state": "ACTIVE",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "yes",
                  "no"
                ]
              },
              "name": "f5_enabled"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "b9c3fb35-58a4-46ce-42d8-979c814eabd8",
              "value": "",
              "label": "Virtual Server F5 Network",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "type": "HTTP_LOCAL",
              "options": {
                "type": "HTTP",
                "attrs": {
                  "expected_response_params": [
                    {
                      "status": "SUCCESS",
                      "code": 200,
                      "type": ""
                    }
                  ],
                  "request_body": "",
                  "retry_count": 1,
                  "url": "https://10.68.99.162/rest/ip_block_subnet_list?WHERE=parent_site_name='EMEAGSO'&WHERE=is_terminal='1'",
                  "response_paths": {
                    "eip_f5_subnet": "$.subnet_name"
                  },
                  "retry_interval": 1,
                  "proxy_type": "",
                  "headers": [],
                  "authentication": {
                    "type": "basic_with_cred",
                    "credential_local_reference": {
                      "kind": "app_credential",
                      "name": "eip",
                      "uuid": "3ed4cb14-c90e-6526-4cbb-79008fa95647"
                    }
                  },
                  "tls_verify": false,
                  "content_type": "application/json",
                  "connection_timeout": 120,
                  "type": "HTTP",
                  "method": "GET"
                }
              },
              "name": "eip_f5_subnet"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "37290728-bad8-2542-230a-9c58c214812b",
              "value": "10.68.99.162",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "eip_endpoint"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "ac31b554-e3ef-5686-4af4-e4f4a377736c",
              "value": "EMEAGSO",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "eip_site_name"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "1bc6916f-b192-7618-1864-3fd2777fcc92",
              "value": "eip_dns_zone",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "eip_dns_zone"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "f4a942e4-b4a5-ade8-fe4d-320ec7a06ac6",
              "value": "",
              "label": "Public Network",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "type": "HTTP_LOCAL",
              "options": {
                "type": "HTTP",
                "attrs": {
                  "expected_response_params": [
                    {
                      "status": "SUCCESS",
                      "code": 200,
                      "type": ""
                    }
                  ],
                  "request_body": "",
                  "retry_count": 1,
                  "url": "https://10.68.99.162/rest/ip_block_subnet_list?WHERE=parent_site_name='EMEAGSO'&WHERE=is_terminal='1'",
                  "response_paths": {
                    "eip_public_subnet": "$.subnet_name"
                  },
                  "retry_interval": 1,
                  "proxy_type": "",
                  "headers": [],
                  "authentication": {
                    "type": "basic_with_cred",
                    "credential_local_reference": {
                      "kind": "app_credential",
                      "name": "eip",
                      "uuid": "3ed4cb14-c90e-6526-4cbb-79008fa95647"
                    }
                  },
                  "tls_verify": false,
                  "content_type": "application/json",
                  "connection_timeout": 120,
                  "type": "HTTP",
                  "method": "GET"
                }
              },
              "name": "eip_public_subnet"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "9dc12ce0-ee75-4f0d-1eb6-03cb14e9edb0",
              "value": "",
              "label": "Management Network",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "type": "HTTP_LOCAL",
              "options": {
                "type": "HTTP",
                "attrs": {
                  "expected_response_params": [
                    {
                      "status": "SUCCESS",
                      "code": 200,
                      "type": ""
                    }
                  ],
                  "request_body": "",
                  "retry_count": 1,
                  "url": "https://10.68.99.162/rest/ip_block_subnet_list?WHERE=parent_site_name='EMEAGSO'&WHERE=is_terminal='1'",
                  "response_paths": {
                    "eip_mgmt_subnet": "$.subnet_name"
                  },
                  "retry_interval": 1,
                  "proxy_type": "",
                  "headers": [],
                  "authentication": {
                    "type": "basic_with_cred",
                    "credential_local_reference": {
                      "kind": "app_credential",
                      "name": "eip",
                      "uuid": "3ed4cb14-c90e-6526-4cbb-79008fa95647"
                    }
                  },
                  "tls_verify": false,
                  "content_type": "application/json",
                  "connection_timeout": 120,
                  "type": "HTTP",
                  "method": "GET"
                }
              },
              "name": "eip_mgmt_subnet"
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^[\\d]*$"
              },
              "val_type": "INT",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "1bb4a3d3-425c-7d77-2f83-dd4442cf0cb0",
              "value": "4",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "eip_min_free_ip"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "66c6b9eb-4ac5-451f-b6af-b9be3a7e584c",
              "value": "GSO",
              "label": "Datacenter?",
              "state": "ACTIVE",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "GSO"
                ]
              },
              "name": "vc_datacenter"
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^.*$"
              },
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "3c2f764b-92c2-4a3d-89a8-34ef9ad55688",
              "value": "ROCKET",
              "label": "Cluster?",
              "state": "ACTIVE",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "ROCKET"
                ]
              },
              "name": "vc_cluster"
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^.*$"
              },
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "library_reference": "2f04a001-f227-483e-9eb8-eba2b46ba16f",
              "uuid": "89580b38-785f-4047-9584-f2b8945ffc25",
              "value": "",
              "label": "Which application to replace?",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "type": "EXEC_LOCAL",
              "options": {
                "type": "EXEC",
                "attrs": {
                  "script_type": "static",
                  "type": "EXEC",
                  "command_line_args": "",
                  "exit_status": [],
                  "script": "# region headers\n# escript-template v20190605 / stephane.bourdeaud@nutanix.com\n# * author:       stephane.bourdeaud@nutanix.com\n# * version:      2020/01/22\n# task_name:      CalmGetApp\n# description:    This script gets the list of application instances from Calm.\n# TODO: test\n# endregion\n\n# region capture Calm macros\npc_ip = '@@{prism_ip}@@'\nusername = '@@{prism_username}@@'\nusername_secret = '@@{prism_secret}@@'\n# endregion\n\n# region prepare variables\nheaders = {'content-type': 'application/json'}\n# endregion\n\n# region REST call: Get Apps\nmethod = 'POST'\nurl = \"https://{}:9440/api/nutanix/v3/apps/list\".format(pc_ip)\npayload = {\n    \"kind\": \"app\",\n    \"length\": 250\n}\n#print(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    params=json.dumps(payload),\n    headers=headers,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    verify=False\n)\n\nif resp.ok:\n    json_resp = json.loads(resp.content)\n    if json_resp['metadata']['total_matches'] > 0:\n        apps_list = []\n        for app in json_resp['entities']:\n            apps_list.append(app['metadata']['name'])\n        print(\",\".join(apps_list))\n    else:\n        print(\"Could not find any apps.\")\n        exit(1)\n    exit(0)\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion"
                }
              },
              "name": "target_app"
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^.*$"
              },
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "LIST",
              "message_list": [],
              "uuid": "5ebe9307-f8f7-4efc-b7c9-d415a5881674",
              "value": "",
              "label": "What firewall policy you would like to apply?",
              "state": "ACTIVE",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "type": "EXEC_LOCAL",
              "options": {
                "type": "EXEC",
                "attrs": {
                  "script_type": "static",
                  "type": "EXEC",
                  "command_line_args": "",
                  "exit_status": [],
                  "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    FortigateListAllPolicies\n# description:  List all Fortigate policies\n# input vars:   fortigate cookie and csrf token\n# output vars:  fortigate_policy_id, fortigate_policy_name\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate_username}@@\"\nfortigate_password = \"@@{fortigate_password}@@\"\napi_server_port = 80\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\n# endregion\n\ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'text/plain'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    #print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        #print(\"Successfully authenticated\")\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\ndef fortiget_get_policies(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/policy/?format=policyid|name&skip=1&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n        'Accept': 'application/json'\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    #print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        policies_list = []\n        #print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        for policy in result['results']:\n            policies_list.append(str(policy['policyid']) + \"-\" + str(policy['name']))\n            #print(\"{}-{}\".format(policy['policyid'],policy['name']))\n        print(\",\".join(policies_list))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \n\nfortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\nfortiget_get_policies(api_server, api_server_port, fortigate_csrf_token,\n                      fortigate_cookie, fortigate_vdom)\n"
                }
              },
              "name": "fortigate_policy"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "13b402dd-1207-4821-b43c-6702e42d1bf8",
              "value": "Backups",
              "label": "Backup Repository?",
              "state": "ACTIVE",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "Backups",
                  "Archive"
                ]
              },
              "name": "veeam_repo_name"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "33d73197-158d-43b4-8eb3-eeccde367822",
              "value": "22:00",
              "label": "Backup Schedule?",
              "state": "ACTIVE",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "22:00",
                  "12:00"
                ]
              },
              "name": "veeam_job_daily_schedule"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "28c39541-a2e8-47c4-9664-f23daeeee4d4",
              "value": "admin",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "fortigate_username"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "554c11b8-26de-4046-94a2-735a92fedee5",
              "value": "nutanix/4u",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "fortigate_password"
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^.*$"
              },
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "4b0651ce-9aea-4473-bd1b-def00396b51d",
              "value": "root",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "fortigate_vdom"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "5a5ac001-e392-4d69-998e-e8ed6a154c0e",
              "value": "10.68.99.222",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "fortigate_endpoint"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "0138b8d7-3cbf-4db4-93f1-14f83a3d17ee",
              "value": "10.68.99.210",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "jenkins_endpoint"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "91f9a3f7-f09e-4a5c-ae53-aa3ff7e12ed3",
              "value": "10.68.99.210",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "jenkins_ip"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "56d45c3f-00a5-4789-8c45-b2b1e3c3976f",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "is_secret_modified": false,
                "secret_reference": {
                  "uuid": "92c72d7f-d4cf-49cb-90d0-7e448f255240"
                },
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "SECRET",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "ansible_public_key"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "d6dabf11-c943-4f30-880e-85bca0a73125",
              "value": "10.68.99.210",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "awx_ip"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "a3c5a275-6181-4d75-8e52-7c341e6eb190",
              "value": "",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "jira_parent_ticket"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "774e3f0a-6378-4edd-8c15-1f3c7ee3c0ac",
              "value": "o2channels.atlassian.net",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "jira_endpoint"
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^[\\d]*$"
              },
              "val_type": "INT",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "c3791a9c-33d4-4f9f-9b6b-f7f17d3710e4",
              "value": "10003",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "jira_link_type"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "0d4e4cf7-0466-4515-adb4-312baf595e1d",
              "value": "WIFICALM",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "jira_project_name"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "48969ff3-ace3-46e5-9a29-57571149a864",
              "value": "salah.gassim@emeagso.lab",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "prism_username"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "d8d3ba24-8521-4e6e-94ce-491cccf3f996",
              "value": "nutanix/4u",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "prism_secret"
            },
            {
              "regex": {},
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "message_list": [],
              "uuid": "d35bba9d-c1b8-4132-bf46-2850408c2d0e",
              "value": "10.68.97.150",
              "label": "",
              "state": "ACTIVE",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "type": "LOCAL",
              "options": {
                "type": "PREDEFINED",
                "choices": []
              },
              "name": "prism_ip"
            }
          ],
          "name": "Default_VMW"
        }
      ],
      "published_service_definition_list": [],
      "default_credential_local_reference": {
        "kind": "app_credential",
        "name": "awx",
        "uuid": "6ab7b67c-716d-4fd7-9439-e040ddf95e63"
      },
      "package_definition_list": [
        {
          "description": "",
          "action_list": [
            {
              "description": "System action for installing an application",
              "message_list": [],
              "uuid": "10cf546d-48c2-4108-8e0c-75b512cdc8c1",
              "name": "action_install",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1",
                      "uuid": "9cb5f39d-26e8-4eef-9edc-a39bc9f7dc0c"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "f53cb925-c615-4e35-81bd-7a579ba85965",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Install_Crb_9cb5f39d_26e8_4eef_9edc_a39bc9f7dc0c; uuid=5028db7b-c35d-4c9f-9161-62fd39126a9d}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1",
                      "uuid": "9cb5f39d-26e8-4eef-9edc-a39bc9f7dc0c"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CUSTOM_PACKAGE_INSTALL",
                    "uuid": "5028db7b-c35d-4c9f-9161-62fd39126a9d",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "install_runbook": "@{task_definition_list=System.Object[]; description=; message_list=System.Object[]; uuid=c17d0881-f3f3-476f-b538-9a6b08ec240b; state=ACTIVE; variable_list=System.Object[]; main_task_local_reference=; name=59692b6a_runbook}",
                      "type": "",
                      "upgrade_runbook": "",
                      "uninstall_runbook": "@{task_definition_list=System.Object[]; description=; message_list=System.Object[]; uuid=4eec1bbb-2b3a-4f92-b737-c3b28d4bc8a0; state=ACTIVE; variable_list=System.Object[]; main_task_local_reference=; name=d1b88acb_runbook}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Install_Crb_9cb5f39d_26e8_4eef_9edc_a39bc9f7dc0c"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "50677039-79e5-4d55-b200-2979e00496d6",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee",
                  "uuid": "f53cb925-c615-4e35-81bd-7a579ba85965"
                },
                "name": "SYS_GEN__Runbook_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
              }
            },
            {
              "description": "System action for creating an application",
              "message_list": [],
              "uuid": "31a12fed-a171-4c38-9595-8caa16450381",
              "name": "action_create",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1",
                      "uuid": "9cb5f39d-26e8-4eef-9edc-a39bc9f7dc0c"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "d2ac6059-6ffe-4ec6-9081-af9f3274e305",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__install_CRb_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee; uuid=b341e59a-da95-4b76-94ac-05f913e5e05b}",
                      "@{kind=app_task; name=SYS_GEN__create_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=a0763ab1-7d46-403c-9ed9-3977929ae367}",
                      "@{kind=app_task; name=SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=cbc0a335-e5ce-4494-8dd1-80a234784d53}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": " ",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1",
                      "uuid": "9cb5f39d-26e8-4eef-9edc-a39bc9f7dc0c"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "b341e59a-da95-4b76-94ac-05f913e5e05b",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee; uuid=50677039-79e5-4d55-b200-2979e00496d6}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__install_CRb_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "a0763ab1-7d46-403c-9ed9-3977929ae367",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=f0d6aa56_runbook; uuid=6f03436d-c46f-42c1-838f-3ef00b072f23}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__create_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "cbc0a335-e5ce-4494-8dd1-80a234784d53",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=efba402c_runbook; uuid=d0e1b19c-af6c-419d-87be-27afa329e778}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "e4bf2b4d-7536-465a-95d8-54e90106a14c",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee",
                  "uuid": "d2ac6059-6ffe-4ec6-9081-af9f3274e305"
                },
                "name": "SYS_GEN__Runbook_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
              }
            },
            {
              "description": "System action for uninstalling an application",
              "message_list": [],
              "uuid": "c7c234a9-b421-4c42-bd1f-f3d2d6b65a54",
              "name": "action_uninstall",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1",
                      "uuid": "9cb5f39d-26e8-4eef-9edc-a39bc9f7dc0c"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "bf60512f-84a8-4442-a76b-042d94fdf42e",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Uninstall_Crb_9cb5f39d_26e8_4eef_9edc_a39bc9f7dc0c; uuid=0c8341b8-5d43-4f65-9c27-8cab921a56db}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1",
                      "uuid": "9cb5f39d-26e8-4eef-9edc-a39bc9f7dc0c"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CUSTOM_PACKAGE_UNINSTALL",
                    "uuid": "0c8341b8-5d43-4f65-9c27-8cab921a56db",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "install_runbook": "@{task_definition_list=System.Object[]; description=; message_list=System.Object[]; uuid=c17d0881-f3f3-476f-b538-9a6b08ec240b; state=ACTIVE; variable_list=System.Object[]; main_task_local_reference=; name=59692b6a_runbook}",
                      "type": "",
                      "upgrade_runbook": "",
                      "uninstall_runbook": "@{task_definition_list=System.Object[]; description=; message_list=System.Object[]; uuid=4eec1bbb-2b3a-4f92-b737-c3b28d4bc8a0; state=ACTIVE; variable_list=System.Object[]; main_task_local_reference=; name=d1b88acb_runbook}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Uninstall_Crb_9cb5f39d_26e8_4eef_9edc_a39bc9f7dc0c"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "f17ac097-298d-48ab-8356-6b79ff686de3",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee",
                  "uuid": "bf60512f-84a8-4442-a76b-042d94fdf42e"
                },
                "name": "SYS_GEN__Runbook_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
              }
            },
            {
              "description": "System action for deleting an application. Deletes created VMs as well",
              "message_list": [],
              "uuid": "3cd4b984-8a43-4f4d-b215-e4548bae219d",
              "name": "action_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1",
                      "uuid": "9cb5f39d-26e8-4eef-9edc-a39bc9f7dc0c"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "9e7801f2-79cc-4f01-9191-2122095a1a35",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=fef2971c-65e7-47df-b2b5-ced82437c02c}",
                      "@{kind=app_task; name=SYS_GEN__delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=daf39dd9-f1d0-42b1-937e-b1465a41b198}",
                      "@{kind=app_task; name=SYS_GEN__uninstall_CRb_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee; uuid=26c90814-5450-4d60-b014-2efae72d9804}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": " ",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "fef2971c-65e7-47df-b2b5-ced82437c02c",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=53c0046c_runbook; uuid=67c4c206-3937-41c5-b191-4e4840ae55a5}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "daf39dd9-f1d0-42b1-937e-b1465a41b198",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=df173f1e_runbook; uuid=5a750d31-8cd9-402f-b4b1-50af0ec1536a}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1",
                      "uuid": "9cb5f39d-26e8-4eef-9edc-a39bc9f7dc0c"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "26c90814-5450-4d60-b014-2efae72d9804",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee; uuid=f17ac097-298d-48ab-8356-6b79ff686de3}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__uninstall_CRb_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "11c61e0b-de30-407d-a04f-aed16a1a0b61",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee",
                  "uuid": "9e7801f2-79cc-4f01-9191-2122095a1a35"
                },
                "name": "SYS_GEN__Runbook_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
              }
            },
            {
              "description": "System action for deleting an application. Does not delete created VMs",
              "message_list": [],
              "uuid": "530578b8-2c3b-4616-916f-545cefd9c019",
              "name": "action_soft_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1",
                      "uuid": "9cb5f39d-26e8-4eef-9edc-a39bc9f7dc0c"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "ce4b4991-67ee-4d47-826b-d617df06f96d",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__soft_delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=a8469c1e-26bc-45a8-b8ec-59b91de6b082}",
                      "@{kind=app_task; name=SYS_GEN__Package_Element_Delete_c8247076_e8ea_4ec9_9f66_8cf32084d0ee; uuid=9b7bddbd-722f-4e00-8e5d-05bffe553b4c}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "a8469c1e-26bc-45a8-b8ec-59b91de6b082",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=d7d4619f-b55d-4d78-8c54-618b787f4bec}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__soft_delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1",
                      "uuid": "9cb5f39d-26e8-4eef-9edc-a39bc9f7dc0c"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SOFT_DELETE_ELEMENT",
                    "uuid": "9b7bddbd-722f-4e00-8e5d-05bffe553b4c",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Package_Element_Delete_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "a56bd2b8-a8c5-4465-aed8-a5c85a375d62",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee",
                  "uuid": "ce4b4991-67ee-4d47-826b-d617df06f96d"
                },
                "name": "SYS_GEN__Runbook_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
              }
            },
            {
              "description": "System action for starting an application",
              "message_list": [],
              "uuid": "bf8ecb93-ab3a-4a7a-b2a6-30ced32ad2db",
              "name": "action_start",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1",
                      "uuid": "9cb5f39d-26e8-4eef-9edc-a39bc9f7dc0c"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "5da5584d-58b6-49b6-88e3-33eb7604310f",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=ffdac720-a228-41cb-9a44-a24343c86860}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "ffdac720-a228-41cb-9a44-a24343c86860",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=efba402c_runbook; uuid=d0e1b19c-af6c-419d-87be-27afa329e778}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "5b620fa5-8e84-4617-a364-439e63426c0b",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee",
                  "uuid": "5da5584d-58b6-49b6-88e3-33eb7604310f"
                },
                "name": "SYS_GEN__Runbook_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
              }
            },
            {
              "description": "System action for restarting an application",
              "message_list": [],
              "uuid": "fc6e6827-14bc-406b-a721-d412cf693f8c",
              "name": "action_restart",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1",
                      "uuid": "9cb5f39d-26e8-4eef-9edc-a39bc9f7dc0c"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "0655081b-f369-4399-8a95-88b5a3813be5",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__restart_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=6d6b530a-dc4e-4ee6-a017-a8fde7258d69}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "6d6b530a-dc4e-4ee6-a017-a8fde7258d69",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=b25bb7e8_runbook; uuid=6c48900b-c924-48f6-b946-2c26e51be9c0}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__restart_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "98d85e8c-e534-4c85-89fb-7c1d93ec5307",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee",
                  "uuid": "0655081b-f369-4399-8a95-88b5a3813be5"
                },
                "name": "SYS_GEN__Runbook_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
              }
            },
            {
              "description": "System action for stopping an application",
              "message_list": [],
              "uuid": "458890b2-0a63-416e-beee-595fe10e1d0d",
              "name": "action_stop",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1",
                      "uuid": "9cb5f39d-26e8-4eef-9edc-a39bc9f7dc0c"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "c0aed4cb-abce-49bd-842a-103507f77328",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=40827651-9e34-49a4-a2d2-3aa425b0244f}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "40827651-9e34-49a4-a2d2-3aa425b0244f",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=53c0046c_runbook; uuid=67c4c206-3937-41c5-b191-4e4840ae55a5}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "94b1e864-59f1-4be5-bb51-572878b39eb5",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee",
                  "uuid": "c0aed4cb-abce-49bd-842a-103507f77328"
                },
                "name": "SYS_GEN__Runbook_Package_c8247076_e8ea_4ec9_9f66_8cf32084d0ee"
              }
            }
          ],
          "message_list": [],
          "service_local_reference_list": [
            {
              "kind": "app_service",
              "name": "CentOS7",
              "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
            }
          ],
          "uuid": "9cb5f39d-26e8-4eef-9edc-a39bc9f7dc0c",
          "state": "ACTIVE",
          "version": "",
          "editables": {},
          "type": "DEB",
          "options": {
            "install_runbook": {
              "task_definition_list": [
                {
                  "target_any_local_reference": {
                    "kind": "app_package",
                    "name": "Package1",
                    "uuid": "9cb5f39d-26e8-4eef-9edc-a39bc9f7dc0c"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "DAG",
                  "uuid": "d59a9f00-6617-43e7-8ee6-e3e3acb4a49b",
                  "child_tasks_local_reference_list": [
                    {
                      "kind": "app_task",
                      "name": "AnsibleDeployment",
                      "uuid": "92c57f2a-2d10-4958-94d8-48aa013695eb"
                    },
                    {
                      "kind": "app_task",
                      "name": "FortigateConfigAdd",
                      "uuid": "1d046397-33cf-42c5-834c-4ac6c2ae27a5"
                    }
                  ],
                  "state": "ACTIVE",
                  "attrs": {
                    "edges": [
                      "@{from_task_reference=; edge_type=user_defined; type=; uuid=33ecb241-5ddf-4fde-adeb-610ec8fd9aa8; to_task_reference=}"
                    ],
                    "type": ""
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "f6e26c73_dag"
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7",
                    "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "CALL_RUNBOOK",
                  "uuid": "92c57f2a-2d10-4958-94d8-48aa013695eb",
                  "child_tasks_local_reference_list": [],
                  "state": "ACTIVE",
                  "attrs": {
                    "inarg_list": [],
                    "type": "CALL_RUNBOOK",
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "bf14dde8_runbook",
                      "uuid": "5d5c4127-f6ee-4674-81fc-d96c434783fe"
                    }
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "AnsibleDeployment"
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7",
                    "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "CALL_RUNBOOK",
                  "uuid": "1d046397-33cf-42c5-834c-4ac6c2ae27a5",
                  "child_tasks_local_reference_list": [],
                  "state": "ACTIVE",
                  "attrs": {
                    "inarg_list": [],
                    "type": "CALL_RUNBOOK",
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "141bd772_runbook",
                      "uuid": "0807d9ca-e5bb-411f-a4de-c4d6ba02a5fa"
                    }
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "FortigateConfigAdd"
                }
              ],
              "description": "",
              "message_list": [],
              "uuid": "c17d0881-f3f3-476f-b538-9a6b08ec240b",
              "state": "ACTIVE",
              "variable_list": [],
              "main_task_local_reference": {
                "kind": "app_task",
                "name": "f6e26c73_dag",
                "uuid": "d59a9f00-6617-43e7-8ee6-e3e3acb4a49b"
              },
              "name": "59692b6a_runbook"
            },
            "type": "",
            "upgrade_runbook": {},
            "uninstall_runbook": {
              "task_definition_list": [
                {
                  "target_any_local_reference": {
                    "kind": "app_package",
                    "name": "Package1",
                    "uuid": "9cb5f39d-26e8-4eef-9edc-a39bc9f7dc0c"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "DAG",
                  "uuid": "4a7180c9-7bbc-4dd5-9780-2c909f504f8d",
                  "child_tasks_local_reference_list": [
                    {
                      "kind": "app_task",
                      "name": "AwxDeleteHost",
                      "uuid": "659c9f68-5c8f-4c66-8d95-ef4b9c03d5d9"
                    },
                    {
                      "kind": "app_task",
                      "name": "FortigateConfigRemove",
                      "uuid": "3535f386-84be-4e73-972e-28d1ef92b38e"
                    },
                    {
                      "kind": "app_task",
                      "name": "CloseJiraTicket",
                      "uuid": "16ef7d99-d3d0-4905-b8c2-fcfbf6e5c6d9"
                    }
                  ],
                  "state": "ACTIVE",
                  "attrs": {
                    "edges": [
                      "@{from_task_reference=; edge_type=user_defined; type=; uuid=ae498e97-5bd3-4092-9883-e7416c5c7fea; to_task_reference=}",
                      "@{from_task_reference=; edge_type=user_defined; type=; uuid=033632b6-ee95-44b8-b292-c19bf4367045; to_task_reference=}"
                    ],
                    "type": ""
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "2c6de7db_dag"
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7",
                    "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "EXEC",
                  "uuid": "659c9f68-5c8f-4c66-8d95-ef4b9c03d5d9",
                  "child_tasks_local_reference_list": [],
                  "state": "ACTIVE",
                  "attrs": {
                    "script_type": "static",
                    "type": "",
                    "command_line_args": "",
                    "exit_status": [],
                    "script": "# region headers\n# escript-template v20190605 / stephane.bourdeaud@nutanix.com\n# * author:     jose.gomez@nutanix.com\n# * version:    20200214\n# task_type:    Execute\n# task_name:    AwxDeleteHost\n# description:  Delete host from AWX inventory \n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\nawx_username = '@@{awx.username}@@'\nawx_password = '@@{awx.secret}@@'\nawx_api = '@@{awx_ip}@@'\nhost_id = int('@@{awx_host_id}@@')\n# endregion\n\n# region functions\ndef make_api_call(url,method,username,username_secret):\n    \"\"\"Makes an API call to an external API.\n\n    Args:\n        url: The URL for the external REST API endpoint.\n        method: The REST method to use.\n        username: The API user name.\n        username_secret: The API user name password.\n        payload: The JSON payload to include in the call.\n    \n    Returns:\n        The API response.\n    \"\"\"\n    headers = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n    }\n    while True:\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            headers=headers,\n            verify=False\n        )\n\n        # deal with the result/response\n        if resp.ok: \n            exit(0)\n\n        else:\n            print \"Luis\"\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(\n                json.dumps(\n                    json.loads(resp.content), \n                    indent=4)))\n            exit(1)\n\ndef awx_delete_host(api,username,password,host_id):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"80\"\n    api_endpoint = \"/api/v2/hosts/\"\n    url = \"http://{}:{}{}{}\".format(\n        api,\n        api_port,\n        api_endpoint,\n        host_id\n    )\n    method = \"DELETE\"\n\n    # endregion\n\n    r = make_api_call(\n        url,\n        method,\n        username,\n        password\n        )\n\n    if r.ok:\n        resp = json.loads(r.content)\n        print 'Host with id {0} removed from inventory'.format(host_id)\n        print \"Here\"\n        exit(0)\n    else:\n        print 'Post request failed', r.content\n        print \"There\"\n        exit(1)\n# endregion\n        \nawx_delete_host(awx_api,awx_username,awx_password,host_id)"
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "AwxDeleteHost"
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7",
                    "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "CALL_RUNBOOK",
                  "uuid": "3535f386-84be-4e73-972e-28d1ef92b38e",
                  "child_tasks_local_reference_list": [],
                  "state": "ACTIVE",
                  "attrs": {
                    "inarg_list": [],
                    "type": "CALL_RUNBOOK",
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "bb908a06_runbook",
                      "uuid": "e00e10e7-4495-49ec-93fc-fc9211e25d31"
                    }
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "FortigateConfigRemove"
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7",
                    "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "EXEC",
                  "uuid": "16ef7d99-d3d0-4905-b8c2-fcfbf6e5c6d9",
                  "child_tasks_local_reference_list": [],
                  "state": "ACTIVE",
                  "attrs": {
                    "script_type": "static",
                    "type": "",
                    "command_line_args": "",
                    "exit_status": [],
                    "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraUpdateTicket\n# description:  updating the ticket status with the provided payload\n# input vars:   transition_id, ticket_name\n# output vars:  none\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\ntransition_id = 41 # 31 = in progress / 41 = Done\nticket_name = \"@@{jira_child_ticket}@@\" # ticket that need to be updated\n# endregion\nif int(\"@@{calm_array_index}@@\") != 0:\n    exit(0)\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/api/3/issue/\" + ticket_name + \"/transitions\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\nupdate_payload = {\n    \"transition\": {\n    \"id\": transition_id\n  }\n    \n}\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, params=json.dumps(update_payload),\\\n              auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n              verify=False\n             )\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful. Status code: {}\".format(resp.status_code))    \n    \nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion"
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "CloseJiraTicket"
                }
              ],
              "description": "",
              "message_list": [],
              "uuid": "4eec1bbb-2b3a-4f92-b737-c3b28d4bc8a0",
              "state": "ACTIVE",
              "variable_list": [],
              "main_task_local_reference": {
                "kind": "app_task",
                "name": "2c6de7db_dag",
                "uuid": "4a7180c9-7bbc-4dd5-9780-2c909f504f8d"
              },
              "name": "d1b88acb_runbook"
            }
          },
          "variable_list": [],
          "name": "Package1"
        },
        {
          "description": "",
          "action_list": [
            {
              "description": "System action for installing an application",
              "message_list": [],
              "uuid": "a532cf41-80fc-4ed7-8245-908ef65904db",
              "name": "action_install",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package2",
                      "uuid": "f0b4e5fa-8d41-4d66-aeaa-eb49167edb1a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "305a2f06-1fbc-4cac-bd90-a8f95c4e669e",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Install_Crb_f0b4e5fa_8d41_4d66_aeaa_eb49167edb1a; uuid=63624414-6410-4e6e-a872-a55030a75666}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package2",
                      "uuid": "f0b4e5fa-8d41-4d66-aeaa-eb49167edb1a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CUSTOM_PACKAGE_INSTALL",
                    "uuid": "63624414-6410-4e6e-a872-a55030a75666",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "install_runbook": "@{task_definition_list=System.Object[]; description=; message_list=System.Object[]; uuid=56bde1ba-ebf4-48cf-9d2c-5afe3df8bfc9; state=ACTIVE; variable_list=System.Object[]; main_task_local_reference=; name=0ee41ef2_runbook}",
                      "type": "",
                      "upgrade_runbook": "",
                      "uninstall_runbook": "@{task_definition_list=System.Object[]; description=; message_list=System.Object[]; uuid=864a16b5-a7c4-42f0-b429-f60504764cd6; state=ACTIVE; variable_list=System.Object[]; main_task_local_reference=; name=d4d60476_runbook}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Install_Crb_f0b4e5fa_8d41_4d66_aeaa_eb49167edb1a"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "bf7310e0-29b9-458f-a9c8-788577400e75",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea",
                  "uuid": "305a2f06-1fbc-4cac-bd90-a8f95c4e669e"
                },
                "name": "SYS_GEN__Runbook_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
              }
            },
            {
              "description": "System action for creating an application",
              "message_list": [],
              "uuid": "0c9571b3-8f64-44b7-a014-9fe58991bf08",
              "name": "action_create",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package2",
                      "uuid": "f0b4e5fa-8d41-4d66-aeaa-eb49167edb1a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "2f56c32b-3910-418d-8689-52d97a256290",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__install_CRb_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea; uuid=03a25c76-31df-4f44-8b33-c30c25037d2b}",
                      "@{kind=app_task; name=SYS_GEN__create_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=cf9c6591-4fa6-4d27-8b62-1e9a7127b335}",
                      "@{kind=app_task; name=SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=fbe8a7e3-4cba-420a-a4e2-59adb886eec4}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": " ",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package2",
                      "uuid": "f0b4e5fa-8d41-4d66-aeaa-eb49167edb1a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "03a25c76-31df-4f44-8b33-c30c25037d2b",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea; uuid=bf7310e0-29b9-458f-a9c8-788577400e75}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__install_CRb_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "cf9c6591-4fa6-4d27-8b62-1e9a7127b335",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=f0d6aa56_runbook; uuid=6f03436d-c46f-42c1-838f-3ef00b072f23}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__create_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "fbe8a7e3-4cba-420a-a4e2-59adb886eec4",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=efba402c_runbook; uuid=d0e1b19c-af6c-419d-87be-27afa329e778}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "a492bf5e-efc1-4b00-846d-ec889bd4967a",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea",
                  "uuid": "2f56c32b-3910-418d-8689-52d97a256290"
                },
                "name": "SYS_GEN__Runbook_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
              }
            },
            {
              "description": "System action for uninstalling an application",
              "message_list": [],
              "uuid": "18a1ed34-d42f-44f0-a40b-d341e201dfbb",
              "name": "action_uninstall",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package2",
                      "uuid": "f0b4e5fa-8d41-4d66-aeaa-eb49167edb1a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "e0af9b70-3b71-42f6-9e49-bad57bd37abd",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Uninstall_Crb_f0b4e5fa_8d41_4d66_aeaa_eb49167edb1a; uuid=83dc1092-301e-4523-adf0-f5f25f605fca}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package2",
                      "uuid": "f0b4e5fa-8d41-4d66-aeaa-eb49167edb1a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CUSTOM_PACKAGE_UNINSTALL",
                    "uuid": "83dc1092-301e-4523-adf0-f5f25f605fca",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "install_runbook": "@{task_definition_list=System.Object[]; description=; message_list=System.Object[]; uuid=56bde1ba-ebf4-48cf-9d2c-5afe3df8bfc9; state=ACTIVE; variable_list=System.Object[]; main_task_local_reference=; name=0ee41ef2_runbook}",
                      "type": "",
                      "upgrade_runbook": "",
                      "uninstall_runbook": "@{task_definition_list=System.Object[]; description=; message_list=System.Object[]; uuid=864a16b5-a7c4-42f0-b429-f60504764cd6; state=ACTIVE; variable_list=System.Object[]; main_task_local_reference=; name=d4d60476_runbook}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Uninstall_Crb_f0b4e5fa_8d41_4d66_aeaa_eb49167edb1a"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "1846f411-4a15-4dbe-9fcc-3e673539b660",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea",
                  "uuid": "e0af9b70-3b71-42f6-9e49-bad57bd37abd"
                },
                "name": "SYS_GEN__Runbook_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
              }
            },
            {
              "description": "System action for deleting an application. Deletes created VMs as well",
              "message_list": [],
              "uuid": "b5128884-5bfe-4626-9e9a-d12dd37d84c9",
              "name": "action_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package2",
                      "uuid": "f0b4e5fa-8d41-4d66-aeaa-eb49167edb1a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "b12d672d-fcc6-48f5-a850-40ea245ec8ec",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=59bc0687-94bb-4136-ad78-f4d124bc88aa}",
                      "@{kind=app_task; name=SYS_GEN__delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=ca0afd24-7cbb-4851-bafc-672cf9cf3f69}",
                      "@{kind=app_task; name=SYS_GEN__uninstall_CRb_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea; uuid=f34461b6-8f16-4bff-809b-49a0a5f5ca30}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": " ",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "59bc0687-94bb-4136-ad78-f4d124bc88aa",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=53c0046c_runbook; uuid=67c4c206-3937-41c5-b191-4e4840ae55a5}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "ca0afd24-7cbb-4851-bafc-672cf9cf3f69",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=df173f1e_runbook; uuid=5a750d31-8cd9-402f-b4b1-50af0ec1536a}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package2",
                      "uuid": "f0b4e5fa-8d41-4d66-aeaa-eb49167edb1a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "f34461b6-8f16-4bff-809b-49a0a5f5ca30",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea; uuid=1846f411-4a15-4dbe-9fcc-3e673539b660}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__uninstall_CRb_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "f24804a3-75cf-4634-868e-8279eab43cc8",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea",
                  "uuid": "b12d672d-fcc6-48f5-a850-40ea245ec8ec"
                },
                "name": "SYS_GEN__Runbook_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
              }
            },
            {
              "description": "System action for deleting an application. Does not delete created VMs",
              "message_list": [],
              "uuid": "732284b8-4c9a-4142-8f65-e74718298812",
              "name": "action_soft_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package2",
                      "uuid": "f0b4e5fa-8d41-4d66-aeaa-eb49167edb1a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "e17843c5-b2a1-48c0-8564-41c105d8c48d",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__soft_delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=6263f614-787e-46f0-8792-1356c4fbaeea}",
                      "@{kind=app_task; name=SYS_GEN__Package_Element_Delete_0eea5d91_b5b2_42f7_9cdc_be0408c636ea; uuid=0894019f-9d96-4a78-8948-875b980dadb1}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "6263f614-787e-46f0-8792-1356c4fbaeea",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=d7d4619f-b55d-4d78-8c54-618b787f4bec}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__soft_delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package2",
                      "uuid": "f0b4e5fa-8d41-4d66-aeaa-eb49167edb1a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SOFT_DELETE_ELEMENT",
                    "uuid": "0894019f-9d96-4a78-8948-875b980dadb1",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Package_Element_Delete_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "f03ef4c9-696e-43d8-9836-f9f9d530ab69",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea",
                  "uuid": "e17843c5-b2a1-48c0-8564-41c105d8c48d"
                },
                "name": "SYS_GEN__Runbook_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
              }
            },
            {
              "description": "System action for starting an application",
              "message_list": [],
              "uuid": "d5fca728-806d-4080-8df2-2e59029a00ec",
              "name": "action_start",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package2",
                      "uuid": "f0b4e5fa-8d41-4d66-aeaa-eb49167edb1a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "bb72713a-6c85-4b44-ab78-7147c54135c9",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=bb78fc2d-dcaf-4574-a23c-910eee19f0b4}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "bb78fc2d-dcaf-4574-a23c-910eee19f0b4",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=efba402c_runbook; uuid=d0e1b19c-af6c-419d-87be-27afa329e778}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "5e947c3d-4b87-442f-af17-c3173a02f080",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea",
                  "uuid": "bb72713a-6c85-4b44-ab78-7147c54135c9"
                },
                "name": "SYS_GEN__Runbook_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
              }
            },
            {
              "description": "System action for restarting an application",
              "message_list": [],
              "uuid": "bac80845-9921-40ea-ab97-ac0f6557d266",
              "name": "action_restart",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package2",
                      "uuid": "f0b4e5fa-8d41-4d66-aeaa-eb49167edb1a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "f4afd303-d303-4aaa-b016-f067bf2a3b7c",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__restart_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=20321b3b-4fd5-49c1-b364-0caecb980e7f}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "20321b3b-4fd5-49c1-b364-0caecb980e7f",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=b25bb7e8_runbook; uuid=6c48900b-c924-48f6-b946-2c26e51be9c0}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__restart_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "1f73dac1-cd71-45dd-838e-221ccd71f37a",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea",
                  "uuid": "f4afd303-d303-4aaa-b016-f067bf2a3b7c"
                },
                "name": "SYS_GEN__Runbook_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
              }
            },
            {
              "description": "System action for stopping an application",
              "message_list": [],
              "uuid": "b1fe5e74-2cda-4a4c-b870-77034cd936d9",
              "name": "action_stop",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package2",
                      "uuid": "f0b4e5fa-8d41-4d66-aeaa-eb49167edb1a"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "67fdb6ff-13f6-43b2-bfb7-92dfa9b2b1b4",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=bbd6392e-3426-4e3f-a3fd-de79a9e7f42d}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "bbd6392e-3426-4e3f-a3fd-de79a9e7f42d",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=53c0046c_runbook; uuid=67c4c206-3937-41c5-b191-4e4840ae55a5}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "ea10b665-5822-451d-a2b0-a41879cc38ed",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea",
                  "uuid": "67fdb6ff-13f6-43b2-bfb7-92dfa9b2b1b4"
                },
                "name": "SYS_GEN__Runbook_Package_0eea5d91_b5b2_42f7_9cdc_be0408c636ea"
              }
            }
          ],
          "message_list": [],
          "service_local_reference_list": [
            {
              "kind": "app_service",
              "name": "CentOS7",
              "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
            }
          ],
          "uuid": "f0b4e5fa-8d41-4d66-aeaa-eb49167edb1a",
          "state": "ACTIVE",
          "version": "",
          "editables": {},
          "type": "DEB",
          "options": {
            "install_runbook": {
              "task_definition_list": [
                {
                  "target_any_local_reference": {
                    "kind": "app_package",
                    "name": "Package2",
                    "uuid": "f0b4e5fa-8d41-4d66-aeaa-eb49167edb1a"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "DAG",
                  "uuid": "423ced32-eeb1-448e-94ed-55c7f6072683",
                  "child_tasks_local_reference_list": [],
                  "state": "ACTIVE",
                  "attrs": {
                    "edges": [],
                    "type": ""
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "fb7cb95f_dag"
                }
              ],
              "description": "",
              "message_list": [],
              "uuid": "56bde1ba-ebf4-48cf-9d2c-5afe3df8bfc9",
              "state": "ACTIVE",
              "variable_list": [],
              "main_task_local_reference": {
                "kind": "app_task",
                "name": "fb7cb95f_dag",
                "uuid": "423ced32-eeb1-448e-94ed-55c7f6072683"
              },
              "name": "0ee41ef2_runbook"
            },
            "type": "",
            "upgrade_runbook": {},
            "uninstall_runbook": {
              "task_definition_list": [
                {
                  "target_any_local_reference": {
                    "kind": "app_package",
                    "name": "Package2",
                    "uuid": "f0b4e5fa-8d41-4d66-aeaa-eb49167edb1a"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "DAG",
                  "uuid": "a11cfd2f-b8ec-432a-beff-69e4b46eace5",
                  "child_tasks_local_reference_list": [],
                  "state": "ACTIVE",
                  "attrs": {
                    "edges": [],
                    "type": ""
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "246b9a1a_dag"
                }
              ],
              "description": "",
              "message_list": [],
              "uuid": "864a16b5-a7c4-42f0-b429-f60504764cd6",
              "state": "ACTIVE",
              "variable_list": [],
              "main_task_local_reference": {
                "kind": "app_task",
                "name": "246b9a1a_dag",
                "uuid": "a11cfd2f-b8ec-432a-beff-69e4b46eace5"
              },
              "name": "d4d60476_runbook"
            }
          },
          "variable_list": [],
          "name": "Package2"
        },
        {
          "description": "",
          "action_list": [
            {
              "description": "System action for installing an application",
              "message_list": [],
              "uuid": "81bbf5ad-250e-40b1-8f53-18679f19c56c",
              "name": "action_install",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1_cloned_0",
                      "uuid": "5c071c1c-0d37-4e30-a4d7-1114e8ca78b0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "1e240de3-37db-4faf-a225-0efbd86a2d79",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Install_Crb_5c071c1c_0d37_4e30_a4d7_1114e8ca78b0; uuid=0434576a-649e-4a60-a026-d2a839401eae}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Package_d9af0a93_735a_49f3_943b_212b65058a40"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1_cloned_0",
                      "uuid": "5c071c1c-0d37-4e30-a4d7-1114e8ca78b0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CUSTOM_PACKAGE_INSTALL",
                    "uuid": "0434576a-649e-4a60-a026-d2a839401eae",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "install_runbook": "@{task_definition_list=System.Object[]; description=; message_list=System.Object[]; uuid=cf630ea0-9f04-4aea-b1ac-06c6bb9bdfa0; state=ACTIVE; variable_list=System.Object[]; main_task_local_reference=; name=59692b6a_runbook_cloned_0}",
                      "type": "",
                      "upgrade_runbook": "",
                      "uninstall_runbook": "@{task_definition_list=System.Object[]; description=; message_list=System.Object[]; uuid=fd6edc77-88a2-4358-8f89-1f0dec9e517a; state=ACTIVE; variable_list=System.Object[]; main_task_local_reference=; name=d1b88acb_runbook_cloned_0}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Install_Crb_5c071c1c_0d37_4e30_a4d7_1114e8ca78b0"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "fa4cda28-2628-497e-b25a-8eb25bebe540",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Package_d9af0a93_735a_49f3_943b_212b65058a40",
                  "uuid": "1e240de3-37db-4faf-a225-0efbd86a2d79"
                },
                "name": "SYS_GEN__Runbook_Package_d9af0a93_735a_49f3_943b_212b65058a40"
              }
            },
            {
              "description": "System action for creating an application",
              "message_list": [],
              "uuid": "b0d383cb-ec0c-4354-955f-44bf89fdf96f",
              "name": "action_create",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1_cloned_0",
                      "uuid": "5c071c1c-0d37-4e30-a4d7-1114e8ca78b0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "681b5ee0-074b-4320-b511-e3d98c5cb877",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__install_CRb_Package_d9af0a93_735a_49f3_943b_212b65058a40; uuid=e5820755-ef38-4060-91df-a8eb6141e4b0}",
                      "@{kind=app_task; name=SYS_GEN__create_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=783b6b52-4f66-4214-8dde-7582382800bc}",
                      "@{kind=app_task; name=SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=4765319c-3f50-4957-92f2-f339498c7684}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": " ",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Package_d9af0a93_735a_49f3_943b_212b65058a40"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1_cloned_0",
                      "uuid": "5c071c1c-0d37-4e30-a4d7-1114e8ca78b0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "e5820755-ef38-4060-91df-a8eb6141e4b0",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Package_d9af0a93_735a_49f3_943b_212b65058a40; uuid=fa4cda28-2628-497e-b25a-8eb25bebe540}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__install_CRb_Package_d9af0a93_735a_49f3_943b_212b65058a40"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "783b6b52-4f66-4214-8dde-7582382800bc",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=f0d6aa56_runbook; uuid=6f03436d-c46f-42c1-838f-3ef00b072f23}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__create_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "4765319c-3f50-4957-92f2-f339498c7684",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=efba402c_runbook; uuid=d0e1b19c-af6c-419d-87be-27afa329e778}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "a7456eb8-37e3-4019-8626-99a2c6109657",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Package_d9af0a93_735a_49f3_943b_212b65058a40",
                  "uuid": "681b5ee0-074b-4320-b511-e3d98c5cb877"
                },
                "name": "SYS_GEN__Runbook_Package_d9af0a93_735a_49f3_943b_212b65058a40"
              }
            },
            {
              "description": "System action for uninstalling an application",
              "message_list": [],
              "uuid": "ed887957-d2b4-4fda-af26-aba6fde5c5b7",
              "name": "action_uninstall",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1_cloned_0",
                      "uuid": "5c071c1c-0d37-4e30-a4d7-1114e8ca78b0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "19020643-5f54-4ede-9e37-a82012f08a10",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__Uninstall_Crb_5c071c1c_0d37_4e30_a4d7_1114e8ca78b0; uuid=055e3259-fca5-4e5d-966a-96f518572c8d}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__DAG_Package_d9af0a93_735a_49f3_943b_212b65058a40"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1_cloned_0",
                      "uuid": "5c071c1c-0d37-4e30-a4d7-1114e8ca78b0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CUSTOM_PACKAGE_UNINSTALL",
                    "uuid": "055e3259-fca5-4e5d-966a-96f518572c8d",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "install_runbook": "@{task_definition_list=System.Object[]; description=; message_list=System.Object[]; uuid=cf630ea0-9f04-4aea-b1ac-06c6bb9bdfa0; state=ACTIVE; variable_list=System.Object[]; main_task_local_reference=; name=59692b6a_runbook_cloned_0}",
                      "type": "",
                      "upgrade_runbook": "",
                      "uninstall_runbook": "@{task_definition_list=System.Object[]; description=; message_list=System.Object[]; uuid=fd6edc77-88a2-4358-8f89-1f0dec9e517a; state=ACTIVE; variable_list=System.Object[]; main_task_local_reference=; name=d1b88acb_runbook_cloned_0}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Uninstall_Crb_5c071c1c_0d37_4e30_a4d7_1114e8ca78b0"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "84c56806-03f8-428a-8317-8af6f7df4f9c",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__DAG_Package_d9af0a93_735a_49f3_943b_212b65058a40",
                  "uuid": "19020643-5f54-4ede-9e37-a82012f08a10"
                },
                "name": "SYS_GEN__Runbook_Package_d9af0a93_735a_49f3_943b_212b65058a40"
              }
            },
            {
              "description": "System action for deleting an application. Deletes created VMs as well",
              "message_list": [],
              "uuid": "6d09cacd-e494-46af-88db-a61c9998b685",
              "name": "action_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1_cloned_0",
                      "uuid": "5c071c1c-0d37-4e30-a4d7-1114e8ca78b0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "3a44cc03-b092-45cf-956a-ece5993e53c8",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=393d9d25-ab8d-4a93-ac26-b6105f18161e}",
                      "@{kind=app_task; name=SYS_GEN__delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=bbb89398-e6a0-496f-96e5-aa44f3698ad2}",
                      "@{kind=app_task; name=SYS_GEN__uninstall_CRb_Package_d9af0a93_735a_49f3_943b_212b65058a40; uuid=78e7b9c3-0247-4b54-95a8-555a761a0852}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": " ",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Package_d9af0a93_735a_49f3_943b_212b65058a40"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "393d9d25-ab8d-4a93-ac26-b6105f18161e",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=53c0046c_runbook; uuid=67c4c206-3937-41c5-b191-4e4840ae55a5}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "bbb89398-e6a0-496f-96e5-aa44f3698ad2",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=df173f1e_runbook; uuid=5a750d31-8cd9-402f-b4b1-50af0ec1536a}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1_cloned_0",
                      "uuid": "5c071c1c-0d37-4e30-a4d7-1114e8ca78b0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "78e7b9c3-0247-4b54-95a8-555a761a0852",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Package_d9af0a93_735a_49f3_943b_212b65058a40; uuid=84c56806-03f8-428a-8317-8af6f7df4f9c}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__uninstall_CRb_Package_d9af0a93_735a_49f3_943b_212b65058a40"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "25007815-1e1a-4447-814d-567616a87a54",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Package_d9af0a93_735a_49f3_943b_212b65058a40",
                  "uuid": "3a44cc03-b092-45cf-956a-ece5993e53c8"
                },
                "name": "SYS_GEN__Runbook_Package_d9af0a93_735a_49f3_943b_212b65058a40"
              }
            },
            {
              "description": "System action for deleting an application. Does not delete created VMs",
              "message_list": [],
              "uuid": "b3e62be1-5422-4ce2-827f-c5c625b78064",
              "name": "action_soft_delete",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1_cloned_0",
                      "uuid": "5c071c1c-0d37-4e30-a4d7-1114e8ca78b0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "78c8c417-7855-4731-a118-5a048b323e62",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__soft_delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=043690d2-03a8-44cf-bdf9-c24b83215617}",
                      "@{kind=app_task; name=SYS_GEN__Package_Element_Delete_d9af0a93_735a_49f3_943b_212b65058a40; uuid=c9f5f724-67d3-4717-b983-5f5db2599633}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Package_d9af0a93_735a_49f3_943b_212b65058a40"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "043690d2-03a8-44cf-bdf9-c24b83215617",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=SYS_GEN__Runbook_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=d7d4619f-b55d-4d78-8c54-618b787f4bec}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__soft_delete_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1_cloned_0",
                      "uuid": "5c071c1c-0d37-4e30-a4d7-1114e8ca78b0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "SOFT_DELETE_ELEMENT",
                    "uuid": "c9f5f724-67d3-4717-b983-5f5db2599633",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Package_Element_Delete_d9af0a93_735a_49f3_943b_212b65058a40"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "82889c2e-58c3-427f-97fd-7bd4eab3e4d6",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Package_d9af0a93_735a_49f3_943b_212b65058a40",
                  "uuid": "78c8c417-7855-4731-a118-5a048b323e62"
                },
                "name": "SYS_GEN__Runbook_Package_d9af0a93_735a_49f3_943b_212b65058a40"
              }
            },
            {
              "description": "System action for starting an application",
              "message_list": [],
              "uuid": "7c4b08cf-1834-4af9-bafd-09bf67ca9130",
              "name": "action_start",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1_cloned_0",
                      "uuid": "5c071c1c-0d37-4e30-a4d7-1114e8ca78b0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "6ffece57-5f55-4ff0-a1a0-72b559b5477d",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=02965d7c-0a13-4f78-9a00-3c8fa15445cd}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Package_d9af0a93_735a_49f3_943b_212b65058a40"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "02965d7c-0a13-4f78-9a00-3c8fa15445cd",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=efba402c_runbook; uuid=d0e1b19c-af6c-419d-87be-27afa329e778}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__start_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "8e3acae3-ea32-4d08-b966-4d4613e856be",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Package_d9af0a93_735a_49f3_943b_212b65058a40",
                  "uuid": "6ffece57-5f55-4ff0-a1a0-72b559b5477d"
                },
                "name": "SYS_GEN__Runbook_Package_d9af0a93_735a_49f3_943b_212b65058a40"
              }
            },
            {
              "description": "System action for restarting an application",
              "message_list": [],
              "uuid": "d1b3a302-47c2-4e0e-b923-813661bec6b4",
              "name": "action_restart",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1_cloned_0",
                      "uuid": "5c071c1c-0d37-4e30-a4d7-1114e8ca78b0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "b5c970c2-50b2-48a2-bd31-3e0646499ccc",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__restart_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=68f63931-8071-436a-85c8-305ea0981e3e}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Package_d9af0a93_735a_49f3_943b_212b65058a40"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "68f63931-8071-436a-85c8-305ea0981e3e",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=b25bb7e8_runbook; uuid=6c48900b-c924-48f6-b946-2c26e51be9c0}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__restart_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "382e4e9d-a26d-4a1b-b417-c2ca3bb541ae",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Package_d9af0a93_735a_49f3_943b_212b65058a40",
                  "uuid": "b5c970c2-50b2-48a2-bd31-3e0646499ccc"
                },
                "name": "SYS_GEN__Runbook_Package_d9af0a93_735a_49f3_943b_212b65058a40"
              }
            },
            {
              "description": "System action for stopping an application",
              "message_list": [],
              "uuid": "222ce04b-4c3a-4ec6-b76f-39cee047414b",
              "name": "action_stop",
              "state": "ACTIVE",
              "critical": false,
              "attrs": {},
              "type": "system",
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_package",
                      "name": "Package1_cloned_0",
                      "uuid": "5c071c1c-0d37-4e30-a4d7-1114e8ca78b0"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "DAG",
                    "uuid": "9a8cbe38-593c-414f-9dc2-dcd1dd0889cc",
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1; uuid=c5847dd4-1837-45be-89b2-f36dd15cdfb7}"
                    ],
                    "state": "ACTIVE",
                    "attrs": {
                      "edges": "",
                      "type": "DAG"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__Composite_DAG_Package_d9af0a93_735a_49f3_943b_212b65058a40"
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7",
                      "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                    },
                    "retries": "0",
                    "description": "",
                    "type": "CALL_RUNBOOK",
                    "uuid": "c5847dd4-1837-45be-89b2-f36dd15cdfb7",
                    "child_tasks_local_reference_list": [],
                    "state": "ACTIVE",
                    "attrs": {
                      "inarg_list": "",
                      "type": "CALL_RUNBOOK",
                      "runbook_reference": "@{kind=app_runbook; name=53c0046c_runbook; uuid=67c4c206-3937-41c5-b191-4e4840ae55a5}"
                    },
                    "timeout_secs": "0",
                    "inherit_target": false,
                    "message_list": [],
                    "variable_list": [],
                    "name": "SYS_GEN__stop_CRb_Service_7056c1c9_1817_4405_8fb9_6a190f7052b1"
                  }
                ],
                "description": "",
                "message_list": [],
                "uuid": "5e88787a-b8ed-42e1-acec-a7b8a22e8a68",
                "state": "ACTIVE",
                "variable_list": [],
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "SYS_GEN__Composite_DAG_Package_d9af0a93_735a_49f3_943b_212b65058a40",
                  "uuid": "9a8cbe38-593c-414f-9dc2-dcd1dd0889cc"
                },
                "name": "SYS_GEN__Runbook_Package_d9af0a93_735a_49f3_943b_212b65058a40"
              }
            }
          ],
          "message_list": [],
          "service_local_reference_list": [
            {
              "kind": "app_service",
              "name": "CentOS7",
              "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
            }
          ],
          "uuid": "5c071c1c-0d37-4e30-a4d7-1114e8ca78b0",
          "state": "ACTIVE",
          "version": "",
          "editables": {},
          "type": "DEB",
          "options": {
            "install_runbook": {
              "task_definition_list": [
                {
                  "target_any_local_reference": {
                    "kind": "app_package",
                    "name": "Package1_cloned_0",
                    "uuid": "5c071c1c-0d37-4e30-a4d7-1114e8ca78b0"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "DAG",
                  "uuid": "5cbee80d-e8b4-46ef-9df6-e89005a3c51d",
                  "child_tasks_local_reference_list": [
                    {
                      "kind": "app_task",
                      "name": "AnsibleDeployment",
                      "uuid": "2c47b532-83b3-4c53-bdd8-050822646c02"
                    },
                    {
                      "kind": "app_task",
                      "name": "VcAddFolder",
                      "uuid": "8f8f9628-5b5c-45db-b42c-3f7d77fa628a"
                    },
                    {
                      "kind": "app_task",
                      "name": "VcAddTag",
                      "uuid": "3aec2329-50c0-48bb-b30d-a7d7a4373fe0"
                    },
                    {
                      "kind": "app_task",
                      "name": "VcAddDrsRules",
                      "uuid": "be1ec44e-1c2d-43cf-9cab-5617da91e8e6"
                    },
                    {
                      "kind": "app_task",
                      "name": "FortigateConfigAdd",
                      "uuid": "bb02d845-849a-477f-87d6-cdf86f003508"
                    },
                    {
                      "kind": "app_task",
                      "name": "VeeamCreateJob",
                      "uuid": "403387f7-b512-441a-b28d-400a5efff123"
                    }
                  ],
                  "state": "ACTIVE",
                  "attrs": {
                    "edges": [
                      "@{from_task_reference=; edge_type=user_defined; type=; uuid=425aa83e-6408-537b-bec5-b208aacc4ae1; to_task_reference=}",
                      "@{from_task_reference=; edge_type=user_defined; type=; uuid=388706e8-72cc-0747-e6d1-dc5d49d97571; to_task_reference=}",
                      "@{from_task_reference=; edge_type=user_defined; type=; uuid=897e0b59-a781-b07b-7f13-afb474128994; to_task_reference=}",
                      "@{from_task_reference=; edge_type=user_defined; type=; uuid=962fbc5e-5a21-fbe1-5ec5-6fd540633889; to_task_reference=}",
                      "@{from_task_reference=; edge_type=user_defined; type=; uuid=ccc04ff0-5ae1-2a66-541b-c81070c67566; to_task_reference=}"
                    ],
                    "type": ""
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "f6e26c73_dag_cloned_1"
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7",
                    "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "CALL_RUNBOOK",
                  "uuid": "2c47b532-83b3-4c53-bdd8-050822646c02",
                  "child_tasks_local_reference_list": [],
                  "state": "ACTIVE",
                  "attrs": {
                    "inarg_list": [],
                    "type": "CALL_RUNBOOK",
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "bf14dde8_runbook",
                      "uuid": "5d5c4127-f6ee-4674-81fc-d96c434783fe"
                    }
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "AnsibleDeployment"
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7",
                    "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "CALL_RUNBOOK",
                  "uuid": "8f8f9628-5b5c-45db-b42c-3f7d77fa628a",
                  "child_tasks_local_reference_list": [],
                  "state": "ACTIVE",
                  "attrs": {
                    "inarg_list": [],
                    "type": "CALL_RUNBOOK",
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "90dbfa0f_runbook",
                      "uuid": "cabdfc53-6fc2-492c-9006-1fd6ff49fb03"
                    }
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "VcAddFolder"
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7",
                    "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "CALL_RUNBOOK",
                  "uuid": "3aec2329-50c0-48bb-b30d-a7d7a4373fe0",
                  "child_tasks_local_reference_list": [],
                  "state": "ACTIVE",
                  "attrs": {
                    "inarg_list": [],
                    "type": "CALL_RUNBOOK",
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "3dcfda7d_runbook",
                      "uuid": "1276856a-6bd3-4732-a077-7a214aa79723"
                    }
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "VcAddTag"
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7",
                    "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "CALL_RUNBOOK",
                  "uuid": "be1ec44e-1c2d-43cf-9cab-5617da91e8e6",
                  "child_tasks_local_reference_list": [],
                  "state": "ACTIVE",
                  "attrs": {
                    "inarg_list": [],
                    "type": "CALL_RUNBOOK",
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "895cec1a_runbook",
                      "uuid": "acb3f650-9ccd-4171-8708-09d8dd81cc71"
                    }
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "VcAddDrsRules"
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7",
                    "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "CALL_RUNBOOK",
                  "uuid": "bb02d845-849a-477f-87d6-cdf86f003508",
                  "child_tasks_local_reference_list": [],
                  "state": "ACTIVE",
                  "attrs": {
                    "inarg_list": [],
                    "type": "CALL_RUNBOOK",
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "141bd772_runbook",
                      "uuid": "0807d9ca-e5bb-411f-a4de-c4d6ba02a5fa"
                    }
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "FortigateConfigAdd"
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7",
                    "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "CALL_RUNBOOK",
                  "uuid": "403387f7-b512-441a-b28d-400a5efff123",
                  "child_tasks_local_reference_list": [],
                  "state": "ACTIVE",
                  "attrs": {
                    "inarg_list": [],
                    "type": "CALL_RUNBOOK",
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "99b33415_runbook",
                      "uuid": "cbc9f1d0-0e10-47c4-aa0d-eef07b6a5b23"
                    }
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "VeeamCreateJob"
                }
              ],
              "description": "",
              "message_list": [],
              "uuid": "cf630ea0-9f04-4aea-b1ac-06c6bb9bdfa0",
              "state": "ACTIVE",
              "variable_list": [],
              "main_task_local_reference": {
                "kind": "app_task",
                "name": "f6e26c73_dag_cloned_1",
                "uuid": "5cbee80d-e8b4-46ef-9df6-e89005a3c51d"
              },
              "name": "59692b6a_runbook_cloned_0"
            },
            "type": "",
            "upgrade_runbook": {},
            "uninstall_runbook": {
              "task_definition_list": [
                {
                  "target_any_local_reference": {
                    "kind": "app_package",
                    "name": "Package1_cloned_0",
                    "uuid": "5c071c1c-0d37-4e30-a4d7-1114e8ca78b0"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "DAG",
                  "uuid": "1ed0336c-5144-42ad-8b13-45747189f585",
                  "child_tasks_local_reference_list": [
                    {
                      "kind": "app_task",
                      "name": "AwxDeleteHost",
                      "uuid": "445ed040-0ed2-4ad8-b886-4fef8d48bf45"
                    },
                    {
                      "kind": "app_task",
                      "name": "FortigateConfigRemove",
                      "uuid": "b5bd8fcb-5381-427b-8e2c-2f5aee5d0ca4"
                    },
                    {
                      "kind": "app_task",
                      "name": "VeaamDelJob",
                      "uuid": "1bb19514-7348-49f8-9fef-553b552c828d"
                    },
                    {
                      "kind": "app_task",
                      "name": "VcDelDrsRules",
                      "uuid": "6a83804b-07a8-4c78-93a2-c9c5c6b0a249"
                    },
                    {
                      "kind": "app_task",
                      "name": "VcDelTag",
                      "uuid": "36df1ddd-100a-4e82-853e-892f2200bd52"
                    },
                    {
                      "kind": "app_task",
                      "name": "VcDelFolder",
                      "uuid": "b057ddcf-131b-411b-a7f8-e5ea8075c010"
                    },
                    {
                      "kind": "app_task",
                      "name": "CloseJiraTicketEmpty",
                      "uuid": "b0302151-b5d2-4de7-9028-cd9b55e6f520"
                    }
                  ],
                  "state": "ACTIVE",
                  "attrs": {
                    "edges": [
                      "@{from_task_reference=; edge_type=user_defined; type=; uuid=41e3fa9c-8873-45ec-9ae0-537084665647; to_task_reference=}",
                      "@{from_task_reference=; edge_type=user_defined; type=; uuid=d76c6c26-0a3e-c47f-9a6f-915d0a0fa2b6; to_task_reference=}",
                      "@{from_task_reference=; edge_type=user_defined; type=; uuid=b3df132a-d544-849a-b8c3-d57359c05e85; to_task_reference=}",
                      "@{from_task_reference=; edge_type=user_defined; type=; uuid=043a6c51-7c95-a970-192a-48c1bfb78427; to_task_reference=}",
                      "@{from_task_reference=; edge_type=user_defined; type=; uuid=9af38c4e-c9e5-b1a7-844d-387ca56a43a7; to_task_reference=}",
                      "@{from_task_reference=; edge_type=user_defined; type=; uuid=aa9328ae-627b-dd9b-b346-5e37871dab9c; to_task_reference=}"
                    ],
                    "type": ""
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "2c6de7db_dag_cloned_1"
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7",
                    "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "EXEC",
                  "uuid": "445ed040-0ed2-4ad8-b886-4fef8d48bf45",
                  "child_tasks_local_reference_list": [],
                  "state": "ACTIVE",
                  "attrs": {
                    "script_type": "static",
                    "type": "",
                    "command_line_args": "",
                    "exit_status": [],
                    "script": "# region headers\n# escript-template v20190605 / stephane.bourdeaud@nutanix.com\n# * author:     jose.gomez@nutanix.com\n# * version:    20200214\n# task_type:    Execute\n# task_name:    AwxDeleteHost\n# description:  Delete host from AWX inventory \n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\nawx_username = '@@{awx.username}@@'\nawx_password = '@@{awx.secret}@@'\nawx_api = '@@{awx_ip}@@'\nhost_id = int('@@{awx_host_id}@@')\n# endregion\n\n# region functions\ndef make_api_call(url,method,username,username_secret):\n    \"\"\"Makes an API call to an external API.\n\n    Args:\n        url: The URL for the external REST API endpoint.\n        method: The REST method to use.\n        username: The API user name.\n        username_secret: The API user name password.\n        payload: The JSON payload to include in the call.\n    \n    Returns:\n        The API response.\n    \"\"\"\n    headers = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n    }\n    while True:\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            headers=headers,\n            verify=False\n        )\n\n        # deal with the result/response\n        if resp.ok: \n            exit(0)\n\n        else:\n            print \"Luis\"\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(\n                json.dumps(\n                    json.loads(resp.content), \n                    indent=4)))\n            exit(1)\n\ndef awx_delete_host(api,username,password,host_id):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"80\"\n    api_endpoint = \"/api/v2/hosts/\"\n    url = \"http://{}:{}{}{}\".format(\n        api,\n        api_port,\n        api_endpoint,\n        host_id\n    )\n    method = \"DELETE\"\n\n    # endregion\n\n    r = make_api_call(\n        url,\n        method,\n        username,\n        password\n        )\n\n    if r.ok:\n        resp = json.loads(r.content)\n        print 'Host with id {0} removed from inventory'.format(host_id)\n        print \"Here\"\n        exit(0)\n    else:\n        print 'Post request failed', r.content\n        print \"There\"\n        exit(1)\n# endregion\n        \nawx_delete_host(awx_api,awx_username,awx_password,host_id)"
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "AwxDeleteHost"
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7",
                    "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "CALL_RUNBOOK",
                  "uuid": "b5bd8fcb-5381-427b-8e2c-2f5aee5d0ca4",
                  "child_tasks_local_reference_list": [],
                  "state": "ACTIVE",
                  "attrs": {
                    "inarg_list": [],
                    "type": "CALL_RUNBOOK",
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "bb908a06_runbook",
                      "uuid": "e00e10e7-4495-49ec-93fc-fc9211e25d31"
                    }
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "FortigateConfigRemove"
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7",
                    "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "CALL_RUNBOOK",
                  "uuid": "1bb19514-7348-49f8-9fef-553b552c828d",
                  "child_tasks_local_reference_list": [],
                  "state": "ACTIVE",
                  "attrs": {
                    "inarg_list": [],
                    "type": "CALL_RUNBOOK",
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "a25b9ced_runbook",
                      "uuid": "d5742432-a681-4792-81ed-cf5b0091c832"
                    }
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "VeaamDelJob"
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7",
                    "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "CALL_RUNBOOK",
                  "uuid": "6a83804b-07a8-4c78-93a2-c9c5c6b0a249",
                  "child_tasks_local_reference_list": [],
                  "state": "ACTIVE",
                  "attrs": {
                    "inarg_list": [],
                    "type": "CALL_RUNBOOK",
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "e7f388fd_runbook",
                      "uuid": "6b691bc1-a3db-4351-a90f-c9c7168b588e"
                    }
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "VcDelDrsRules"
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7",
                    "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "CALL_RUNBOOK",
                  "uuid": "36df1ddd-100a-4e82-853e-892f2200bd52",
                  "child_tasks_local_reference_list": [],
                  "state": "ACTIVE",
                  "attrs": {
                    "inarg_list": [],
                    "type": "CALL_RUNBOOK",
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "65d2b330_runbook",
                      "uuid": "162e4010-912e-40f9-9321-5c2e5a969c3d"
                    }
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "VcDelTag"
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7",
                    "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "CALL_RUNBOOK",
                  "uuid": "b057ddcf-131b-411b-a7f8-e5ea8075c010",
                  "child_tasks_local_reference_list": [],
                  "state": "ACTIVE",
                  "attrs": {
                    "inarg_list": [],
                    "type": "CALL_RUNBOOK",
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "9aa10176_runbook",
                      "uuid": "dfd5837e-f8b3-4315-b2c5-9afa8807a7a4"
                    }
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "VcDelFolder"
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7",
                    "uuid": "cf218b30-0f33-4c57-86d2-05fb1f130670"
                  },
                  "retries": "0",
                  "description": "",
                  "type": "EXEC",
                  "uuid": "b0302151-b5d2-4de7-9028-cd9b55e6f520",
                  "child_tasks_local_reference_list": [],
                  "state": "ACTIVE",
                  "attrs": {
                    "script_type": "static",
                    "type": "",
                    "command_line_args": "",
                    "exit_status": [],
                    "script": "print(\"empty\")"
                  },
                  "timeout_secs": "0",
                  "inherit_target": false,
                  "message_list": [],
                  "variable_list": [],
                  "name": "CloseJiraTicketEmpty"
                }
              ],
              "description": "",
              "message_list": [],
              "uuid": "fd6edc77-88a2-4358-8f89-1f0dec9e517a",
              "state": "ACTIVE",
              "variable_list": [],
              "main_task_local_reference": {
                "kind": "app_task",
                "name": "2c6de7db_dag_cloned_1",
                "uuid": "1ed0336c-5144-42ad-8b13-45747189f585"
              },
              "name": "d1b88acb_runbook_cloned_0"
            }
          },
          "variable_list": [],
          "name": "Package1_cloned_0"
        }
      ]
    },
    "name": "TelefonicaDemo-3"
  },
  "spec": {
    "description": "",
    "resources": {
      "client_attrs": {
        "7b8be9c1_deployment": {
          "y": -1737.6048729736,
          "x": -294.0220069579
        },
        "None": {
          "y": -337.3191586879,
          "x": 631.120850185
        },
        "7af2d8ea_deployment": {
          "y": -1737.6048729736,
          "x": -294.0220069579
        },
        "5bd7300a_deployment": {
          "y": -1737.6048729736,
          "x": -294.0220069579
        }
      },
      "service_definition_list": [
        {
          "singleton": false,
          "action_list": [
            {
              "description": "System action for creating an application",
              "type": "system",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=F5ConfigAdd}"
                    ],
                    "name": "1060ee9f_dag",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "F5ConfigAdd",
                    "attrs": {
                      "type": "CALL_RUNBOOK",
                      "inarg_list": "",
                      "runbook_reference": "@{kind=app_runbook; name=5ed345e7_runbook}"
                    },
                    "timeout_secs": "0",
                    "type": "CALL_RUNBOOK",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "f0d6aa56_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "1060ee9f_dag"
                },
                "variable_list": []
              },
              "name": "action_create"
            },
            {
              "description": "System action for deleting an application. Deletes created VMs as well",
              "type": "system",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=CalmGetAppstatus}",
                      "@{kind=app_task; name=VeeamCheckJob}",
                      "@{kind=app_task; name=CreateJiraTicket}",
                      "@{kind=app_task; name=LinkJiraParent}",
                      "@{kind=app_task; name=F5ConfigRemove}",
                      "@{kind=app_task; name=VeaamDelJob}"
                    ],
                    "name": "6c8cf9d3_dag",
                    "attrs": {
                      "edges": "    ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "CalmGetAppstatus",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:       salaheddine.gassim@nutanix.com\n# * version:      03242020 - initial version\n# task_name:      CalmGetAppStatus\n# description:    This script gets the status of an application.\n# endregion\n\n# region capture Calm macros\npc_ip = '@@{prism_ip}@@'\nprism_username = '@@{prism.username}@@'\nprism_secret = '@@{prism.secret}@@'\napp_uuid = '@@{calm_application_uuid}@@'\n# endregion\n\n# region prepare variables\nheaders = {'content-type': 'application/json'}\n# endregion\n\n# region REST call: Get Apps\nmethod = 'GET'\nurl = \"https://{}:9440/api/nutanix/v3/apps/{}\".format(pc_ip,app_uuid)\n\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, auth='BASIC', user=prism_username, passwd=prism_secret,\n              headers=headers, verify=False)\n\nif resp.ok:\n    json_resp = json.loads(resp.content)\n    print(\"app_status={}\".format(json_resp['status']['state']))\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n",
                      "eval_variables": "app_status",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "VeeamCheckJob",
                    "attrs": {
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       11/03/2020\n# task_name:    VeeamCheckJob\n# description:  Checks a Veeam Job\n#               The script deletes a Veeam Job using the \n#               the veeam_job_url on VeeamGetJob\n# input vars:   username, password, veeam_job_url, api_server\n# output vars:  none\n# endregion\n\n# region capture Calm variables\nusername = \"@@{veeam.username}@@\"\npassword = \"@@{veeam.secret}@@\"\nveeam_job_name = \"@@{calm_application_name}@@\"\napi_server = \"@@{veeam_endpoint}@@\"\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/sessionMngr/?v=latest\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to Veeam...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the session_cookie and session_id\nresp_parse = json.loads(resp.content)\nveeam_session_cookie = resp.headers.get('X-RestSvcSessionId')\nveeam_session_id = resp_parse['SessionId']\n# endregion\n\n# region main processing\n# region prepare api call\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/jobs\"\nmethod = \"DELETE\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n# endregion\n\n# region get job\n# make the api call\nprint(\"STEP: Gettings jobs...\")\nmethod = \"GET\"\nprint(\"Making a {} API call to {}\".format(method, base_url))\nresp = process_request(base_url, method, headers)\n\n# get the job_url\njob_url = \"\"\nresp_parse = json.loads(resp.content)\nfor job in resp_parse['Refs']:\n    if job['Name'] == veeam_job_name:\n        job_url = job['Href']\n\nif job_url:\n    veeam_job_url=job_url.rsplit('/', 1)[1] #get only the last occurence\nelse:\n    print(\"Error: Backup Job \"+veeam_job_name+\" is not present ..\")\n    exit(1)\n# endregion\n\n# region get job backup sessions\n# make the api call\nprint(\"STEP: Get backup sessions...\")\nmethod = \"GET\"\nurl = \"{0}/{1}/backupSessions?format=entity\".format(base_url, veeam_job_url)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# check if any job is currently running\n# exiting if the job is running for more than 10 minutes\ni = 1\nwhile True:\n    loop_break = '0'\n    resp_parse = json.loads(resp.content)\n    for job in resp_parse['BackupJobSessions']:\n        if ((job['JobName'] == veeam_job_name) and (job['State'] == \"Working\")):\n            print (\"A job is currently running ..\")\n            print (\"Job's name: {}\" .format(job['JobName']))\n            print (\"Job's session name: {}\" .format(job['Name']))\n            print (\"Job's progress: {0}, state: {1}, result: {2}\" .format(job['Progress'], job['State'], job['Result']))\n            print (\"Sleep for: 2 minutes..\")\n            sleep(120)\n            i = i+1\n            loop_break = '1'\n            resp = process_request(url, method, headers)\n            if (i > 5):\n                print (\"Error.., we have waited for 10 minutes already ..\")\n                print (\"Job's name: {} is still in progress\" .format(job['JobName']))\n                print (\"Job's progress: {0}, state: {1}, result: {2}\" .format(job['Progress'], job['State'], job['Result']))\n                print (\"Please relaunch the application deletion after Backup's completion\")\n                exit(1)  \n    if loop_break == '0':\n        break\n# endregion\n# endregion\nexit(0)",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "CreateJiraTicket",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraCreateTicket\n# description:  Jira ticket creation using the deployed vm specs\n# input vars:   application_name, jira_project_key\n# output vars:  jira_ticket_name\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\njira_project_key = \"@@{jira_project_name}@@\"\napplication_name = \"@@{calm_application_name}@@\"\n# endregion\n\n\ndef create_jira_ticket(api_server, jira_login, jira_api_token, jira_project_key,\n                       application_name, ticket_summary):\n    # region prepare api call\n    api_server_port = \"443\"\n    api_server_endpoint = \"/rest/api/3/issue\"\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    }\n    create_payload = {\n        \"fields\": {\n        \"project\": {\n        \"key\": jira_project_key\n        },\n        \"description\": {\n        \"version\": 1,\n        \"type\": \"doc\",\n        \"content\": [\n            {\n            \"type\": \"paragraph\",\n            \"content\": [\n                {\n                \"type\": \"text\",\n                \"text\": ticket_summary\n                }\n            ]\n            }\n        ]\n        },\n        \"summary\": ticket_summary,\n            \"labels\": [\n        \"calm\"\n        ],        \n        \"issuetype\": {\n        \"name\": \"Task\"\n        }\n    }\n        \n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(create_payload),\\\n                auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n                verify=False\n                )\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"Ticket {} was created\".format(result['key']))\n        print(\"jira_child_ticket={}\".format(result['key']))\n        \n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\nsleep(10)\ncalm_array_index = int('@@{calm_array_index}@@')\nif ((\"@@{app_status}@@\" == \"deleting\") and (calm_array_index == 0)):\n    print(\"Creating Jira ticket to delete operation\")\n    ticket_summary = application_name + \" - Deleting deployment\"\n    create_jira_ticket(api_server, jira_login, jira_api_token, jira_project_key,\n                       application_name, ticket_summary)\nelif ((calm_array_index > 0) and (\"@@{app_status}@@\" == \"running\")):\n    print(\"Creating Jira ticket for ScaleIn operation\")\n    ticket_summary = \"ScaleIn operation on \" + application_name\n    create_jira_ticket(api_server, jira_login, jira_api_token, jira_project_key,\n                       application_name, ticket_summary)",
                      "eval_variables": "jira_child_ticket",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "LinkJiraParent",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraUpdateTicket\n# description:  Link a ticket to it's parent\n# input vars:   jira_link_type\n# output vars:  none\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\njira_link_type = \"@@{jira_link_type}@@\" #10003 = relates to\njira_parent_ticket = \"@@{jira_parent_ticket}@@\"\njira_child_ticket = \"@@{jira_child_ticket}@@\"\n# endregion\n\n\ndef link_jira_ticket(api_server, jira_login, jira_api_token, jira_link_type,\n                     jira_parent_ticket, jira_child_ticket):\n        \n    # region prepare api call\n    api_server_port = \"443\"\n    api_server_endpoint = \"/rest/api/3/issueLink\"\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    }\n\n    link_payload = {\n        \"outwardIssue\": {\n            \"key\": jira_child_ticket\n        },\n        \"inwardIssue\": {\n            \"key\": jira_parent_ticket\n        },\n        \"type\": {\n            \"id\": jira_link_type\n        }\n    }\n\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(link_payload),\\\n                auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n                verify=False\n                )\n\n    print(resp)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))    \n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(resp.content))\n        exit(1)\n    # endregion\n\ncalm_array_index = int('@@{calm_array_index}@@')\n\nif ((\"@@{app_status}@@\" == \"deleting\") and (calm_array_index == 0)):\n    print(\"Linking Jira ticket for the Delete operation\")\n    link_jira_ticket(api_server, jira_login, jira_api_token, jira_link_type,\n                     jira_parent_ticket, jira_child_ticket)\nelif calm_array_index > 0 and (\"@@{app_status}@@\" == \"running\"):\n    print(\"Linking Jira ticket for the ScaleIn operation\")\n    link_jira_ticket(api_server, jira_login, jira_api_token, jira_link_type,\n                     jira_parent_ticket, jira_child_ticket)\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "F5ConfigRemove",
                    "attrs": {
                      "type": "CALL_RUNBOOK",
                      "inarg_list": "",
                      "runbook_reference": "@{kind=app_runbook; name=5ed345e7_runbook_cloned_0}"
                    },
                    "timeout_secs": "0",
                    "type": "CALL_RUNBOOK",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "VeaamDelJob",
                    "attrs": {
                      "type": "CALL_RUNBOOK",
                      "inarg_list": "",
                      "runbook_reference": "@{kind=app_runbook; name=a25b9ced_runbook}"
                    },
                    "timeout_secs": "0",
                    "type": "CALL_RUNBOOK",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "df173f1e_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "6c8cf9d3_dag"
                },
                "variable_list": []
              },
              "name": "action_delete"
            },
            {
              "description": "System action for starting an application",
              "type": "system",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=ReadyPhase}"
                    ],
                    "name": "0a954dd4_dag",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "ReadyPhase",
                    "attrs": {
                      "type": "CALL_RUNBOOK",
                      "inarg_list": "",
                      "runbook_reference": "@{kind=app_runbook; name=6941cb3a_runbook}"
                    },
                    "timeout_secs": "0",
                    "type": "CALL_RUNBOOK",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "efba402c_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "0a954dd4_dag"
                },
                "variable_list": []
              },
              "name": "action_start"
            },
            {
              "description": "System action for stopping an application",
              "type": "system",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=Task1_nuta}"
                    ],
                    "name": "c997b6ab_dag",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "Task1_nuta",
                    "attrs": {
                      "script": "print(\"ok\")",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "53c0046c_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "c997b6ab_dag"
                },
                "variable_list": []
              },
              "name": "action_stop"
            },
            {
              "description": "System action for restarting an application",
              "type": "system",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=Task1_nuta}"
                    ],
                    "name": "20f027f8_dag",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "Task1_nuta",
                    "attrs": {
                      "script": "print(\"ok\")",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "b25bb7e8_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "20f027f8_dag"
                },
                "variable_list": []
              },
              "name": "action_restart"
            },
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=AwxAddHost}",
                      "@{kind=app_task; name=AwxAddHostToGroups}",
                      "@{kind=app_task; name=AwxRunPlaybook}"
                    ],
                    "name": "18cefae7_dag",
                    "attrs": {
                      "edges": " ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "AwxAddHost",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# escript-template v20190605 / stephane.bourdeaud@nutanix.com\n# * author:     jose.gomez@nutanix.com\n# * version:    20200214\n# task_type:    Set Variable\n# task_name:    AwxAddHost\n# description:  Add host to AWX inventory \n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\nawx_username = '@@{awx.username}@@'\nawx_password = '@@{awx.secret}@@'\nawx_api = '@@{awx_ip}@@'\nawx_inventory_id = int('@@{awx_inventory_id}@@')\nhost_ip = '@@{address}@@'\n\n# endregion\n\n# region functions\ndef make_api_call(url,method,username,username_secret,payload):\n    \"\"\"Makes an API call to an external API.\n\n    Args:\n        url: The URL for the external REST API endpoint.\n        method: The REST method to use.\n        username: The API user name.\n        username_secret: The API user name password.\n        payload: The JSON payload to include in the call.\n    \n    Returns:\n        The API response.\n    \"\"\"\n    headers = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n    }\n    while True:\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            params=json.dumps(payload),\n            headers=headers,\n            verify=False\n        )\n\n        # deal with the result/response\n        if resp.ok:        \n            return resp\n\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(json.dumps(payload)))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(\n                json.dumps(\n                    json.loads(resp.content), \n                    indent=4)))\n            exit(1)\n\ndef awx_add_host(api,username,password,inventory_id,host_ip,host_variables='',host_enabled=True):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"80\"\n    api_endpoint = \"/api/v2/hosts/\"\n    url = \"http://{}:{}{}\".format(\n        api,\n        api_port,\n        api_endpoint\n    )\n    method = \"POST\"\n\n    # endregion\n\n    # Compose the json payload\n    payload = {\n        'variables': host_variables,\n        'name': host_ip,\n        'enabled': host_enabled,\n        'inventory': inventory_id\n    }\n\n    r = make_api_call(\n        url,\n        method,\n        username,\n        password,\n        payload\n        )\n\n    if r.ok:\n        resp = json.loads(r.content)\n        print 'awx_host_id={0}'.format(resp['id'])\n        exit(0)\n    else:\n        print 'Post request failed', r.content\n        exit(1)\n# endregion\n        \nawx_add_host(awx_api,awx_username,awx_password,awx_inventory_id,host_ip)",
                      "eval_variables": "awx_host_id",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "AwxAddHostToGroups",
                    "attrs": {
                      "script": "# region headers\n# escript-template v20190605 / stephane.bourdeaud@nutanix.com\n# * author:     jose.gomez@nutanix.com\n# * version:    20200214\n# task_type:    Execute\n# task_name:    AwxAddHostToGroups\n# description:  Add host to AWX inventory \n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\nawx_username = '@@{awx.username}@@'\nawx_password = '@@{awx.secret}@@'\nawx_api = '@@{awx_ip}@@'\nawx_inventory_id = int('@@{awx_inventory_id}@@')\nawx_host_id = int('@@{awx_host_id}@@')\nawx_ansible_groups = list(\"@@{awx_ansible_groups}@@\".split(\",\"))\n# endregion\n\n# region functions\ndef make_api_call(url,method,username,username_secret,payload=None):\n    \"\"\"Makes an API call to an external API.\n\n    Args:\n        url: The URL for the external REST API endpoint.\n        method: The REST method to use.\n        username: The API user name.\n        username_secret: The API user name password.\n        payload: The JSON payload to include in the call.\n    \n    Returns:\n        The API response.\n    \"\"\"\n    headers = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n    }\n    while True:\n        print(\"Making a {} API call to {}\".format(method, url))\n        if payload:\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                params=json.dumps(payload),\n                headers=headers,\n                verify=False\n            )\n        else:\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                headers=headers,\n                verify=False\n            )\n\n        # deal with the result/response\n        if resp.ok:     \n            return resp\n\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(json.dumps(payload)))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(\n                json.dumps(\n                    json.loads(resp.content), \n                    indent=4)))\n            exit(1)\n\ndef awx_add_host_to_groups(api,username,password,inventory_id,host_id,host_groups = [], *args):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"80\"\n\n    for group in host_groups:\n        api_endpoint = \"/api/v2/inventories/\"\n        api_action = \"/groups\"\n        api_query = \"?name=\"\n\n        url = \"http://{}:{}{}{}{}{}{}\".format(\n            api,\n            api_port,\n            api_endpoint,\n            inventory_id,\n            api_action,\n            api_query,\n            group\n        )\n        \n        method = \"GET\"\n\n        r = make_api_call(\n            url,\n            method,\n            username,\n            password\n        )\n        \n        if len(json.loads(r.content)['results']) > 0:\n            group_id = json.loads(r.content)['results'][0]['id']\n            payload = {\n                'id': host_id\n            }\n        else:\n            print \"Group {0} does no exist\".format(group)\n            break\n\n        api_endpoint = \"/api/v2/groups/\"\n        api_action = \"/hosts/\"\n\n        method = \"POST\"\n\n        url = \"http://{}:{}{}{}{}\".format(\n            api,\n            api_port,\n            api_endpoint,\n            group_id,\n            api_action,            \n        )\n\n        r = make_api_call(\n            url,\n            method,\n            username,\n            password,\n            payload\n        )\n\n        if r.ok:\n            print \"Host added to group {0}\".format(group)\n        else:\n            print 'Post request failed', r.content\n            exit(1)\n# endregion\n        \nawx_add_host_to_groups(awx_api,awx_username,awx_password,awx_inventory_id,awx_host_id,awx_ansible_groups)",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "AwxRunPlaybook",
                    "attrs": {
                      "script": "# region headers\n# escript-template v20190605 / stephane.bourdeaud@nutanix.com\n# * author:     jose.gomez@nutanix.com\n# * version:    20200218\n# task_type:    Execute\n# task_name:    LaunchJobTemplate\n# description:  Launch a job template or also known playbook \n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\nawx_username = '@@{awx.username}@@'\nawx_password = '@@{awx.secret}@@'\nawx_api = '@@{awx_ip}@@'\nawx_job_template_id = int('@@{awx_job_template_id}@@')\nawx_extra_vars = \"\" #@@{awx_extra_vars}@@\nhost_ip = '@@{address}@@'\n# endregion\n\n# region functions\ndef make_api_call(url,method,username,username_secret,payload=None):\n    \"\"\"Makes an API call to an external API.\n\n    Args:\n        url: The URL for the external REST API endpoint.\n        method: The REST method to use.\n        username: The API user name.\n        username_secret: The API user name password.\n        payload: The JSON payload to include in the call.\n    \n    Returns:\n        The API response.\n    \"\"\"\n    headers = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n    }\n    while True:\n        print(\"Making a {} API call to {}\".format(method, url))\n        if payload:\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                params=json.dumps(payload),\n                headers=headers,\n                verify=False\n            )\n        else:\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                headers=headers,\n                verify=False\n            )\n\n        # deal with the result/response\n        if resp.ok:     \n            return resp\n\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(json.dumps(payload)))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(\n                json.dumps(\n                    json.loads(resp.content), \n                    indent=4)))\n            exit(1)\n\ndef awx_run_job_template(api,username,password,job_template_id,host_ip,extra_vars=None):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"80\"\n\n    api_endpoint = \"/api/v2/job_templates/\"\n    api_action = \"/launch/\"\n\n    url = \"http://{}:{}{}{}{}\".format(\n        api,\n        api_port,\n        api_endpoint,\n        job_template_id,\n        api_action\n    )\n    \n    method = \"POST\"\n\n    payload = {\n        \"extra_vars\": extra_vars,\n        \"limit\": \"@@{address}@@\"\n    }\n\n    r = make_api_call(\n        url,\n        method,\n        username,\n        password,\n        payload\n    )\n\n    if r.ok:\n        job_id =  json.loads(r.content)['job']\n        print 'Ansible Job ID: {0}'.format(job_id)\n\n        awx_poll_job(api,username,password,job_id)\n        print 'Ansible job status: successful'\n    else:\n        print 'Request failed', r.content\n        exit(1)\n    \n\ndef awx_poll_job(api,username,password,job_id):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"80\"\n\n    api_endpoint = \"/api/v2/jobs/\"\n\n    url = \"http://{}:{}{}{}/\".format(\n        api,\n        api_port,\n        api_endpoint,\n        job_id,\n    )\n    \n    method = \"GET\"\n\n    retries = 360\n    job_status = ''\n\n    while job_status != 'successful':\n        r = make_api_call(\n            url,\n            method,\n            username,\n            password,\n        )\n\n        if r.ok:\n            job_status = json.loads(r.content)['status']\n\n            if job_status == \"failed\" or job_status == \"error\":\n                print \"Ansible job failed\"\n                break\n        else:\n            print 'Post request failed', r.content\n            exit(1)\n\n        sleep(10)\n        retries -= 1\n        if retries == 0:\n            # if job hasn't finished yet, give up\n            print 'Job may still running. Increase the retries or sleep time'\n            exit(0)\n\n# endregion\n        \nawx_run_job_template(awx_api,awx_username,awx_password,awx_job_template_id,host_ip,awx_extra_vars)",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "bf14dde8_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "18cefae7_dag"
                },
                "variable_list": []
              },
              "name": "AnsibleDeployment"
            },
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=FortigateCreateIpv4}",
                      "@{kind=app_task; name=FortigateAddGroup}",
                      "@{kind=app_task; name=FortigateCheckGroup}",
                      "@{kind=app_task; name=FortigateUpdateGroup}",
                      "@{kind=app_task; name=FortigateUpdatePolicy}"
                    ],
                    "name": "df5ec9f8_dag",
                    "attrs": {
                      "edges": "   ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "FortigateCreateIpv4",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    FortigateCreateIpv4\n# description:  Create an ipv4 address\n# input vars:   fortigate_vm_name and fortigate_vm_ip\n# output vars:  revision_changed\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\nvm_name = \"@@{vm_name}@@\"\nvm_ip = \"@@{address}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\n# endregion\n\nif \"@@{fortigate_policy}@@\" == \"\":\n  exit(0)\n  \ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'application/json'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \n\n#fortigate_csrf_token , fortigate_cookie = fortiget_get_cookie(api_server, api_server_port,fortigate_login,fortigate_password)\n\n\ndef fortiget_create_ip(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie, vm_name, vm_ip, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/address?&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"','')\n    headers = {\n        'Accept': '*/*',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n    create_payload = {\"name\": vm_name, \"subnet\": vm_ip + \" 255.255.255.255\"}\n    print(json.dumps(create_payload))\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(create_payload), cookies=fortigate_cookie, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"revision_changed : {}\".format(result['revision_changed']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \n\nfortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\nfortiget_create_ip(api_server, api_server_port, fortigate_csrf_token,\n                   fortigate_cookie, vm_name, vm_ip, fortigate_vdom)\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "FortigateAddGroup",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    FortigateAddGroup\n# description:  Create a new fortigate address group and add vm into it\n# input vars:   vms, group_name\n# output vars:  fortigate_group_name\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\nvms = \"@@{vm_name}@@\"\ngroup_name = \"@@{calm_application_name}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\n# endregion\n\nif \"@@{fortigate_policy}@@\" == \"\":\n  exit(0)\n  \ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'plain/text'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        print(resp.content)\n        print(resp.cookies.get('ccsrftoken'))\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\ndef fortiget_add_group(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie, vms, group_name, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/addrgrp?&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"','')\n    headers = {\n        'Content-Type': 'application/json',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n   \n    create_payload = {}\n    create_payload['name'] = group_name\n    create_payload['member'] = []\n    for vm in vms.split(\",\"):\n        create_payload['member'].append({'name' : vm})\n\n    print(json.dumps(create_payload))\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(create_payload), cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"Group name : {}\".format(result['mkey']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \nif int(\"@@{calm_array_index}@@\") == 0:\n  fortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\n\n  fortiget_add_group(api_server, api_server_port, fortigate_csrf_token,\n                   fortigate_cookie, vms, group_name, fortigate_vdom)\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "FortigateCheckGroup",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/10032020 - initial version\n# task_name:    fortigateCheckObject\n# description:  Check if an object exist, with a timeout of 5 min\n# input vars:   object_root, object_name\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\nobject_root = \"addrgrp/\"\nobject_name = \"@@{calm_application_name}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\" # for futur use\n# endregion\nif \"@@{fortigate_policy}@@\" == \"\":\n  exit(0)\n  \ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'plain/text'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        print(resp.content)\n        print(resp.cookies.get('ccsrftoken'))\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\n\ndef fortigate_check_object(api_server, api_server_port, object_root, object_name, fortigate_vdom):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/\"+ object_root + object_name\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n         'Accept': '*/*'\n    }\n    # endregion\n    timeout = 300\n    while True:\n        # region make api call\n        # make the API call and capture the results in the variable called \"resp\"\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n\n        # deal with the result/response\n        if resp.ok:\n            print(\"Request was successful. Status code: {}\".format(resp.status_code))\n            print(\"Address Group {} is ready, Resuming...\".format(object_name))\n            break\n        else:\n            print(\"Object {} doesn't exist\".format(object_name))\n            timeout -= 15\n            if timeout == 0:\n                print(\"Operation timeout\")\n                exit(1)\n            sleep(15)\n            \n    # endregion\n    \nif int(\"@@{calm_array_index}@@\") != 0:\n  fortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\n  \n  fortigate_check_object(api_server, api_server_port, object_root, object_name, fortigate_vdom)\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "FortigateUpdateGroup",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    FortigateUpdateGroup\n# description:  Update fortigate address group with new members\n# input vars:   vm_name, vm_ip, group_name, action\n# output vars:  revision_changed\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\nvm_name = \"@@{vm_name}@@\"\nvm_ip = \"@@{address}@@\"\ngroup_name = \"@@{calm_application_name}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\naction = \"add\"\n# endregion\n\nif \"@@{fortigate_policy}@@\" == \"\":\n  exit(0)\n\ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'plain/text'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        print(resp.content)\n        print(resp.cookies.get('ccsrftoken'))\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\ndef fortiget_update_group(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie,\n                          vm_name, vm_ip, group_name, action, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/addrgrp/\"+ group_name + \"?&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n        'Content-Type': 'application/json',\n    }\n    # endregion\n    \n    # region make api call to get the group members\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        group_members = result['results'][0]\n        if len(group_members['member']) == 1 and int(\"@@{calm_array_index}@@\") == 0:\n            # region prepare api call to update the group\n            method = \"DELETE\"\n            fortigate_csrf_token = fortigate_csrf_token.replace('\"', '')\n            headers = {\n                'Content-Type': 'application/json',\n                'X-CSRFTOKEN': fortigate_csrf_token\n            }\n            # endregion\n\n            # region make api call\n            # make the API call and capture the results in the variable called \"resp\"\n            print(\"Making a {} API call to {}\".format(method, url))\n            resp = urlreq(url, verb=method, params=json.dumps(group_members),\n                        cookies=fortigate_cookie, headers=headers, verify=False)\n            print(resp.content)\n            # deal with the result/response\n            if resp.ok:\n                print(\"Request was successful. Status code: {}\".format(resp.status_code))\n                result = json.loads(resp.content)\n                print(\"Group {} was deleted\".format(group_name))\n                print(\"revision_changed : {}\".format(result['revision_changed']))\n            else:\n                print(\"Request failed\")\n                print(\"Headers: {}\".format(headers))\n                print('Status code: {}'.format(resp.status_code))\n                print('Response: {}'.format(json.dumps(\n                    json.loads(resp.content), indent=4)))\n                exit(1)\n            # endregion\n            exit(0)\n\n        if action == \"add\":\n            group_members['member'].append({'name': vm_name})\n        else:\n            group_members['member'].remove(\n                {'name': vm_name, 'q_origin_key': vm_name})\n\n        print(json.dumps(group_members))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(\n            json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n    # region prepare api call to update the group\n    method = \"PUT\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"', '')\n    headers = {\n        'Content-Type': 'application/json',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(group_members),\n                  cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"revision_changed : {}\".format(result['revision_changed']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(\n            json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\nif int(\"@@{calm_array_index}@@\") != 0:\n  fortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\n\n  fortiget_update_group(api_server, api_server_port, fortigate_csrf_token,\n                      fortigate_cookie, vm_name, vm_ip, group_name, action, fortigate_vdom)\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "FortigateUpdatePolicy",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    FortigateUpdatePolicy\n# description:  Update a policy with the specified group as a destination\n# input vars:   fortigate_policy_id\n# output vars:  revision_changed\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\npolicy_id = \"@@{fortigate_policy}@@\".split(\"-\")[0]\ngroup_name = \"@@{calm_application_name}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\naction = \"add\"\n# endregion\n\nif \"@@{fortigate_policy}@@\" == \"\":\n  exit(0)\n\ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'text/plain'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \n\ndef fortiget_get_policies(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie,\n                          group_name, action, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/policy/\" + str(policy_id) + \"?skip=1&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n        'Content-Type': 'application/json',\n    }\n    # endregion\n    \n    # region make api call to get the group members\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        policy_members = result['results'][0]\n        if action == \"add\":\n            policy_members['dstaddr'].append({'name' : group_name})\n        else:\n            policy_members['dstaddr'].remove({'name': group_name, 'q_origin_key': group_name})\n            \n        print(json.dumps(policy_members))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\n    # region prepare api call to update the group\n    method = \"PUT\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"','')\n    headers = {\n        'Content-Type': 'application/json',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(policy_members), cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"revision_changed : {}\".format(result['revision_changed']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \n\nfortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\nfortiget_get_policies(api_server, api_server_port, fortigate_csrf_token,\n                      fortigate_cookie, group_name, action, fortigate_vdom)\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "141bd772_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "df5ec9f8_dag"
                },
                "variable_list": []
              },
              "name": "FortigateConfigAdd"
            },
            {
              "description": "The application is ready and we can continue other tasks, that suppose removing an existing application.",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=JenkinsLaunchBuild}",
                      "@{kind=app_task; name=JenkinsMonitorJob}",
                      "@{kind=app_task; name=CalmRemoveApp}",
                      "@{kind=app_task; name=JiraCloseTicket}"
                    ],
                    "name": "4a4af9c6_dag",
                    "attrs": {
                      "edges": "  ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "JenkinsLaunchBuild",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/27200219 - initial version\n# task_name:    JenkinsLaunchBuild\n# description:  Launching a Parametrized jenkins build \n# input vars:   jenkins_job_name, jenkins_job_params\n# output vars:  job_build_id\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jenkins_endpoint}@@\"\njenkins_login = \"@@{jenkins.username}@@\"\njenkins_api_token = \"@@{jenkins.secret}@@\"\njenkins_job_name = \"@@{jenkins_job_name}@@\" # job that need to be executed\njenkins_job_params = \"machine_ips=@@{address}@@\" # job parameters that need to be executed\n# endregion\n\n# region prepare api call\napi_server_port = \"8080\"\napi_server_endpoint = \"/job/\" + jenkins_job_name + \"/buildWithParameters?\" + jenkins_job_params\nurl = \"http://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Accept': 'application/json'\n}\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, auth='BASIC', user=jenkins_login, passwd=jenkins_api_token,\\\n              headers=headers, verify=False\n             )\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful. Status code: {}\".format(resp.status_code))\n    job_build_id = resp.headers['Location'].split(\"/\")[-2]\n    print(\"Job {} was successfully launched\".format(job_build_id))\n    print(\"job_build_id={}\".format(job_build_id))  \nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion",
                      "eval_variables": "job_build_id",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "JenkinsMonitorJob",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/27200219 - initial version\n# task_name:    JenkinsLaunchBuild\n# description:  Monitor a jenkins job \n# input vars:   job_build_id\n# output vars:  job_status\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jenkins_endpoint}@@\"\njenkins_login = \"@@{jenkins.username}@@\"\njenkins_api_token = \"@@{jenkins.secret}@@\"\njenkins_job_name = \"@@{jenkins_job_name}@@\"\njob_build_id = \"@@{job_build_id}@@\" # job that need to be monitored\n# endregion\n\n# region prepare api call\napi_server_port = \"8080\"\napi_server_endpoint = \"/job/\" + jenkins_job_name + \"/\" + job_build_id + \"/api/json\"\nurl = \"http://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"GET\"\nheaders = {\n    'Accept': 'application/json'\n}\n# endregion\n\n\njob_status = ''\ntimeout = 300\nwhile job_status != 'SUCCESS':\n    \n   # region make api call\n   # make the API call and capture the results in the variable called \"resp\"\n   print(\"Making a {} API call to {}\".format(method, url))\n   resp = urlreq(url, verb=method, auth='BASIC', user=jenkins_login, passwd=jenkins_api_token,\n                 headers=headers, verify=False\n                 )\n   # deal with the result/response\n   if resp.ok:\n       print(\"Request was successful. Status code: {}\".format(resp.status_code))\n       job_status = json.loads(resp.content)['result']\n       if job_status == 'SUCCESS':\n           print(\"job ok\")\n           break\n       elif job_status == 'FAILURE':\n           print(\"job failed\")\n           exit(1)\n        \n       timeout -= 15\n       if timeout == 0:\n           print(\"timeout\")\n           exit(1)\n       else:\n           print(\"still waiting for the job to finish\")\n           sleep(15)\n    \n   else:\n       print(\"Request failed\")\n       print(\"Headers: {}\".format(headers))\n       print('Status code: {}'.format(resp.status_code))\n       print('Response: {}'.format(json.dumps(resp.content)))\n    # endregion\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "CalmRemoveApp",
                    "attrs": {
                      "script": "# region headers\n# escript-template v20190611 / stephane.bourdeaud@nutanix.com\n# * author:     stephane.bourdeaud@emeagso.lab\n# * version:    2020/01/22\n# task_name:    CalmRemoveApp\n# description:  Given an app name, delete the Calm App. \n# endregion\n\n#region capture Calm variables\napi_server = \"@@{prism_ip}@@\"\nusername = \"@@{prism.username}@@\"\nusername_secret = \"@@{prism.secret}@@\"\napp_name = \"@@{target_app}@@\"\n#endregion\n\n#check if we need to delete an app\nif app_name is None:\n  exit(0)\n\n#region prepare api call (get apps)\napi_server_port = \"9440\"\napi_server_endpoint = \"/api/nutanix/v3/apps/list\"\nlength = 250\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\n\n# Compose the json payload\npayload = {\n    \"kind\": \"app\", \n    \"length\":length, \n    \"offset\":0\n}\n# endregion\n\n#region make the api call (get apps)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n# endregion\n\n#region process the results (get apps)\nif resp.ok:\n    print (\"Request status code {} on {}\".format(resp.status_code,resp.request.url))\n    json_resp = json.loads(resp.content)\n    for app in json_resp['entities']:\n        if app_name == app['metadata']['name']:\n            print (\"Deleting application {}\".format(app['metadata']['name']))\n            #region prepare api call (delete app)\n            api_server_port = \"9440\"\n            api_server_endpoint = \"/api/nutanix/v3/apps/{}\".format(app['metadata']['uuid'])\n            url = \"https://{}:{}{}\".format(\n                api_server,\n                api_server_port,\n                api_server_endpoint\n            )\n            method = \"DELETE\"\n            headers = {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n            #endregion\n            #region make api call (delete app)\n            print(\"Making a {} API call to {}\".format(method, url))\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                headers=headers,\n                verify=False\n            )\n            #endregion\n            #region process results (delete app)\n            if resp.ok:\n                print (\"Request status code {} on {}\".format(resp.status_code,resp.request.url))\n                print (\"Application {} is deleting.\".format(app['metadata']['name']))\n                app_state = app['status']['state']\n                app_uuid = app['metadata']['uuid']\n                while app_state != 'deleted':\n                    sleep(15)\n                    method = 'GET'\n                    url = \"https://{}:9440/api/nutanix/v3/apps/{}\".format(\n                        api_server,\n                        app_uuid\n                    )\n                    print(\"Making a {} API call to {}\".format(method, url))\n                    resp = urlreq(\n                        url,\n                        verb=method,\n                        headers=headers,\n                        auth=\"BASIC\",\n                        user=username,\n                        passwd=username_secret,\n                        verify=False\n                    )\n                    if resp.ok:\n                        json_resp = json.loads(resp.content)\n                        print(\"Status:\", json_resp['status']['state'])\n                        if json_resp['status']['state'] is \"error\":\n                            print(\"App could not be deleted.\")\n                            print (\"Response content:\")\n                            print(json.dumps(json.loads(resp.content),indent=4))\n                            exit(1)\n                        app_state = json_resp['status']['state']\n                    else:\n                        print (\"Request failed with status code {}\".format(resp.status_code))\n                        print (\"Response content:\")\n                        print(json.dumps(json.loads(resp.content),indent=4))\n                        print(\"Headers: {}\".format(headers))\n                        exit(1)\n            else:\n                print (\"Request failed with status code {}\".format(resp.status_code))\n                print (\"Response content:\")\n                print(json.dumps(json.loads(resp.content),indent=4))\n                print(\"Headers: {}\".format(headers))\n                exit(1)\n            #endregion\nelse:\n    print (\"Request failed with status code {}\".format(resp.status_code))\n    print (\"Response content:\")\n    print(json.dumps(json.loads(resp.content),indent=4))\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(payload))\n    exit(1)\n# endregion\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "JiraCloseTicket",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraUpdateTicket\n# description:  updating the ticket status with the provided payload\n# input vars:   transition_id, ticket_name\n# output vars:  none\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\ntransition_id = 41 # 31 = in progress / 41 = Done\nticket_name = \"@@{jira_parent_ticket}@@\" # ticket that need to be updated\n# endregion\n\ndef update_jira_ticket(api_server, jira_login, jira_api_token, transition_id,\n                       ticket_name):\n        \n    # region prepare api call\n    api_server_port = \"443\"\n    api_server_endpoint = \"/rest/api/3/issue/\" + ticket_name + \"/transitions\"\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    }\n    update_payload = {\n        \"transition\": {\n        \"id\": transition_id\n    }\n        \n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(update_payload),\\\n                auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n                verify=False\n                )\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))    \n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\ncalm_array_index = int('@@{calm_array_index}@@')\nif (\"@@{app_status}@@\" == \"provisioning\") and calm_array_index == 0:\n    print(\"Updating Jira ticket for the application deployment\")\n    \n    update_jira_ticket(api_server, jira_login, jira_api_token, transition_id,\n                       ticket_name)\nelif calm_array_index > 0 and (\"@@{app_status}@@\" == \"running\"):\n\n    print(\"Updating Jira ticket for ScaleOut operation\")\n    update_jira_ticket(api_server, jira_login, jira_api_token, transition_id,\n                       ticket_name)\n ",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "6941cb3a_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "4a4af9c6_dag"
                },
                "variable_list": []
              },
              "name": "ReadyPhase"
            },
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=F5CreateNode}",
                      "@{kind=app_task; name=F5CreatePool}",
                      "@{kind=app_task; name=F5CheckPool}",
                      "@{kind=app_task; name=F5UpdatePool}",
                      "@{kind=app_task; name=F5CheckVS}",
                      "@{kind=app_task; name=F5CreateVS}",
                      "@{kind=app_task; name=F5UpdateVS}"
                    ],
                    "name": "f81dd7b2_dag",
                    "attrs": {
                      "edges": "     ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "F5CreateNode",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/10032020 - initial version\n# task_name:    F5CreateNode\n# description:  Create a node or nodes to be used inside a pool\n# input vars:   vm_name, vm_ip, f5_node_description, f5_partition\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\nvm_name = \"@@{vm_name}@@\"\nvm_ip = \"@@{address}@@\"\nf5_node_description = \"@@{calm_application_name}@@\" + \" node\"\nf5_partition = \"@@{f5_partition}@@\"\n# endregion\n\n\ndef f5_create_node(api_server, api_server_port, vm_name, vm_ip, f5_node_description, f5_partition):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/node/\"\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n         'Content-Type': 'application/json'\n    }\n    # endregion\n    create_payload = {\n        \"name\": vm_name,\n        \"partition\": f5_partition,\n        \"address\": vm_ip,\n        \"connectionLimit\": 0,\n        \"description\": f5_node_description,\n        \"dynamicRatio\": 1,\n        \"ephemeral\": \"false\",\n        \"fqdn\": {\n            \"addressFamily\": \"ipv4\",\n            \"autopopulate\": \"disabled\",\n            \"downInterval\": 5,\n            \"interval\": \"3600\"\n        }\n    }\n    print(json.dumps(create_payload))\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, auth='BASIC', params=json.dumps(create_payload),\n                  user=f5_login, passwd=f5_password, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"node {} created\".format(result['name']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(resp.content)))\n        exit(1)\n    # endregion\n    \n\nf5_create_node(api_server, api_server_port, vm_name, vm_ip, f5_node_description, f5_partition)\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "F5CreatePool",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/10032020 - initial version\n# task_name:    F5CreatePool\n# description:  Create an empty pool\n# input vars:   pool_name, f5_pool_description, f5_pool_monitor, f5_partition\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\npool_name = \"@@{calm_application_name}@@\" + \"-pool\"\nf5_pool_description = \"@@{calm_application_name}@@\" + \" pool\"\nf5_pool_monitor = \"@@{f5_pool_monitor}@@\"\nf5_partition = \"@@{f5_partition}@@\"\n# endregion\n\n\ndef f5_create_pool(api_server, api_server_port, pool_name, f5_pool_description, f5_pool_monitor, f5_partition):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/pool/\"\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n         'Content-Type': 'application/json'\n    }\n    # endregion\n    create_payload = {\n        \"name\": pool_name,\n        \"partition\": f5_partition,\n        \"monitor\": f5_pool_monitor\n    }\n    print(json.dumps(create_payload))\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, auth='BASIC', params=json.dumps(create_payload),\n                  user=f5_login, passwd=f5_password, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"Pool {} created\".format(result['name']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(resp.content)))\n        exit(1)\n    # endregion\n    \nif int(\"@@{calm_array_index}@@\") == 0:\n  f5_create_pool(api_server, api_server_port, pool_name, f5_pool_description, f5_pool_monitor, f5_partition)\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "F5CheckPool",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/10032020 - initial version\n# task_name:    F5CheckObject\n# description:  Check if an object exist, with a timeout of 5 min\n# input vars:   object_root, object_name\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\nobject_root = \"pool/\"\nobject_name = \"@@{calm_application_name}@@\" + \"-pool\"\nf5_partition = \"@@{f5_partition}@@\" # for futur use\n# endregion\n\n\ndef f5_check_object(api_server, api_server_port, object_root, object_name, f5_partition):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/\"+ object_root + object_name\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n         'Accept': '*/*'\n    }\n    # endregion\n    timeout = 300\n    while True:\n        # region make api call\n        # make the API call and capture the results in the variable called \"resp\"\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, auth='BASIC', user=f5_login,\n                    passwd=f5_password, headers=headers, verify=False)\n\n        # deal with the result/response\n        if resp.ok:\n            print(\"Request was successful. Status code: {}\".format(resp.status_code))\n            print(\"Pool {} is ready, Resuming...\".format(object_name))\n            break\n        else:\n            print(\"Object {} doesn't exist\".format(object_name))\n            timeout -= 15\n            if timeout == 0:\n                print(\"Operation timeout\")\n                exit(1)\n            sleep(15)\n            \n    # endregion\n    \nif int(\"@@{calm_array_index}@@\") != 0:\n  f5_check_object(api_server, api_server_port, object_root, object_name, f5_partition)\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "F5UpdatePool",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/11032020 - initial version\n# task_name:    F5UpdatePool\n# description:  Update a pool with a new member\n# input vars:   pool_name, f5_pool_members,\n#                   f5_vs_port, f5_member_ip, f5_partition\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\npool_name = \"@@{calm_application_name}@@\" + \"-pool\"\nf5_pool_members = \"@@{vm_name}@@\"\nf5_vs_port = \"@@{f5_vs_port}@@\"\nf5_member_ip = \"@@{address}@@\"\nf5_partition = \"@@{f5_partition}@@\"\n\n# endregion\n\n\ndef f5_update_pool(api_server, api_server_port, pool_name, f5_pool_members,\n                   f5_vs_port, f5_member_ip, f5_partition, action=\"add\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/pool/\" + pool_name + \"/members/\"\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    headers = {\n         'Content-Type': 'application/json'\n    }\n    # endregion\n    update_payload = {\n        \"name\": \"/\" + f5_partition + \"/\" + f5_pool_members + \":\" + f5_vs_port ,\n    }\n    print(json.dumps(update_payload))\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    if action == \"add\":\n        method = \"POST\"\n        print(\"Adding a new member {} into pool {}\".format(\n            f5_pool_members, pool_name))\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, auth='BASIC', params=json.dumps(update_payload),\n                      user=f5_login, passwd=f5_password, headers=headers, verify=False)\n    else:\n        print(\"Removing member {} from pool {}\".format(f5_pool_members,pool_name))\n        method = \"DELETE\"\n        url = url + f5_pool_members + \":\" + f5_vs_port\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, auth='BASIC',\n                      user=f5_login, passwd=f5_password, headers=headers, verify=False)\n \n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(\n            json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\nf5_update_pool(api_server, api_server_port, pool_name, f5_pool_members,\n               f5_vs_port, f5_member_ip, f5_partition, \"add\")\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "F5CheckVS",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/10032020 - initial version\n# task_name:    F5CheckObject\n# description:  Check if an object exist, with a timeout of 5 min\n# input vars:   object_root, object_name\n# output vars:  n/a\n# endregion\n\"\"\"\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\nobject_root = \"virtual/\"\nobject_name = \"@@{calm_application_name}@@\" + \"-vs\"\nf5_partition = \"@@{f5_partition}@@\" # for futur use\n# endregion\n\n\ndef f5_check_object(api_server, api_server_port, object_root, object_name, f5_partition):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/\"+ object_root + object_name\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n         'Accept': '*/*'\n    }\n    # endregion\n    timeout = 300\n    while True:\n        # region make api call\n        # make the API call and capture the results in the variable called \"resp\"\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, auth='BASIC', user=f5_login,\n                    passwd=f5_password, headers=headers, verify=False)\n\n        # deal with the result/response\n        if resp.ok:\n            print(\"Request was successful. Status code: {}\".format(resp.status_code))\n            print(\"Pool {} is ready, Resuming...\".format(object_name))\n            break\n        else:\n            print(\"Object {} doesn't exist\".format(object_name))\n            timeout -= 15\n            if timeout == 0:\n                print(\"Operation timeout\")\n                exit(1)\n            sleep(15)\n            \n    # endregion\n    \nif int(\"@@{calm_array_index}@@\") != 0:\n  f5_check_object(api_server, api_server_port, object_root, object_name, f5_partition)\n\"\"\"\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "F5CreateVS",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/10032020 - initial version\n# task_name:    F5CreateVS\n# description:  Create a virtual server\n# input vars:   vs_name, vs_ip, f5_vs_description,\n#               f5_vs_port, f5_vs_protocol, f5_partition\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\nvs_name = \"@@{calm_application_name}@@\" + \"-vs\"\nvs_ip = \"1.1.1.20\"\nf5_vs_description = \"@@{calm_application_name}@@\" + \" vip\"\nf5_vs_port = \"@@{f5_vs_port}@@\"\nf5_vs_protocol = \"@@{f5_vs_protocol}@@\"\nf5_partition = \"@@{f5_partition}@@\"\n# endregion\n\n\ndef f5_create_vs(api_server, api_server_port, vs_name, vs_ip, f5_vs_description,\n                 f5_vs_port, f5_vs_protocol, f5_partition):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/virtual/\"\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n         'Content-Type': 'application/json'\n    }\n    # endregion\n    create_payload = {\n        \"name\": vs_name,\n        \"partition\": f5_partition,\n        \"description\": f5_vs_description,\n        \"destination\": f5_partition + \"/\" + vs_ip + \":\" + f5_vs_port,\n        \"enabled\": True,\n        \"ipProtocol\": f5_vs_protocol,\n        \"mask\": \"255.255.255.255\",\n        \"source\": \"0.0.0.0/0\",\n        \"sourcePort\": \"preserve\"\n    }\n    print(json.dumps(create_payload))\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, auth='BASIC', params=json.dumps(create_payload),\n                  user=f5_login, passwd=f5_password, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"Virtual Server {} created\".format(result['name']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \nif int(\"@@{calm_array_index}@@\") == 0:\n  f5_create_vs(api_server, api_server_port, vs_name, vs_ip, f5_vs_description,\n             f5_vs_port, f5_vs_protocol, f5_partition)\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "F5UpdateVS",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/11032020 - initial version\n# task_name:    F5UpdateVS\n# description:  Update a virtual server with a pool as a memeber\n# input vars:   pool_name, vs_name, f5_partition\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\npool_name = \"@@{calm_application_name}@@\" + \"-pool\"\nvs_name = \"@@{calm_application_name}@@\" + \"-vs\"\nf5_partition = \"@@{f5_partition}@@\"\n\n# endregion\n\n\ndef f5_update_vs(api_server, api_server_port, pool_name, vs_name, f5_partition, action=\"add\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/virtual/\" + vs_name\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    headers = {\n         'Content-Type': 'application/json'\n    }\n    method = \"PATCH\"\n    # endregion\n    \n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    if action == \"add\":\n        update_payload = {\n            \"pool\": \"/\" + f5_partition + \"/\" + pool_name,\n        }\n        print(\"Adding pool {} into virtual server {}\".format(\n            pool_name, vs_name))\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, auth='BASIC', params=json.dumps(update_payload),\n                      user=f5_login, passwd=f5_password, headers=headers, verify=False)\n    else:\n        print(\"Removing pool {} from virtual server {}\".format(pool_name, vs_name))\n        update_payload = {\n            \"pool\": \"\",\n        }\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, auth='BASIC', params=json.dumps(update_payload),\n                      user=f5_login, passwd=f5_password, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\nf5_update_vs(api_server, api_server_port, pool_name, vs_name, f5_partition, \"add\")\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "5ed345e7_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "f81dd7b2_dag"
                },
                "variable_list": []
              },
              "name": "F5ConfigAdd"
            },
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=F5UpdatePool}",
                      "@{kind=app_task; name=F5DeleteNode}",
                      "@{kind=app_task; name=F5UpdateVS}",
                      "@{kind=app_task; name=F5DeletePool}",
                      "@{kind=app_task; name=F5DeleteVS}"
                    ],
                    "name": "f81dd7b2_dag_cloned_1",
                    "attrs": {
                      "edges": "   ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "F5UpdatePool",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/11032020 - initial version\n# task_name:    F5UpdatePool\n# description:  Update a pool with a new member\n# input vars:   pool_name, f5_pool_members,\n#                   f5_vs_port, f5_member_ip, f5_partition\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\npool_name = \"@@{calm_application_name}@@\" + \"-pool\"\nf5_pool_members = \"@@{vm_name}@@\"\nf5_vs_port = \"@@{f5_vs_port}@@\"\nf5_member_ip = \"@@{address}@@\"\nf5_partition = \"@@{f5_partition}@@\"\n\n# endregion\n\n  \ndef f5_update_pool(api_server, api_server_port, pool_name, f5_pool_members,\n                   f5_vs_port, f5_member_ip, f5_partition, action=\"add\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/pool/\" + pool_name + \"/members/\"\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    headers = {\n         'Content-Type': 'application/json'\n    }\n    # endregion\n    update_payload = {\n        \"name\": \"/\" + f5_partition + \"/\" + f5_pool_members + \":\" + f5_vs_port ,\n    }\n    print(json.dumps(update_payload))\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    if action == \"add\":\n        method = \"POST\"\n        print(\"Adding a new member {} into pool {}\".format(\n            f5_pool_members, pool_name))\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, auth='BASIC', params=json.dumps(update_payload),\n                      user=f5_login, passwd=f5_password, headers=headers, verify=False)\n    else:\n        print(\"Removing member {} from pool {}\".format(f5_pool_members,pool_name))\n        method = \"DELETE\"\n        url = url + f5_pool_members + \":\" + f5_vs_port\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, auth='BASIC',\n                      user=f5_login, passwd=f5_password, headers=headers, verify=False)\n \n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(resp.content)))\n        exit(1)\n    # endregion\n\n\nf5_update_pool(api_server, api_server_port, pool_name, f5_pool_members,\n               f5_vs_port, f5_member_ip, f5_partition, \"remove\")\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "F5DeleteNode",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/10032020 - initial version\n# task_name:    F5DeleteNode\n# description:  Delete a single node\n# input vars:   node_name\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\nnode_name = \"@@{vm_name}@@\"\n# endregion\n\n\ndef f5_delete_node(api_server, api_server_port, node_name):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/node/\" + node_name\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"DELETE\"\n    headers = {\n         'Accept': '*/*'\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, auth='BASIC', user=f5_login, passwd=f5_password, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        print(\"node {} was deleted\".format(node_name))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(resp.content)))\n        exit(1)\n    # endregion\n    \n\nf5_delete_node(api_server, api_server_port, node_name)\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "F5UpdateVS",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/11032020 - initial version\n# task_name:    F5UpdateVS\n# description:  Update a virtual server with a pool as a memeber\n# input vars:   pool_name, vs_name, f5_partition\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\npool_name = \"@@{calm_application_name}@@\" + \"-pool\"\nvs_name = \"@@{calm_application_name}@@\" + \"-vs\"\nf5_partition = \"@@{f5_partition}@@\"\n\n# endregion\n\n\ndef f5_update_vs(api_server, api_server_port, pool_name, vs_name, f5_partition, action=\"add\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/virtual/\" + vs_name\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    headers = {\n         'Content-Type': 'application/json'\n    }\n    method = \"PATCH\"\n    # endregion\n    \n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    if action == \"add\":\n        update_payload = {\n            \"pool\": \"/\" + f5_partition + \"/\" + pool_name,\n        }\n        print(\"Adding pool {} into virtual server {}\".format(\n            pool_name, vs_name))\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, auth='BASIC', params=json.dumps(update_payload),\n                      user=f5_login, passwd=f5_password, headers=headers, verify=False)\n    else:\n        print(\"Removing pool {} from virtual server {}\".format(pool_name, vs_name))\n        update_payload = {\n            \"pool\": \"\",\n        }\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, auth='BASIC', params=json.dumps(update_payload),\n                      user=f5_login, passwd=f5_password, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(resp.content)))\n        exit(1)\n    # endregion\n\nif int(\"@@{calm_array_index}@@\") == 0:\n  f5_update_vs(api_server, api_server_port, pool_name, vs_name, f5_partition, \"remove\")\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "F5DeletePool",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/10032020 - initial version\n# task_name:    F5DeletePool\n# description:  Delete a single node\n# input vars:   pool_name\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\npool_name = \"@@{calm_application_name}@@\" + \"-pool\"\n# endregion\n\n\ndef f5_delete_pool(api_server, api_server_port, pool_name):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/pool/\" + pool_name\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"DELETE\"\n    headers = {\n         'Accept': '*/*'\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, auth='BASIC', user=f5_login, passwd=f5_password, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        print(\"Pool {} was deleted\".format(pool_name))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(resp.content)))\n        exit(1)\n    # endregion\n    \nif int(\"@@{calm_array_index}@@\") == 0:\n  f5_delete_pool(api_server, api_server_port, pool_name)\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "F5DeleteVS",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/10032020 - initial version\n# task_name:    F5DeleteVS\n# description:  Delete a single virtual server\n# input vars:   vs_name\n# output vars:  n/a\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{f5_endpoint}@@\"\nf5_login = \"@@{f5.username}@@\"\nf5_password = \"@@{f5.secret}@@\"\napi_server_port = 8443\nvs_name = \"@@{calm_application_name}@@\" + \"-vs\"\n# endregion\n\n\ndef f5_delete_vs(api_server, api_server_port, pool_name):\n    \n    # region prepare api call\n    api_server_endpoint = \"/mgmt/tm/ltm/virtual/\" + vs_name\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"DELETE\"\n    headers = {\n         'Accept': '*/*'\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, auth='BASIC', user=f5_login, passwd=f5_password, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        print(\"Virtual server {} was deleted\".format(vs_name))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(resp.content)))\n        exit(1)\n    # endregion\n    \nif int(\"@@{calm_array_index}@@\") == 0:\n  f5_delete_vs(api_server, api_server_port, vs_name)\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "5ed345e7_runbook_cloned_0",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "f81dd7b2_dag_cloned_1"
                },
                "variable_list": []
              },
              "name": "F5ConfigRemove"
            },
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=FortigateUpdatePolicy}",
                      "@{kind=app_task; name=FortigateUpdateGroup}",
                      "@{kind=app_task; name=FortigateDelGroup}",
                      "@{kind=app_task; name=FortigateDeleteIpv4}"
                    ],
                    "name": "ee862c77_dag",
                    "attrs": {
                      "edges": "  ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "FortigateUpdatePolicy",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    FortigateUpdatePolicy\n# description:  Update a policy with the specified group as a destination\n# input vars:   fortigate_policy_id\n# output vars:  revision_changed\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\npolicy_id = \"@@{fortigate_policy}@@\".split(\"-\")[0]\ngroup_name = \"@@{calm_application_name}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\naction = \"remove\"\n# endregion\nif \"@@{fortigate_policy}@@\" == \"\":\n  exit(0)\n  \ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'text/plain'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \n\ndef fortiget_get_policies(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie,\n                          group_name, action, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/policy/\" + str(policy_id) + \"?skip=1&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n        'Content-Type': 'application/json',\n    }\n    # endregion\n    \n    # region make api call to get the group members\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        policy_members = result['results'][0]\n        if action == \"add\":\n            policy_members['dstaddr'].append({'name' : group_name})\n        else:\n            policy_members['dstaddr'].remove({'name': group_name, 'q_origin_key': group_name})\n            \n        print(json.dumps(policy_members))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\n    # region prepare api call to update the group\n    method = \"PUT\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"','')\n    headers = {\n        'Content-Type': 'application/json',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(policy_members), cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"revision_changed : {}\".format(result['revision_changed']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \nif int(\"@@{calm_array_index}@@\") == 0:\n  fortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\n  fortiget_get_policies(api_server, api_server_port, fortigate_csrf_token,\n                      fortigate_cookie, group_name, action, fortigate_vdom)\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "FortigateUpdateGroup",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.1/18032020 - initial version\n# task_name:    FortigateUpdateGroup\n# description:  Update fortigate address group with new members\n# input vars:   group_name, vm_name, vm_ip\n# output vars:  revision_changed\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\nvm_name = \"@@{vm_name}@@\"\nvm_ip = \"@@{address}@@\"\ngroup_name = \"@@{calm_application_name}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\ncurrent_instance_nbr = len(\"@@{calm_array_name}@@\".split(\",\"))\naction = \"remove\"\n# endregion\n\nif \"@@{fortigate_policy}@@\" == \"\":\n  exit(0)\n    \ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'plain/text'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        print(resp.content)\n        print(resp.cookies.get('ccsrftoken'))\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\ndef fortiget_update_group(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie,\n                          vm_name, vm_ip, group_name, action, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/addrgrp/\"+ group_name + \"?&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n        'Content-Type': 'application/json',\n    }\n    # endregion\n    \n    # region make api call to get the group members\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        group_members = result['results'][0]\n        current_instance_nbr = len(\"@@{calm_array_name}@@\".split(\",\"))\n        if len(group_members['member']) == 1 and current_instance_nbr == 1:\n            timeout = 300\n            while True:\n\n                current_instance_nbr = len(\"@@{calm_array_name}@@\".split(\",\"))\n                # region prepare api call to update the group\n                method = \"DELETE\"\n                fortigate_csrf_token = fortigate_csrf_token.replace('\"', '')\n                headers = {\n                    'Content-Type': 'application/json',\n                    'X-CSRFTOKEN': fortigate_csrf_token\n                }\n                # endregion\n\n                # region make api call\n                # make the API call and capture the results in the variable called \"resp\"\n                print(\"Making a {} API call to {}\".format(method, url))\n                resp = urlreq(url, verb=method, params=json.dumps(group_members),\n                            cookies=fortigate_cookie, headers=headers, verify=False)\n                print(resp.content)\n                # deal with the result/response\n                if resp.ok:\n                    print(\"Request was successful. Status code: {}\".format(resp.status_code))\n                    result = json.loads(resp.content)\n                    print(\"Group {} was deleted\".format(group_name))\n                    print(\"revision_changed : {}\".format(result['revision_changed']))\n                    break\n                else:\n                    print(\"Object {} doesn't exist\".format(object_name))\n                    timeout -= 15\n                    if timeout == 0:\n                        print(\"Operation timeout\")\n                        exit(1)\n                    sleep(15)\n            # endregion\n            exit(0)\n\n        if action == \"add\":\n            group_members['member'].append({'name': vm_name})\n        else:\n            group_members['member'].remove(\n                {'name': vm_name, 'q_origin_key': vm_name})\n\n        print(json.dumps(group_members))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(\n            json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    current_instance_nbr = len(\"@@{calm_array_name}@@\".split(\",\"))\n    if current_instance_nbr > 1:\n        # region prepare api call to update the group\n        method = \"PUT\"\n        fortigate_csrf_token = fortigate_csrf_token.replace('\"', '')\n        headers = {\n            'Content-Type': 'application/json',\n            'X-CSRFTOKEN': fortigate_csrf_token\n        }\n        # endregion\n\n        # region make api call\n        # make the API call and capture the results in the variable called \"resp\"\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(url, verb=method, params=json.dumps(group_members),\n                    cookies=fortigate_cookie, headers=headers, verify=False)\n        print(resp.content)\n        # deal with the result/response\n        if resp.ok:\n            print(\"Request was successful. Status code: {}\".format(resp.status_code))\n            result = json.loads(resp.content)\n            print(\"revision_changed : {}\".format(result['revision_changed']))\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(\n                json.loads(resp.content), indent=4)))\n            exit(1)\n        # endregion\n\n\nsleep(10)\ncalm_array_index = int('@@{calm_array_index}@@')\nif ((\"@@{app_status}@@\" == \"deleting\") and (calm_array_index == 0)):\n    print(\"Skipping group update on this instance as it is not required\")\n    exit(0)\nelif ((calm_array_index > 0) and (\"@@{app_status}@@\" == \"running\")):\n    print(\"Updating Fortigate group\")\n    fortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                                 api_server_port, fortigate_login, fortigate_password)\n    fortiget_update_group(api_server, api_server_port, fortigate_csrf_token,\n                      fortigate_cookie, vm_name, vm_ip, group_name, action, fortigate_vdom)\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "FortigateDelGroup",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/25032020 - initial version\n# task_name:    FortigateDelGroup\n# description:  delete a group\n# input vars:   group_name\n# output vars:  none\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\ngroup_name = \"@@{calm_application_name}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\n# endregion\n\ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'plain/text'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        #print(resp.content)\n        #print(resp.cookies.get('ccsrftoken'))\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\ndef fortiget_del_group(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie, group_name, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/addrgrp/\"+ group_name + \"?&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"DELETE\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"','')\n    headers = {\n        'Content-Type': 'application/json',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n    \n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n    print(resp.content)\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        print(\"Address group {} was deleted\".format(group_name))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \nsleep(10)\ncalm_array_index = int('@@{calm_array_index}@@')\nif ((\"@@{app_status}@@\" == \"deleting\") and (calm_array_index == 0)):\n    print(\"Deleting Address Group\")\n    fortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                                api_server_port, fortigate_login, fortigate_password)\n\n    fortiget_del_group(api_server, api_server_port, fortigate_csrf_token,\n                      fortigate_cookie, group_name, fortigate_vdom)\n    exit(0)\n    \n\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "FortigateDeleteIpv4",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    FortigateDeleteIpv4\n# description:  Delete an ipv4 address\n# input vars:   fortigate_vm_name\n# output vars:  revision_changed\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate.username}@@\"\nfortigate_password = \"@@{fortigate.secret}@@\"\napi_server_port = 80\nvm_name = \"@@{vm_name}@@\"\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\n# endregion\nif \"@@{fortigate_policy}@@\" == \"\":\n  exit(0)\n  \ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'application/json'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Successfully authenticated\")\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\n\ndef fortiget_delete_ip(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie, vm_name, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/address/\" + vm_name +\"?&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"DELETE\"\n    fortigate_csrf_token = fortigate_csrf_token.replace('\"','')\n    headers = {\n        'Accept': '*/*',\n        'X-CSRFTOKEN': fortigate_csrf_token\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        print(\"revision_changed : {}\".format(result['revision_changed']))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \n\nfortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\nfortiget_delete_ip(api_server, api_server_port, fortigate_csrf_token,\n                   fortigate_cookie, vm_name, fortigate_vdom)\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "bb908a06_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "ee862c77_dag"
                },
                "variable_list": []
              },
              "name": "FortigateConfigRemove"
            },
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=VcSoapGetObjects}",
                      "@{kind=app_task; name=VcSoapCreateVmFolder}",
                      "@{kind=app_task; name=VcSoapMoveVmFolder}"
                    ],
                    "name": "0b51f608_dag",
                    "attrs": {
                      "edges": " ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "VcSoapGetObjects",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       10/03/2020\n# task_name:    VcSoapGetObjects\n# description:  Get list of MOID (Managed Object ID) using the SearchIndex Method\n# input vars:   vc_cookie, api_server, datacenter, cluster, vm_name\n# output vars:  vc_vm_folder_root_id, vc_cluster_id, vc_vm_id\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\napi_server = \"@@{vc_endpoint}@@\"\ndatacenter = \"@@{vc_datacenter}@@\"\ncluster = \"@@{vc_cluster}@@\"\nvm_name = \"@@{name}@@\" #calm macro for the vm's name\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload):\n    r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status Code: {}\".format(r))\n    else:\n        print(\"Request failed\")\n        print(\"Status Code: {}\".format(r))\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(payload))\n        print(\"Response: {}\".format(r.text))\n        resp_parse = ET.fromstring(r.text)\n        for element in resp_parse.iter('*'):\n          if \"faultstring\" in element.tag:\n            print(\"\")\n            print(\"Error: {}\".format(element.text))\n            break\n        exit(1)\n    return r\n# endregion\n\n# region login\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml'}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Login>\n         <_this type=\"SessionManager\">SessionManager</_this>\n         <userName>'''+username+'''</userName>\n         <password>'''+password+'''</password>\n      </Login>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# retreive the cookie\nvc_cookie = resp.headers.get('Set-Cookie').replace('\"','').split(\";\")[0]\n# endregion\n\n# region main processing\n# region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\nbase_payload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n  <soapenv:Body>\n    <FindByInventoryPath>\n      <_this type=\"SearchIndex\">SearchIndex</_this>\n    </FindByInventoryPath>\n  </soapenv:Body>\n</soapenv:Envelope>'''\n# endregion\n\n# region get the vm root folder id (/datacenter_name/vm)\npayload_parse = ET.fromstring(base_payload)\npayload_find = payload_parse.find(\".//{urn:vim25}FindByInventoryPath\")\npayload_push = ET.SubElement(payload_find,\"inventoryPath\")\npayload_push.text = \"/{0}/vm/\".format(datacenter)\npayload = ET.tostring(payload_parse)\n\n# making the call\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# get vm_folder_root_id\nresp_parse = ET.fromstring(resp.text)\nresp_find = resp_parse.findall(\".//{urn:vim25}returnval\")\nif resp_find:\n  for element in resp_find:\n      print(\"vc_vm_folder_root_id={}\".format(element.text))\nelse:\n  print(\"Error, couldn't retreive the object..\")\n  print(\"The object: \"+datacenter+\" doesn't seem to be present, check the provided input\")\n  exit(1) \n# endregion\n\n# region get the cluster id (/datacenter_name/host/cluster_name)\npayload_parse = ET.fromstring(base_payload)\npayload_find = payload_parse.find(\".//{urn:vim25}FindByInventoryPath\")\npayload_push = ET.SubElement(payload_find,\"inventoryPath\")\npayload_push.text = \"/{0}/host/{1}\".format(datacenter, cluster)\npayload = ET.tostring(payload_parse)\n\n# making the call\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# get the cluster_id\nresp_parse = ET.fromstring(resp.text)\nresp_find = resp_parse.findall(\".//{urn:vim25}returnval\")\nif resp_find:\n  for element in resp_find:\n      print(\"vc_cluster_id={}\".format(element.text))\nelse:\n  print(\"Error, couldn't retreive the object..\")\n  print(\"The object: \"+cluster+\" doesn't seem to be present, check the provided input\")\n  exit(1) \n# endregion\n\n# region get the vm id (/datacenter_name/host/vm_name)\npayload_parse = ET.fromstring(base_payload)\npayload_find = payload_parse.find(\".//{urn:vim25}FindByInventoryPath\")\npayload_push = ET.SubElement(payload_find,\"inventoryPath\")\npayload_push.text = \"/{0}/vm/{1}\".format(datacenter, vm_name)\npayload = ET.tostring(payload_parse)\n\n# making the call\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# get vm id\nresp_parse = ET.fromstring(resp.text)\nresp_find = resp_parse.findall(\".//{urn:vim25}returnval\")\nif resp_find:\n  for element in resp_find:\n      print(\"vc_vm_id={}\".format(element.text))\nelse:\n  print(\"Error, couldn't retreive the object..\")\n  print(\"The object: \"+vm_name+\" doesn't seem to be present, check the provided input\")\n  exit(1) \n# endregion\n# endregion\n\n# region logout\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Logout>\n         <_this type=\"SessionManager\">SessionManager</_this>\n      </Logout>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\nexit(0)",
                      "eval_variables": "vc_vm_id vc_cluster_id vc_vm_folder_root_id",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "VcSoapCreateVmFolder",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       10/03/2020\n# task_name:    VcSoapCreateVmFolder\n# description:  Create a vCenter vm folder based on the calm application name\n#               ie: creates the folder at the vm root level (/datacenter/vm/)\n# input vars:   vc_cookie, vm_folder_root_id, vm_folder_name, api_server\n# output vars:  vc_vm_folder_id\n# endregion\n\n# region dealing with Scaling In/Out the application\n# # this script will be executed only on the first Service/Instance\n# (ie: Service[0])\nif \"@@{calm_array_index}@@\" != \"0\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\nvm_folder_root_id = \"@@{vc_vm_folder_root_id}@@\" # retreived from VcSoapGetObjects\nvm_folder_name = \"@@{calm_application_name}@@\"\napi_server = \"@@{vc_endpoint}@@\"\ndatacenter = \"@@{vc_datacenter}@@\"\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload):\n    r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status Code: {}\".format(r))\n    else:\n        print(\"Request failed\")\n        print(\"Status Code: {}\".format(r))\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(payload))\n        print(\"Response: {}\".format(r.text))\n        resp_parse = ET.fromstring(r.text)\n        for element in resp_parse.iter('*'):\n          if \"faultstring\" in element.tag:\n            print(\"\")\n            print(\"Error: {}\".format(element.text))\n            break\n    return r\n# endregion\n\n# region login\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml'}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Login>\n         <_this type=\"SessionManager\">SessionManager</_this>\n         <userName>'''+username+'''</userName>\n         <password>'''+password+'''</password>\n      </Login>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# retreive the cookie\nvc_cookie = resp.headers.get('Set-Cookie').replace('\"','').split(\";\")[0]\n# endregion \n\n#region main processing\n#region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n#endregion\n# region create vm folder\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">  \n<soapenv:Body>\n    <CreateFolder>\n      <_this type=\"Folder\">'''+vm_folder_root_id+'''</_this>\n      <name>'''+vm_folder_name+'''</name>\n    </CreateFolder>\n  </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the call\nprint(\"STEP: Creating the folder...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\nbase_payload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n  <soapenv:Body>\n    <FindByInventoryPath>\n      <_this type=\"SearchIndex\">SearchIndex</_this>\n    </FindByInventoryPath>\n  </soapenv:Body>\n</soapenv:Envelope>'''\nif resp.ok:\n  # print the vm_folder_id\n  resp_parse = ET.fromstring(resp.text)\n  for element in resp_parse.iter('*'):\n      if \"returnval\" in element.tag:\n          print(\"vc_vm_folder_id={}\".format(element.text))\nelif resp.status_code == 500:\n  resp_parse = ET.fromstring(resp.text)\n  for element in resp_parse.iter('*'):\n    if \"faultstring\" in element.tag:\n      if \"already exists\" in element.text:\n        #fetch the existing folder id\n        payload_parse = ET.fromstring(base_payload)\n        payload_find = payload_parse.find(\".//{urn:vim25}FindByInventoryPath\")\n        payload_push = ET.SubElement(payload_find,\"inventoryPath\")\n        payload_push.text = \"/{0}/vm/{1}\".format(datacenter,vm_folder_name)\n        payload = ET.tostring(payload_parse)\n\n        # making the call\n        print(\"STEP: Fetching folder object id...\")\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = process_request(url, method, headers, payload)\n\n        # get vm_folder_root_id\n        resp_parse = ET.fromstring(resp.text)\n        resp_find = resp_parse.findall(\".//{urn:vim25}returnval\")\n        if resp_find:\n          for element in resp_find:\n              print(\"vc_vm_folder_id={}\".format(element.text))\n              exit(0)\n        else:\n          print(\"Error, couldn't retrieve the folder object..\")\n          exit(1)\nelse:\n  exit(1)\n#endregion\n#endregion\n\n# region logout\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Logout>\n         <_this type=\"SessionManager\">SessionManager</_this>\n      </Logout>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\nexit(0)",
                      "eval_variables": "vc_vm_folder_id",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "VcSoapMoveVmFolder",
                    "attrs": {
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       10/03/2020\n# task_name:    VcSoapMoveVmFolder\n# description:  Move a VM in a folder\n# input vars:   vc_cookie, api_server, vm_folder_id, vm_id\n# output vars:  none\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\nvm_folder_id = \"@@{calm_array_vc_vm_folder_id}@@\" #retreived from VcSoapCreateVmFolder\napi_server = \"@@{vc_endpoint}@@\"\nvm_id = \"@@{vc_vm_id}@@\" #retreived from VcSoapGetObjects\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload):\n    r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status Code: {}\".format(r))\n    else:\n        print(\"Request failed\")\n        print(\"Status Code: {}\".format(r))\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(payload))\n        print(\"Response: {}\".format(r.text))\n        resp_parse = ET.fromstring(r.text)\n        for element in resp_parse.iter('*'):\n          if \"faultstring\" in element.tag:\n            print(\"\")\n            print(\"Error: {}\".format(element.text))\n            break\n        exit(1)\n    return r\n# endregion\n\n# region login\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml'}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Login>\n         <_this type=\"SessionManager\">SessionManager</_this>\n         <userName>'''+username+'''</userName>\n         <password>'''+password+'''</password>\n      </Login>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# retreive the cookie\nvc_cookie = resp.headers.get('Set-Cookie').replace('\"','').split(\";\")[0]\n# endregion \n\n# region main processing\n# region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n# endregion\n\n# region move vm to folder\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n    <soapenv:Body>\n        <MoveIntoFolder_Task>\n            <_this type=\"Folder\">'''+vm_folder_id+'''</_this>\n        </MoveIntoFolder_Task>\n    </soapenv:Body>\n</soapenv:Envelope>'''\n\n# add vm to the payload\npayload_parse = ET.fromstring(payload)\npayload_find = payload_parse.find(\".//{urn:vim25}MoveIntoFolder_Task\")\npayload_push = ET.SubElement(payload_find,\"list\")\npayload_push.attrib[\"type\"] = \"VirtualMachine\"\npayload_push.text = vm_id\npayload = ET.tostring(payload_parse)\n\n# making the call\nprint(\"STEP: Moving vm to folder...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\n# print the task id\nresp_parse = ET.fromstring(resp.text)\nfor element in resp_parse.iter('*'):\n    if \"returnval\" in element.tag:\n        print(\"Task is: {}\".format(element.text))\n# endregion\n\n# region logout\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Logout>\n         <_this type=\"SessionManager\">SessionManager</_this>\n      </Logout>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\nexit(0)",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "90dbfa0f_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "0b51f608_dag"
                },
                "variable_list": []
              },
              "name": "VcAddFolder"
            },
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=VcSoapMoveVmFolder}",
                      "@{kind=app_task; name=VcSoapVmDelFolder}"
                    ],
                    "name": "2a52713a_dag",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "VcSoapMoveVmFolder",
                    "attrs": {
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       10/03/2020\n# task_name:    VcSoapMoveVmFolder\n# description:  Move a VM in a folder\n# input vars:   vc_cookie, api_server, vm_folder_id, vm_id\n# output vars:  none\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\nvm_folder_id = \"@@{vc_vm_folder_root_id}@@\" # root folder used during deletion\napi_server = \"@@{vc_endpoint}@@\"\nvm_id = \"@@{vc_vm_id}@@\" #retreived from VcSoapGetObjects\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload):\n    r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status Code: {}\".format(r))\n    else:\n        print(\"Request failed\")\n        print(\"Status Code: {}\".format(r))\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(payload))\n        print(\"Response: {}\".format(r.text))\n        resp_parse = ET.fromstring(r.text)\n        for element in resp_parse.iter('*'):\n          if \"faultstring\" in element.tag:\n            print(\"\")\n            print(\"Error: {}\".format(element.text))\n            break\n        exit(1)\n    return r\n# endregion\n\n# region login\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml'}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Login>\n         <_this type=\"SessionManager\">SessionManager</_this>\n         <userName>'''+username+'''</userName>\n         <password>'''+password+'''</password>\n      </Login>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# retreive the cookie\nvc_cookie = resp.headers.get('Set-Cookie').replace('\"','').split(\";\")[0]\n# endregion \n\n# region main processing\n# region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n# endregion\n\n# region move vm to folder\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n    <soapenv:Body>\n        <MoveIntoFolder_Task>\n            <_this type=\"Folder\">'''+vm_folder_id+'''</_this>\n        </MoveIntoFolder_Task>\n    </soapenv:Body>\n</soapenv:Envelope>'''\n\n# add vm to the payload\npayload_parse = ET.fromstring(payload)\npayload_find = payload_parse.find(\".//{urn:vim25}MoveIntoFolder_Task\")\npayload_push = ET.SubElement(payload_find,\"list\")\npayload_push.attrib[\"type\"] = \"VirtualMachine\"\npayload_push.text = vm_id\npayload = ET.tostring(payload_parse)\n\n# making the call\nprint(\"STEP: Moving vm to folder...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\n# print the task id\nresp_parse = ET.fromstring(resp.text)\nfor element in resp_parse.iter('*'):\n    if \"returnval\" in element.tag:\n        print(\"Task is: {}\".format(element.text))\n# endregion\n\n# region logout\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Logout>\n         <_this type=\"SessionManager\">SessionManager</_this>\n      </Logout>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\nexit(0)",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "VcSoapVmDelFolder",
                    "attrs": {
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       10/03/2020\n# task_name:    VcSoapDeleteFolder\n# description:  Delete a VM Folder \n#               IMPORTANT: All VMs has to be moved from the folder\n#               before deletion, otherwise the folder won't be deleted\n# input vars:   vc_cookie, api_server, vm_folder_id\n# output vars:  none\n# endregion\n\n# region dealing with Scaling In/Out the application\n# # this script will be executed only on the first Service/Instance\n# (ie: Service[0])\nif \"@@{calm_array_index}@@\" != \"0\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\nvm_folder_id = \"@@{vc_vm_folder_id}@@\" #retreived from VcSoapGetObjects\napi_server = \"@@{vc_endpoint}@@\"\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload):\n    r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status Code: {}\".format(r))\n    else:\n        print(\"Request failed\")\n        print(\"Status Code: {}\".format(r))\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(payload))\n        print(\"Response: {}\".format(r.text))\n        resp_parse = ET.fromstring(r.text)\n        for element in resp_parse.iter('*'):\n          if \"faultstring\" in element.tag:\n            print(\"\")\n            print(\"Error: {}\".format(element.text))\n            break\n        exit(1)\n    return r\n# endregion\n\n# region login\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml'}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Login>\n         <_this type=\"SessionManager\">SessionManager</_this>\n         <userName>'''+username+'''</userName>\n         <password>'''+password+'''</password>\n      </Login>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# retreive the cookie\nvc_cookie = resp.headers.get('Set-Cookie').replace('\"','').split(\";\")[0]\n# endregion\n\n# region main processing\n# region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n#endregion\n\n# region delete the folder\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">  \n  <soapenv:Body>\n    <Destroy_Task>\n      <_this type=\"Folder\">'''+vm_folder_id+'''</_this>\n    </Destroy_Task>\n  </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the call\nprint(\"STEP: Deleting vm folder...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n#endregion\n\n# print the task id\nresp_parse = ET.fromstring(resp.text)\nfor element in resp_parse.iter('*'):\n    if \"returnval\" in element.tag:\n        print(\"Task is: {}\".format(element.text))\n# endregion\n\n# region logout\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Logout>\n         <_this type=\"SessionManager\">SessionManager</_this>\n      </Logout>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\nexit(0)",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "9aa10176_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "2a52713a_dag"
                },
                "variable_list": []
              },
              "name": "VcDelFolder"
            },
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=VcRestCreateTag}",
                      "@{kind=app_task; name=VcRestTagAssociation}"
                    ],
                    "name": "13262e11_dag",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "VcRestCreateTag",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       10/03/2020\n# task_name:    VcRestCreateTag\n# description:  Create a vCenter Tag\n#               Important: A category needs to be created first\n#               The script creates a Category and a Tag\n# input vars:   vc_cookie, api_server, vc_category_name, vc_tag_name\n#               vc_category_description, vc_tag_description\n# output vars:  vc_tag_id, vc_category_id\n# endregion\n\n# region dealing with Scaling In/Out the application\n# # this script will be executed only on the first Service/Instance\n# (ie: Service[0])\nif \"@@{calm_array_index}@@\" != \"0\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\napi_server = \"@@{vc_endpoint}@@\"\nvc_category_name = \"@@{jira_parent_ticket}@@\"\nvc_category_description = \"@@{jira_parent_ticket}@@ - Provisionned Through Calm\"\nvc_tag_name = \"@@{jira_parent_ticket}@@\"\nvc_tag_description = \"@@{jira_parent_ticket}@@ - Provisionned Through Calm\"  \n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n        if (r.content and ('/rest/com/vmware/cis/session' not in url)):\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n    elif ((r.status_code == 400) and (json.loads(r.content)['type'] == 'com.vmware.vapi.std.errors.already_exists')):\n        print(\"Status code: {}\".format(r.status_code))\n        print(\"Object already exists: skipping\")\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/com/vmware/cis/session\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\nvc_cookie = resp.headers.get('Set-Cookie').split(\";\")[0]\n# endregion\n\n# prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/com/vmware/cis/tagging\"\nmethod = \"POST\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Cookie': vc_cookie}\n\npayload = {\n\"create_spec\": {\n    \"associable_types\": [],\n    \"cardinality\": \"SINGLE\",\n    \"description\": vc_category_description,\n    \"name\": vc_category_name\n    }\n}\n\n# make the api call\nprint(\"STEP: Creating category...\")\nurl = \"{}/category\".format(base_url)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\nif resp.status_code == 400:\n    # category already exists, so we need to get its object id\n    method = \"GET\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    categories = process_request(url, method, headers)\n    categories_parsed = json.loads(categories.content)\n    vc_category_id = \"\"\n    for category in categories_parsed['value']:\n        category_url = \"{}/id:{}\".format(url,category)\n        print(\"Making a {} API call to {}\".format(method, category_url))\n        category_object = process_request(category_url, method, headers)\n        category_parse = json.loads(category_object.content)\n        if category_parse['value']['name'] == vc_category_name:\n            vc_category_id = category_parse['value']['id']\n            break\nelse:\n    vc_category_id = format(json.loads(resp.content)['value'])\n# endregion\n\n# region create vcenter tag\npayload = {\n\"create_spec\": {\n    \"category_id\": vc_category_id,\n    \"description\": vc_tag_description,\n    \"name\": vc_tag_name\n    }\n}\n\n# make the api call\nprint(\"STEP: Creating tag...\")\nurl = \"{}/tag\".format(base_url)\nmethod = \"POST\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\nif resp.status_code == 400:\n    # category already exists, so we need to get its object id\n    method = \"GET\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    tags = process_request(url, method, headers)\n    tags_parsed = json.loads(tags.content)\n    vc_tag_id = \"\"\n    for tag in tags_parsed['value']:\n        tag_url = \"{}/id:{}\".format(url,tag)\n        print(\"Making a {} API call to {}\".format(method, category_url))\n        tag_object = process_request(tag_url, method, headers)\n        tag_parse = json.loads(tag_object.content)\n        if tag_parse['value']['name'] == vc_tag_name:\n            vc_tag_id = tag_parse['value']['id']\n            break\nelse:\n    vc_tag_id = format(json.loads(resp.content)['value'])\n#endregion\n\n# pass the created tag in vc_tag_id so that it may be captured by Calm.\nprint(\"vc_category_id={}\".format(vc_category_id))\nprint(\"vc_tag_id={}\".format(vc_tag_id))\n# endregion\n\n# region logout\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/com/vmware/cis/session\"\nmethod = \"DELETE\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Cookie': vc_cookie}\n\n# making the call \nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n# endregion\n\nexit(0)",
                      "eval_variables": "vc_tag_id vc_category_id",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "VcRestTagAssociation",
                    "attrs": {
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       10/03/2020\n# task_name:    VcRestTagAssociation\n# description:  Attach or Detach a tag from/to one VM\n# input vars:   vc_cookie, api_server, vc_tag_id, vc_tag_action, vm_id\n# output vars:  none\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\napi_server = \"@@{vc_endpoint}@@\"\nvc_tag_id= \"@@{calm_array_vc_tag_id}@@\" # retreived from VcRestCreateTag\nvc_tag_action = \"attach\" #attach / detach\nvm_id = \"@@{vc_vm_id}@@\" #retreived from VcSoapGetObjects\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n        if (r.content and ('/rest/com/vmware/cis/session' not in url)):\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n    elif ((r.status_code == 400) and (json.loads(r.content)['type'] == 'com.vmware.vapi.std.errors.already_exists')):\n        print(\"Status code: {}\".format(r.status_code))\n        print(\"Object already exists: skipping\")\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/com/vmware/cis/session\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\nvc_cookie = resp.headers.get('Set-Cookie').split(\";\")[0]\n# endregion\n\n# region main processing\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/com/vmware/cis/tagging/tag-association/id\"\nmethod = \"POST\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Cookie': vc_cookie}\n# endregion\n\n# region tag association\nobject_id = {}\nobject_id['id'] = vm_id\nobject_id['type'] = \"VirtualMachine\"\npayload = {\n    \"object_id\" : object_id\n    }\n\n# make the api call\nprint(\"STEP: Doing tag attach/detach...\")\nurl = \"{0}:{1}?~action={2}\".format(base_url, vc_tag_id, vc_tag_action)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n#endregion\n#endregion\n\n# region logout\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/com/vmware/cis/session\"\nmethod = \"DELETE\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Cookie': vc_cookie}\n\n# making the call \nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n# endregion\n\nexit(0)",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "3dcfda7d_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "13262e11_dag"
                },
                "variable_list": []
              },
              "name": "VcAddTag"
            },
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=VcRestDeleteTag}"
                    ],
                    "name": "4709d404_dag",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "VcRestDeleteTag",
                    "attrs": {
                      "script": "#script\n# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       10/03/2020\n# task_name:    VcRestDeleteTag\n# description:  Deletes a tag\n#               This script deletes a tag and his associated category\n# input vars:   vc_cookie, api_server, vc_tag_id, vc_category_id\n# output vars:  none\n# endregion\n\n# region dealing with Scaling In/Out the application\n# # this script will be executed only on the first Service/Instance\n# (ie: Service[0])\nif \"@@{calm_array_index}@@\" != \"0\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\napi_server = \"@@{vc_endpoint}@@\"\nvc_tag_id = \"@@{vc_tag_id}@@\" #retreived from VcRestCreateTag\nvc_category_id = \"@@{vc_category_id}@@\" #retreived from VcRestCreateTag\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n        if (r.content and ('/rest/com/vmware/cis/session' not in url)):\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n    elif ((r.status_code == 400) and (json.loads(r.content)['type'] == 'com.vmware.vapi.std.errors.already_exists')):\n        print(\"Status code: {}\".format(r.status_code))\n        print(\"Object already exists: skipping\")\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        #print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/com/vmware/cis/session\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\nvc_cookie = resp.headers.get('Set-Cookie').split(\";\")[0]\n# endregion\n\n# region main processing\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/com/vmware/cis/tagging\"\nmethod = \"DELETE\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Cookie': vc_cookie}\npayload = {}\n#endregion\n\n# region delete tag\nprint(\"STEP: Deleting tag...\")\nurl = '{0}/tag/id:{1}'.format(base_url,vc_tag_id)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\n# region delete category\nprint(\"STEP: Deleting category...\")\nurl = '{0}/category/id:{1}'.format(base_url,vc_category_id)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n# endregion\n\n# region logout\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/com/vmware/cis/session\"\nmethod = \"DELETE\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Cookie': vc_cookie}\n\n# making the call \nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n# endregion\n\nexit(0)",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "65d2b330_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "4709d404_dag"
                },
                "variable_list": []
              },
              "name": "VcDelTag"
            },
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=VcSoapCreateVmDrsRules}",
                      "@{kind=app_task; name=VcSoapUpdateVmDrsRules}"
                    ],
                    "name": "546301a1_dag",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "VcSoapCreateVmDrsRules",
                    "attrs": {
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       10/03/2020\n# task_name:    VcSoapCreateVmDrsRules\n# description:  Create a ClusterAntiAffinity Rules (Separate VMs)\n#               The rules creation requires at least 2 VMs\n# input vars:   vc_cookie, api_server, cluster_id, vms_id\n#               drs_rule_name, drs_operation,\n# output vars:  none\n# endregion\n\n# region dealing with Scaling In/Out the application\n# this script will be executed only on the second Service/Instance\n# (ie: Service[1])\nif \"@@{calm_array_index}@@\" != \"1\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\ncluster_id = \"@@{vc_cluster_id}@@\" #retreived from VcGSoapetObjects\ndrs_rule_name = \"@@{calm_application_name}@@\"\ndrs_operation = \"add\" #add / edit / remove\napi_server = \"@@{vc_endpoint}@@\"\nvms_id = \"@@{calm_array_vc_vm_id}@@\"\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload):\n    r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status Code: {}\".format(r))\n    else:\n        print(\"Request failed\")\n        print(\"Status Code: {}\".format(r))\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(payload))\n        print(\"Response: {}\".format(r.text))\n        resp_parse = ET.fromstring(r.text)\n        for element in resp_parse.iter('*'):\n          if \"faultstring\" in element.tag:\n            print(\"\")\n            print(\"Error: {}\".format(element.text))\n            break\n        exit(1)\n    return r\n# endregion\n\n# region login\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml'}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Login>\n         <_this type=\"SessionManager\">SessionManager</_this>\n         <userName>'''+username+'''</userName>\n         <password>'''+password+'''</password>\n      </Login>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# retreive the cookie\nvc_cookie = resp.headers.get('Set-Cookie').replace('\"','').split(\";\")[0]\n# endregion\n\n# region main processing\n# region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n# endregion\n\n# region create the drs rules\npayload ='''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> \n  <soapenv:Body> \n    <ReconfigureComputeResource_Task>  \n      <_this type=\"ClusterComputeResource\">'''+cluster_id+'''</_this>  \n      <spec xsi:type=\"ClusterConfigSpecEx\">  \n        <rulesSpec> \n          <operation>'''+drs_operation+'''</operation>\n          <info xsi:type=\"ClusterAntiAffinityRuleSpec\"> \n            <enabled>true</enabled>  \n            <name>'''+drs_rule_name+'''</name>  \n            <userCreated>true</userCreated>\n          </info> \n        </rulesSpec>  \n      </spec>  \n      <modify>true</modify> \n    </ReconfigureComputeResource_Task> \n  </soapenv:Body> \n</soapenv:Envelope>'''\n\n# add vms to the payload\npayload_parse = ET.fromstring(payload)\npayload_find = payload_parse.find(\".//{urn:vim25}info\")\nfor vm in vms_id.split(\",\"):\n    payload_push = ET.SubElement(payload_find,\"vm\")\n    payload_push.attrib[\"type\"] = \"VirtualMachine\"\n    payload_push.text = vm\npayload = ET.tostring(payload_parse)\n\n# making the call\nprint(\"STEP: Creating anti-affinity drs rules for vms...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\n# print the task id\nresp_parse = ET.fromstring(resp.text)\nfor element in resp_parse.iter('*'):\n    if \"returnval\" in element.tag:\n        print(\"Task is: {}\".format(element.text))\n# endregion\n\n# region logout\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Logout>\n         <_this type=\"SessionManager\">SessionManager</_this>\n      </Logout>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\nexit (0)",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "VcSoapUpdateVmDrsRules",
                    "attrs": {
                      "script": "# * author:     igor.zecevic@nutanix.com, stephane.bourdeaud@nutanix.com\n# * version:    v1.0 - initial version (igor)\n# *             v1.1 - added login/logout (stephane)\n# * date:       17/03/2020\n# task_name:    VcSoapUpdateVmDrsRules\n# description:  Update a ClusterAntiAffinity Rules (Separate VMs)\n#               This script retreives an existing drs rules and update it\n#               Add a VM into an existing drs rules using drs_vm_update=add\n#               Remove a VM from an existing drs rules using drs_vm_update=remove\n# input vars:   vc_cookie, api_server, cluster_id, vm_id\n#               drs_rule_name, drs_operation, drs_vm_update\n# output vars:  none\n# endregion\n\n# region dealing with Scaling In/Out the application\nnb_replicas = str(len(\"@@{calm_array_name}@@\".split(\",\")) - 1)\nif ((\"@@{calm_array_index}@@\" != nb_replicas) or (\"@@{calm_array_index}@@\" < \"2\")):\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\ncluster_id = \"@@{vc_cluster_id}@@\" #retreived from VcSoapGetObjects\ndrs_rule_name = \"@@{calm_application_name}@@\"\ndrs_operation = \"edit\" #add / edit / remove\ndrs_vm_update = \"add\" #add or remove VM from drsrules\napi_server = \"@@{vc_endpoint}@@\"\nvm_id = \"@@{vc_vm_id}@@\"  #retreived from VcSoapGetObjects\nref_vm_list = \"@@{calm_array_vc_vm_id}@@\".split(\",\")\n# endregion\n\n#region API call function\ndef process_request(url, method, headers, payload):\n    r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status Code: {}\".format(r))\n    else:\n        print(\"Request failed\")\n        print(\"Status Code: {}\".format(r))\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(payload))\n        print(\"Response: {}\".format(r.text))\n        resp_parse = ET.fromstring(r.text)\n        for element in resp_parse.iter('*'):\n          if \"faultstring\" in element.tag:\n            print(\"\")\n            print(\"Error: {}\".format(element.text))\n            break\n        exit(1)\n    return r\n#endregion\n\n#region login\n#region prepare login API call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml'}\n#endregion\n\n#region login API call\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Login>\n         <_this type=\"SessionManager\">SessionManager</_this>\n         <userName>'''+username+'''</userName>\n         <password>'''+password+'''</password>\n      </Login>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# pass the cookie in vc_soap_session so that it may be captured by Calm.\nvc_cookie = resp.headers.get('Set-Cookie').replace('\"','').split(\";\")[0]\n#endregion\n#endregion\n\n#region main processing\n# region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n# endregion\n\n# region get application drs rules\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n   <soapenv:Body> \n    <RetrieveProperties>  \n      <_this xsi:type=\"ManagedObjectReference\" type=\"PropertyCollector\">propertyCollector</_this>  \n      <specSet> \n        <propSet> \n          <type>ClusterComputeResource</type>  \n          <all>false</all>  \n          <pathSet>configuration.rule</pathSet>\n        </propSet>  \n        <objectSet> \n          <obj xsi:type=\"ManagedObjectReference\" type=\"ClusterComputeResource\">'''+cluster_id+'''</obj>  \n          <skip>false</skip> \n        </objectSet> \n      </specSet> \n    </RetrieveProperties> \n  </soapenv:Body> \n</soapenv:Envelope>'''\n\n# make the api call\nprint(\"STEP: Fetching drs rule...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# getting drs rules\nresp_parse = ET.fromstring(resp.text)\npayload_find = resp_parse.findall(\".//{urn:vim25}ClusterRuleInfo\")\nfor element in payload_find:\n    for name in element.findall(\"{urn:vim25}name\"):\n        if name.text == drs_rule_name:\n            print(\"Found DRS rule: {}\".format(name.text))\n            vm_list = []\n            drs_rule_key = format(element.find(\"{urn:vim25}key\").text)\n            drs_rule_element = element #this element will be pushed to the update drs rules\n            for vm in element.findall(\"{urn:vim25}vm\"):\n                print(\"This vm is a member of the drs rule: {}\".format(vm.text))\n                vm_list.append(vm.text)\n\nvms_to_add = list(set(ref_vm_list) - set(vm_list))\nprint(\"The following vms are not in DRS: {}\".format(vms_to_add))\ntry:\n    drs_rule_key\n    drs_rule_element\nexcept:\n    for element in payload_find:\n        for name in element.findall(\"{urn:vim25}name\"):\n            print(\"Existing DRS rule: {}\".format(name.text))\n    print(\"Could not find drs rule!\")\n    exit(1)\n# endregion\n\n# region update drs rules\npayload ='''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> \n  <soapenv:Body> \n    <ReconfigureComputeResource_Task>  \n      <_this type=\"ClusterComputeResource\">'''+cluster_id+'''</_this>\n        <spec xsi:type=\"ClusterConfigSpecEx\">\n          <rulesSpec> \n            <operation>'''+drs_operation+'''</operation>\n          </rulesSpec>  \n        </spec>  \n      <modify>true</modify> \n    </ReconfigureComputeResource_Task> \n  </soapenv:Body> \n</soapenv:Envelope>'''\n\n# push the retreived drs_rule_obj into the payload\npayload_parse = ET.fromstring(payload)\npayload_find = payload_parse.find(\".//{urn:vim25}rulesSpec\")\npayload_push = ET.SubElement(payload_find,\"info\")\npayload_push.attrib[\"xsi:type\"]=\"ClusterAntiAffinityRuleSpec\"\nfor element in drs_rule_element:\n    payload_push.append(element)\n\n# push the drs_vm_update to the payload (either add or delete vm)\nif drs_vm_update == \"add\":\n      for vm in vms_to_add:\n            print (\"Adding vm {}\".format(vm))\n            vm_push = ET.SubElement(payload_push,\"vm\")\n            vm_push.attrib[\"type\"]=\"VirtualMachine\"\n            vm_push.text = vm\nelif drs_vm_update == \"remove\":\n  for element in drs_rule_element:\n      if element.text == vm_id:\n        payload_push.remove(element)\n\n# make the api call\nprint(\"STEP: Updating drs rule...\")\npayload = ET.tostring(payload_parse)\n#print(\"payload: {}\".format(payload))\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n# endregion\n\n#region logout\n#region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n#endregion\n\n#region logout API call\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Logout>\n         <_this type=\"SessionManager\">SessionManager</_this>\n      </Logout>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n#endregion\n#endregion\n\nexit(0)",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "895cec1a_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "546301a1_dag"
                },
                "variable_list": []
              },
              "name": "VcAddDrsRules"
            },
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=VcSoapDeleteVmDrsRules}"
                    ],
                    "name": "aa79d30e_dag",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "VcSoapDeleteVmDrsRules",
                    "attrs": {
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       10/03/2020\n# task_name:    VcSoapDeleteVmDrsRules\n# description:  Deletes a ClusterAntiAffinityRules (Separates VMs)\n#               This script retreives an existing drs rules and deletes it           \n# input vars:   vc_cookie, api_server, cluster_id, vms_id\n#               drs_rule_name, drs_operation, vms_id\n# output vars:  none\n# endregion\n\n# region dealing with Scaling In/Out the application\n# this script will be executed only on the second Service/Instance\n# (ie: Service[1])\nif \"@@{calm_array_index}@@\" != \"1\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{vc.username}@@\"\npassword = \"@@{vc.secret}@@\"\ncluster_id = \"@@{vc_cluster_id}@@\" #retreived from VcSoapGetObjects\ndrs_rule_name = \"@@{calm_application_name}@@\"\ndrs_operation = \"remove\" #add / edit / remove\napi_server = \"@@{vc_endpoint}@@\"\nvms_id = \"@@{calm_array_vc_vm_id}@@\"\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload):\n    r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status Code: {}\".format(r))\n    else:\n        print(\"Request failed\")\n        print(\"Status Code: {}\".format(r))\n        print(\"Headers: {}\".format(headers))\n        print(\"Payload: {}\".format(payload))\n        print(\"Response: {}\".format(r.text))\n        resp_parse = ET.fromstring(r.text)\n        for element in resp_parse.iter('*'):\n          if \"faultstring\" in element.tag:\n            print(\"\")\n            print(\"Error: {}\".format(element.text))\n            break\n        exit(1)\n    return r\n# endregion\n\n# region login\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml'}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Login>\n         <_this type=\"SessionManager\">SessionManager</_this>\n         <userName>'''+username+'''</userName>\n         <password>'''+password+'''</password>\n      </Login>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging in to vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# retreive the cookie\nvc_cookie = resp.headers.get('Set-Cookie').replace('\"','').split(\";\")[0]\n# endregion\n\n# region main processing\n# region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n# endregion\n\n# region get application drs rules\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n   <soapenv:Body> \n    <RetrieveProperties>  \n      <_this xsi:type=\"ManagedObjectReference\" type=\"PropertyCollector\">propertyCollector</_this>  \n      <specSet> \n        <propSet> \n          <type>ClusterComputeResource</type>  \n          <all>false</all>  \n          <pathSet>configuration.rule</pathSet>\n        </propSet>  \n        <objectSet> \n          <obj xsi:type=\"ManagedObjectReference\" type=\"ClusterComputeResource\">'''+cluster_id+'''</obj>  \n          <skip>false</skip> \n        </objectSet> \n      </specSet> \n    </RetrieveProperties> \n  </soapenv:Body> \n</soapenv:Envelope>'''\n\n# make the api call\nprint(\"STEP: Fetching drs rule...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n\n# getting drs rules\nresp_parse = ET.fromstring(resp.text)\npayload_find = resp_parse.findall(\".//{urn:vim25}ClusterRuleInfo\")\nfor element in payload_find:\n    for name in element.findall(\"{urn:vim25}name\"):\n        if name.text == drs_rule_name:\n            drs_rule_key = format(element.find(\"{urn:vim25}key\").text)\n# endregion\n\n# region prepare api call\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\n# endregion\n\n# region delete drs rules\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> \n  <soapenv:Body> \n    <ReconfigureComputeResource_Task>  \n      <_this type=\"ClusterComputeResource\">'''+cluster_id+'''</_this>  \n        <spec xsi:type=\"ClusterConfigSpecEx\">  \n        <rulesSpec> \n          <operation>'''+drs_operation+'''</operation>\n          <removeKey xsi:type=\"int\">'''+drs_rule_key+'''</removeKey>\n          <info xsi:type=\"ClusterAntiAffinityRuleSpec\">\n            <enabled>true</enabled>   \n            <userCreated>true</userCreated>\n          </info> \n        </rulesSpec>  \n      </spec>  \n      <modify>true</modify> \n    </ReconfigureComputeResource_Task> \n  </soapenv:Body> \n</soapenv:Envelope>'''\n# endregion\n\n# region add vms to the payload\npayload_parse = ET.fromstring(payload)\npayload_find = payload_parse.find(\".//{urn:vim25}info\")\nfor vm in vms_id.split(\",\"):\n    payload_push = ET.SubElement(payload_find,\"vm\")\n    payload_push.attrib[\"type\"] = \"VirtualMachine\"\n    payload_push.text = vm\npayload = ET.tostring(payload_parse)\n\n# make the api call\nprint(\"STEP: Deleting drs rule...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\n# print the task id\nfor element in resp_parse.iter('*'):\n    if \"returnval\" in element.tag:\n        print(\"Task is: {}\".format(element.text))\n#endregion\n\n# region logout\nET = xml.etree.ElementTree\napi_server_port = \"443\"\napi_server_endpoint = \"/sdk/vimService.wsdl\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/xml', 'Accept': 'application/xml', 'Cookie': vc_cookie}\npayload = '''\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:vim25\">\n   <soapenv:Body>\n      <Logout>\n         <_this type=\"SessionManager\">SessionManager</_this>\n      </Logout>\n   </soapenv:Body>\n</soapenv:Envelope>'''\n\n# making the api call\nprint(\"STEP: Logging out of vCenter...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\nexit (0)",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "e7f388fd_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "aa79d30e_dag"
                },
                "variable_list": []
              },
              "name": "VcDelDrsRules"
            },
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=VeeamGetHierarchyRoots}",
                      "@{kind=app_task; name=VeeamGetRepository}",
                      "@{kind=app_task; name=VeeamCloneJob}",
                      "@{kind=app_task; name=VeeamEditJob}"
                    ],
                    "name": "77f0eedb_dag",
                    "attrs": {
                      "edges": "  ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "VeeamGetHierarchyRoots",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       11/03/2020\n# task_name:    VeeamGetHierarchyRoots\n# description:  Get the hierarchyRoot UID\n#               The script retreives the hierarchyRoots UID\n# input vars:   vc_server, api_server, username, password\n# output vars:  veeam_hierarchyroot_uid\n# endregion\n\n# region dealing with Scaling In/Out the application\n# # this script will be executed only on the first Service/Instance\n# (ie: Service[0])\nif \"@@{calm_array_index}@@\" != \"0\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{veeam.username}@@\"\npassword = \"@@{veeam.secret}@@\"\napi_server = \"@@{veeam_endpoint}@@\"\nvc_server = \"@@{vc_endpoint}@@\"\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/sessionMngr/?v=latest\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to Veeam...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the session_cookie and session_id\nresp_parse = json.loads(resp.content)\nveeam_session_cookie = resp.headers.get('X-RestSvcSessionId')\nveeam_session_id = resp_parse['SessionId']\n# endregion\n\n# region main processing\n# region prepare api call\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/hierarchyRoots\"\nmethod = \"GET\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n# endregion\n\n# region get hierarchyroot (managed vcenter server)\n# make the api call\nprint(\"STEP: Gettings hiearchyroots...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the repo_uid so that it may be captured by Calm.\nobj_uid = \"\"\nresp_parse = json.loads(resp.content)\nfor obj in resp_parse['Refs']:\n    if obj['Name'] == vc_server:\n                obj_uid = obj['UID']               \nif obj_uid:\n    print (\"veeam_hierarchyroot_uid={}\".format(obj_uid.rsplit(':', 1)[1]))\nelse:\n    print(\"Error: Managed Server \"+vc_server+\" is not present ..\")\n    exit(1)\n# endregion\n# endregion\n\n# region logout\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/logonSessions\"\nmethod = \"DELETE\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n\n# making the call \nprint(\"STEP: Logging out of Veeam...\")\nurl = \"{0}/{1}\".format(url, veeam_session_id)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n# endregion\n\nexit(0)",
                      "eval_variables": "veeam_hierarchyroot_uid",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "VeeamGetRepository",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       11/03/2020\n# task_name:    VeeamGetRepository\n# description:  Get Repository UID\n#               The script retreives the repository uid\n#               based on the provided repository's name\n# input vars:   veeam_job_name, username, password\n#               veeam_repo_name, api_server\n# output vars:  veeam_repo_uid\n# endregion\n\n# region dealing with Scaling In/Out the application\n# # this script will be executed only on the first Service/Instance\n# (ie: Service[0])\nif \"@@{calm_array_index}@@\" != \"0\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{veeam.username}@@\"\npassword = \"@@{veeam.secret}@@\"\nveeam_repo_name = \"@@{veeam_repo_name}@@\"\napi_server = \"@@{veeam_endpoint}@@\"\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/sessionMngr/?v=latest\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to Veeam...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the session_cookie and session_id\nresp_parse = json.loads(resp.content)\nveeam_session_cookie = resp.headers.get('X-RestSvcSessionId')\nveeam_session_id = resp_parse['SessionId']\n# endregion\n\n# region main processing\n# region prepare api call\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/repositories\"\nmethod = \"GET\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n# endregion\n\n# region get repositories\n# make the api call\nprint(\"STEP: Gettings repositories...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the repo_uid so that it may be captured by Calm.\nrepo_uid = \"\"\nresp_parse = json.loads(resp.content)\nfor repo in resp_parse['Refs']:\n    if repo['Name'] == veeam_repo_name:\n                repo_uid = repo['UID']\n                \nif repo_uid:\n    print (\"veeam_repo_uid={}\".format(repo_uid))\nelse:\n    print(\"Error: Repository \"+veeam_repo_name+\" is not present ..\")\n    exit(1)\n# endregion\n# endregion\n\n# region logout\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/logonSessions\"\nmethod = \"DELETE\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n\n# making the call \nprint(\"STEP: Logging out of Veeam...\")\nurl = \"{0}/{1}\".format(url, veeam_session_id)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n# endregion\n\nexit(0)",
                      "eval_variables": "veeam_repo_uid",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "VeeamCloneJob",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       11/03/2020\n# task_name:    VeeamCloneJob\n# description:  Clone a Veeam Job\n#               The script clones a Veeam Job using the \n#               the veeam_job_url and veeam_repo_uid found\n#               on the VeeamGetJob and VeeamGetRepository\n# input vars:   username, password veeam_job_url\n#               veeam_job_name, veeam_repo_uid, api_server\n# output vars:  none\n# endregion\n\n# region dealing with Scaling In/Out the application\n# # this script will be executed only on the first Service/Instance\n# (ie: Service[0])\nif \"@@{calm_array_index}@@\" != \"0\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{veeam.username}@@\"\npassword = \"@@{veeam.secret}@@\"\nveeam_job_name = \"@@{calm_application_name}@@\"  # getting the calm apps job\nveeam_job_template_name = \"@@{veeam_job_template_name}@@\" # getting the template job on veeam\nveeam_repo_uid = \"@@{veeam_repo_uid}@@\"\nveeam_job_name = \"@@{calm_application_name}@@\"\napi_server = \"@@{veeam_endpoint}@@\"\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/sessionMngr/?v=latest\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to Veeam...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the session_cookie and session_id\nresp_parse = json.loads(resp.content)\nveeam_session_cookie = resp.headers.get('X-RestSvcSessionId')\nveeam_session_id = resp_parse['SessionId']\n# endregion\n\n# region main processing\n# region prepare api call\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/jobs\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n# endregion\n\n# region get job\n# make the api call\nprint(\"STEP: Gettings jobs...\")\nmethod = \"GET\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# get the job_url\njob_url = \"\"\nresp_parse = json.loads(resp.content)\nfor job in resp_parse['Refs']:\n    if job['Name'] == veeam_job_template_name:\n        job_url = job['Href']\n                \nif job_url:\n    veeam_job_url=job_url.rsplit('/', 1)[1] #get only the last occurence\nelse:\n    print(\"Error: Backup Job \"+veeam_job_template_name+\" is not present ..\")\n    exit(1)\n# endregion\n\n# region clone job\npayload = {\n   \"BackupJobCloneInfo\": {\n      \"JobName\": veeam_job_name,\n      \"FolderName\": veeam_job_name,\n      \"RepositoryUid\": veeam_repo_uid,\n      \"Description\": \"This job was created by CALM\"\n   }\n}\n\n# make the api call\nprint(\"STEP: Clone job ...\")\nmethod = \"POST\"\nurl = \"{0}/{1}?action=clone\".format(url, veeam_job_url)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\n# pass the task_id so that it may be captured by Calm.\nresp_parse = json.loads(resp.content)\ntask_id = resp_parse['TaskId']\nprint (\"veeam_task_id={}\".format(task_id))\n# endregion\n# endregion\n\n# region logout\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/logonSessions\"\nmethod = \"DELETE\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n\n# making the call \nprint(\"STEP: Logging out of Veeam...\")\nurl = \"{0}/{1}\".format(url, veeam_session_id)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n# endregion\n\nexit(0)",
                      "eval_variables": "veeam_task_id",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "VeeamEditJob",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       11/03/2020\n# task_name:    VeeamEditJob\n# description:  Edit a Veeam Job\n#               The script edits a Veeam Job using the \n#               the veeam_job_url found on VeeamGetJob\n#               and attach a category_id found on \n#               VcRestGetCategory\n# input vars:   username, password, veeam_start_url,\n#               veeam_job_name, vc_category_name,\n# #             vc_category_id, api_server\n# output vars:  none\n# endregion\n\n# region dealing with Scaling In/Out the application\n# # this script will be executed only on the first Service/Instance\n# (ie: Service[0])\nif \"@@{calm_array_index}@@\" != \"0\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{veeam.username}@@\"\npassword = \"@@{veeam.secret}@@\"\nveeam_job_name = \"@@{calm_application_name}@@\"  # getting the calm apps job\nveeam_hierarchyroot_uid = \"@@{veeam_hierarchyroot_uid}@@\"\nveeam_job_daily_schedule = \"@@{veeam_job_daily_schedule}@@\"\nvc_category_id = \"@@{calm_array_vc_category_id}@@\"\nvc_category_name = \"@@{jira_parent_ticket}@@\"\napi_server = \"@@{veeam_endpoint}@@\"\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/sessionMngr/?v=latest\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to Veeam...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the session_cookie and session_id\nresp_parse = json.loads(resp.content)\nveeam_session_cookie = resp.headers.get('X-RestSvcSessionId')\nveeam_session_id = resp_parse['SessionId']\n# endregion\n\n# region main processing\n# region prepare api call\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/jobs\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n# endregion\n\n# region get job\n# make the api call\nprint(\"STEP: Gettings jobs...\")\nmethod = \"GET\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# get the job_url\njob_url = \"\"\nresp_parse = json.loads(resp.content)\nfor job in resp_parse['Refs']:\n    if job['Name'] == veeam_job_name:\n        job_url = job['Href']\n                \nif job_url:\n    veeam_job_url=job_url.rsplit('/', 1)[1] #get only the last occurence\nelse:\n    print(\"Error: Backup Job \"+veeam_job_name+\" is not present ..\")\n    exit(1)\n# endregion\n\n# region edit job\npayload = {\n    \"ScheduleConfigured\": True,\n    \"ScheduleEnabled\": True,\n    \"JobScheduleOptions\": { \n      \"Standart\": {\n          \"OptionsDaily\": {\n              \"Kind\": \"Everyday\",\n              \"Time\": veeam_job_daily_schedule,\n              \"Enabled\": True\n          },\n          \"OptionsMonthly\": {\n              \"Enabled\": False\n            }\n        }\n    },\n    \"JobInfo\": {\n      \"BackupJobInfo\": {\n        \"Includes\": {\n            \"ObjectInJobs\": [\n              {\n                \"HierarchyObjRef\": \"urn:VMware:Category:\"+veeam_hierarchyroot_uid+'.'+vc_category_id,\n                    \"Name\": vc_category_name,\n                    \"DisplayName\": vc_category_name,\n                    \"Type\": \"ObjectInJob\"\n                  }\n              ]\n          }\n      }\n  }\n}\n\n# make the api call\nprint(\"STEP: Edit job ...\")\nmethod = \"PUT\"\nurl = \"{0}/{1}?action=edit\".format(url, veeam_job_url)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers, payload)\n# endregion\n\n# pass the task_id so that it may be captured by Calm.\nresp_parse = json.loads(resp.content)\ntask_id = resp_parse['TaskId']\nprint (\"veeam_task_id={}\".format(task_id))\n# endregion\n# endregion\n\n# region logout\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/logonSessions\"\nmethod = \"DELETE\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n\n# making the call \nprint(\"STEP: Logging out of Veeam...\")\nurl = \"{0}/{1}\".format(url, veeam_session_id)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n# endregion\n\nexit(0)",
                      "eval_variables": "veeam_task_id",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "99b33415_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "77f0eedb_dag"
                },
                "variable_list": []
              },
              "name": "VeeamCreateJob"
            },
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=VeeamDelJob}"
                    ],
                    "name": "7103d9da_dag",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "VeeamDelJob",
                    "attrs": {
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       11/03/2020\n# task_name:    VeeamDeleteJob\n# description:  Deletes a Veeam Job\n#               The script deletes a Veeam Job using the \n#               the veeam_job_url on VeeamGetJob\n# input vars:   username, password, veeam_job_url, api_server\n# output vars:  none\n# endregion\n\n# region capture Calm variables\nusername = \"@@{veeam.username}@@\"\npassword = \"@@{veeam.secret}@@\"\nveeam_job_name = \"@@{calm_application_name}@@\"\napi_server = \"@@{veeam_endpoint}@@\"\n# endregion\n\n# region dealing with Scaling In/Out the application\n# # this script will be executed only on the first Service/Instance\n# (ie: Service[0])\nif \"@@{calm_array_index}@@\" != \"0\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/sessionMngr/?v=latest\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to Veeam...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the session_cookie and session_id\nresp_parse = json.loads(resp.content)\nveeam_session_cookie = resp.headers.get('X-RestSvcSessionId')\nveeam_session_id = resp_parse['SessionId']\n# endregion\n\n# region main processing\n# region prepare api call\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/jobs\"\nmethod = \"DELETE\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n# endregion\n\n# region get job\n# make the api call\nprint(\"STEP: Gettings jobs...\")\nmethod = \"GET\"\nprint(\"Making a {} API call to {}\".format(method, base_url))\nresp = process_request(base_url, method, headers)\n\n# get the job_url\njob_url = \"\"\nresp_parse = json.loads(resp.content)\nfor job in resp_parse['Refs']:\n    if job['Name'] == veeam_job_name:\n        job_url = job['Href']\n\nif job_url:\n    veeam_job_url=job_url.rsplit('/', 1)[1] #get only the last occurence\nelse:\n    print(\"Error: Backup Job \"+veeam_job_name+\" is not present ..\")\n    exit(1)\n# endregion\n\n# region get job backup sessions\n# make the api call\nprint(\"STEP: Get backup sessions...\")\nmethod = \"GET\"\nurl = \"{0}/{1}/backupSessions?format=entity\".format(base_url, veeam_job_url)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# check if any job is currently running\n# exiting if the job is running for more than 10 minutes\ni = 1\nwhile True:\n    loop_break = '0'\n    resp_parse = json.loads(resp.content)\n    for job in resp_parse['BackupJobSessions']:\n        if ((job['JobName'] == veeam_job_name) and (job['State'] == \"Working\")):\n            print (\"A job is currently running ..\")\n            print (\"Job's name: {}\" .format(job['JobName']))\n            print (\"Job's session name: {}\" .format(job['Name']))\n            print (\"Job's progress: {0}, state: {1}, result: {2}\" .format(job['Progress'], job['State'], job['Result']))\n            print (\"Sleep for: 2 minutes..\")\n            sleep(120)\n            i = i+1\n            loop_break = '1'\n            resp = process_request(url, method, headers)\n            if (i > 5):\n                print (\"Error.., we have waited for 10 minutes already ..\")\n                print (\"Job's name: {} is still in progress\" .format(job['JobName']))\n                print (\"Job's progress: {0}, state: {1}, result: {2}\" .format(job['Progress'], job['State'], job['Result']))\n                print (\"Please relaunch the application deletion after Backup's completion\")\n                exit(1)  \n    if loop_break == '0':\n        break\n# endregion\n\n# region delete job\n# make the api call\nprint(\"STEP: Delete job ...\")\nmethod = \"DELETE\"\nurl = \"{0}/{1}\".format(base_url, veeam_job_url)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the task_id so that it may be captured by Calm.\nresp_parse = json.loads(resp.content)\ntask_id = resp_parse['TaskId']\nprint (\"veeam_task_id={}\".format(task_id))\n# endregion\n# endregion\n\n# region logout\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/logonSessions\"\nmethod = \"DELETE\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n\n# making the call \nprint(\"STEP: Logging out of Veeam...\")\nurl = \"{0}/{1}\".format(url, veeam_session_id)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n# endregion\nexit(0)",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "a25b9ced_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "7103d9da_dag"
                },
                "variable_list": []
              },
              "name": "VeaamDelJob"
            },
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=EipDeleteHost}"
                    ],
                    "name": "de8f6434_dag",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "EipDeleteHost",
                    "attrs": {
                      "script": "#region headers\n# * authors:    igor.zecevic@nutanix.com\n# * date:       30/03/2020\n# task_name:    EIpDeleteHost\n# description:  Delete an IP/Host\n# input vars:   hostname, ip_public, ip_mgmt\n#               eip_dns_zone\n# output vars:  \n#endregion\n\n#region capture Calm variables\nusername = \"@@{eip.username}@@\"\npassword = \"@@{eip.secret}@@\"\napi_server = \"@@{eip_endpoint}@@\"\ndns_zone = \"@@{eip_dns_zone}@@\"\nhostname = \"@@{hostname}@@\"\nip_public = \"@@{hostname_ip_public}@@\"\nip_mgmt = \"@@{hostname_ip_mgmt}@@\"\nip_f5 = \"@@{hostname_ip_f5}@@\"\nf5_enabled = \"@@{f5_enabled}@@\"\nhostname_f5 = \"@@{eip_host_f5}@@\"\nhost_index = int('@@{calm_array_index}@@')\n# endregion\n\n#region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n        if (r.status_code == 204):\n            print(\"Response: No Content here..\")\n            exit(1)\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n#endregion\n\n#region main processing\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n# endregion\n\n# region delete ip addresses\nhostname_dns = hostname+\".\"+dns_zone\nfor ip in ip_public,ip_mgmt:\n    # get ip\n    method = \"GET\"\n    url = \"{0}/ip_address_list?WHERE={1}='{2}'&WHERE={3}='{4}'\".format(base_url, \"name\", hostname_dns, \"hostaddr\", ip)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n    ip_id = json.loads(resp.content)[0]['ip_id']\n    # delete ip\n    method = \"DELETE\"\n    url = \"{0}/ip_delete?{1}={2}\".format(base_url, \"ip_id\", ip_id)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n# endregion\n\n# region deleting f5 vs\nif ((host_index == 0) and (f5_enabled == \"yes\")):\n    ip = ip_f5\n    hostname = hostname_f5\n    hostname_dns = hostname+\".\"+dns_zone\n    # get ip\n    method = \"GET\"\n    url = \"{0}/ip_address_list?WHERE={1}='{2}'&WHERE={3}='{4}'\".format(base_url, \"name\", hostname_dns, \"hostaddr\", ip)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n    ip_id = json.loads(resp.content)[0]['ip_id']\n    # delete ip\n    method = \"DELETE\"\n    url = \"{0}/ip_delete?{1}={2}\".format(base_url, \"ip_id\", ip_id)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n# endregion\n# endregion\nexit(0)",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "98035853_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "de8f6434_dag"
                },
                "variable_list": []
              },
              "name": "EipDelHost"
            },
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=EipGetSiteId}",
                      "@{kind=app_task; name=EipGetSubnetId}",
                      "@{kind=app_task; name=EipReserveHost}",
                      "@{kind=app_task; name=EipAddHost}"
                    ],
                    "name": "42726cf8_dag",
                    "attrs": {
                      "edges": "  ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "EipGetSiteId",
                    "attrs": {
                      "exit_status": "",
                      "script": "#region headers\n# * authors:    igor.zecevic@nutanix.com\n# * date:       30/03/2020\n# task_name:    EipGetSiteId\n# description:  get site id\n# input vars:   eip_site_name\n# output vars:  eip_site_id\n#endregion\n\n#region capture Calm variables\nusername = \"@@{eip.username}@@\"\npassword = \"@@{eip.secret}@@\"\napi_server = \"@@{eip_endpoint}@@\"\nsite_name = \"@@{eip_site_name}@@\"\n#endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest\"\nmethod = \"GET\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n# endregion\n\n#region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n        #if r.content:\n        #    print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n    elif (r.status_code == 204):\n        print(\"Response: No Content here..\")\n        exit(1)\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n#endregion\n\n#region main processing\n# make the api call\nurl = \"{0}/ip_site_list?WHERE={1}='{2}'\".format(base_url, \"site_name\", site_name)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# parsing the response\nsites = json.loads(resp.content)\nfor site in sites:\n  if site['site_name'] == site_name:\n       print(\"eip_site_id={}\".format(site['site_id']))\n#endregion",
                      "eval_variables": "eip_site_id",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "EipGetSubnetId",
                    "attrs": {
                      "exit_status": "",
                      "script": "#region headers\n# * authors:    igor.zecevic@nutanix.com\n# * date:       30/03/2020\n# task_name:    EipGetSubnetId\n# description:  get subnet id\n# input vars:   eip_site_id, eip_public_subnet, eip_mgmt_subnet\n#               is_terminal, eip_min_free_ip\n# output vars:  eip_public_subnet_id, eip_mgmt_subnet_id\n#endregion\n\n#region capture Calm variables\nusername = \"@@{eip.username}@@\"\npassword = \"@@{eip.secret}@@\"\napi_server = \"@@{eip_endpoint}@@\"\nsite_id = \"@@{eip_site_id}@@\"\npublic_subnet_name = \"@@{eip_public_subnet}@@\"\nmgmt_subnet_name = \"@@{eip_mgmt_subnet}@@\"\nf5_subnet_name = \"@@{eip_f5_subnet}@@\"\nf5_enabled = \"@@{f5_enabled}@@\"\nmin_free_ip = \"@@{eip_min_free_ip}@@\"\nhost_index = int(\"@@{calm_array_index}@@\")\nis_terminal = \"1\"  #means the subnet cannot contains others subnets as children\n#endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest\"\nmethod = \"GET\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n# endregion\n\n#region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n    elif (r.status_code == 204):\n        print(\"Response: No Content here..\")\n        exit(1)\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n#endregion\n\n#region main processing\n# make the api call\nfor subnet in mgmt_subnet_name,public_subnet_name:\n    url = \"{0}/ip_block_subnet_list?WHERE={1}='{2}'&WHERE={3}='{4}'&WHERE={5}='{6}'\".format(base_url, \"site_id\", site_id, \"is_terminal\", is_terminal, \"subnet_name\", subnet)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n    # parsing the response\n    subnets = json.loads(resp.content)\n    for subnet in subnets:\n        if ((subnet['subnet_ip_free_size'] != int(min_free_ip)) and (subnet['subnet_name'] == public_subnet_name)):\n            print(\"eip_public_subnet_id={}\".format(subnet['subnet_id']))\n        elif ((subnet['subnet_ip_free_size'] != int(min_free_ip)) and (subnet['subnet_name'] == mgmt_subnet_name)):\n            print(\"eip_mgmt_subnet_id={}\".format(subnet['subnet_id']))\n        \nif ((host_index == 0) and (f5_enabled == \"yes\")):\n    subnet = f5_subnet_name\n    url = \"{0}/ip_block_subnet_list?WHERE={1}='{2}'&WHERE={3}='{4}'&WHERE={5}='{6}'\".format(base_url, \"site_id\", site_id, \"is_terminal\", is_terminal, \"subnet_name\", subnet)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n    # parsing the response\n    subnets = json.loads(resp.content)\n    for subnet in subnets:\n        if ((subnet['subnet_ip_free_size'] != int(min_free_ip)) and (subnet['subnet_name'] == f5_subnet_name)):\n            print(\"eip_f5_subnet_id={}\".format(subnet['subnet_id']))\n# endregion\nexit(0)",
                      "eval_variables": "eip_public_subnet_id eip_mgmt_subnet_id eip_f5_subnet_id",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "EipReserveHost",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * authors:    igor.zecevic@nutanix.com\n# * date:       30/03/2020\n# task_name:    EipReserveHost\n# description:  Check DNS and Reserve an Hostname\n#               check if hostname is not exising on the DNS\n#               if exists, increment the suffix number\n# input vars:   eip_site_id, app_prefix, source_app, app_status\n#               eip_dns_zone, instance_count, rr_type, f5_enabled\n# output vars:  eip_host_list\n#endregion\n\n#region capture Calm variables\nusername = \"@@{eip.username}@@\"\npassword = \"@@{eip.secret}@@\"\napi_server = \"@@{eip_endpoint}@@\"\ndns_zone = \"@@{eip_dns_zone}@@\"\napp_prefix = \"@@{app_prefix}@@\"\napp_source = \"@@{source_app}@@\"\napp_status = \"@@{app_status}@@\"\nhost_index = int(\"@@{calm_array_index}@@\")\nnumber_instance = int(\"@@{instance_count}@@\")\nf5_enabled = \"@@{f5_enabled}@@\"\nrr_type = \"A\"\n#endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest\"\nmethod = \"GET\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n# endregion\n\n#region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n#endregion\n\n# region check dns hostname\ndef eip_dns_check(hostname_dns, rr_type):\n    api_server_port = \"443\"\n    api_server_endpoint = \"/rest\"\n    method = \"GET\"\n    base_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\n    headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    # make the api call\n    url = \"{0}/dns_rr_list?WHERE={1}='{2}'&WHERE={3}='{4}'\".format(base_url, \"rr_type\", rr_type, \"rr_full_name\", hostname_dns)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n    return resp\n# endregion\n\n#region main processing\ni = 1\nhost_list = []\nif ((host_index > 0) and (app_status == \"provisioning\")):\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\nelif ((app_status == \"provisioning\") and (host_index == 0)):\n    for instance in range(0,number_instance):\n        loop_break = 0\n        while True:\n            #checking if hostname exists on DNS\n            hostname = app_prefix+\"-\"+app_source+\"-0\"+str(i)\n            hostname_dns = hostname+\".\"+dns_zone\n            check_dns = eip_dns_check(hostname_dns, rr_type)\n            if (check_dns.status_code == 204) or (check_dns.status_code == 200 and json.loads(check_dns.content)[0]['delayed_delete_time'] == \"1\"):\n                host_list.append(format(hostname))\n                loop_break = 1\n                i = i +1\n                break\n            elif (check_dns.status_code == 200 and json.loads(check_dns.content)[0]['delayed_delete_time'] == \"0\" and json.loads(check_dns.content)[0]['delayed_create_time'] == \"0\"):\n                print (\"DNS already exists.. looping\")\n                i = i + 1\n        if ((loop_break == 1) and (instance == number_instance)):\n            break\nelif ((host_index > 0) and (app_status == \"running\")):\n    while True:\n            #checking if hostname exists on DNS\n            hostname = app_prefix+\"-\"+app_source+\"-0\"+str(i)\n            hostname_dns = hostname+\".\"+dns_zone\n            check_dns = eip_dns_check(hostname_dns, rr_type)\n            if (check_dns.status_code == 204) or (check_dns.status_code == 200 and json.loads(check_dns.content)[0]['delayed_delete_time'] == \"1\"):\n                host_list.append(format(hostname))\n                loop_break = 1\n                i = i +1\n                break\n            elif (check_dns.status_code == 200 and json.loads(check_dns.content)[0]['delayed_delete_time'] == \"0\" and json.loads(check_dns.content)[0]['delayed_create_time'] == \"0\"):\n                print (\"DNS already exists.. looping\")\n                i = i + 1\n\n# reserving hostname for the F5 virtual server\nif ((host_index == 0) and (app_status == \"provisioning\") and (f5_enabled == \"yes\")):\n    i = 1\n    while True:\n        #checking if hostname exists on DNS\n        hostname = app_prefix+\"-\"+app_source+\"-VS-0\"+str(i)\n        hostname_dns = hostname+\".\"+dns_zone\n        check_dns = eip_dns_check(hostname_dns, rr_type)\n        if (check_dns.status_code == 204) or (check_dns.status_code == 200 and json.loads(check_dns.content)[0]['delayed_delete_time'] == \"1\"):\n            host_f5 = hostname\n            print(\"eip_host_f5={}\".format(host_f5))\n            loop_break = 1\n            i = i +1\n            break\n        elif (check_dns.status_code == 200 and json.loads(check_dns.content)[0]['delayed_delete_time'] == \"0\" and json.loads(check_dns.content)[0]['delayed_create_time'] == \"0\"):\n            print (\"DNS already exists.. looping\")\n            i = i + 1\n# endregion\nprint(\"eip_host_list={}\".format(host_list))\n# endregion\nexit(0)\n",
                      "eval_variables": "eip_host_list eip_host_f5",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "EipAddHost",
                    "attrs": {
                      "exit_status": "",
                      "script": "#region headers\n# * authors:    igor.zecevic@nutanix.com\n# * date:       30/03/2020\n# task_name:    EipAddHost\n# description:  Create an IP/Host\n# input vars:   eip_site_id, eip_mgmt_subnet_id, eip_public_subnet_id\n#               eip_dns_zone, app_status, f5_enabled, add_flag\n#               ip_name_type, max_find\n# output vars:  hostname, ip_mgmt_vnic, ip_public_vnic, ip_f5_vs\n#endregion\n\n#region capture Calm variables\nusername = \"@@{eip.username}@@\"\npassword = \"@@{eip.secret}@@\"\napi_server = \"@@{eip_endpoint}@@\"\nsite_id = \"@@{eip_site_id}@@\"\nmgmt_subnet_id = \"@@{eip_mgmt_subnet_id}@@\"\npublic_subnet_id = \"@@{eip_public_subnet_id}@@\"\nf5_subnet_id = \"@@{eip_f5_subnet_id}@@\"\nf5_enabled = \"@@{f5_enabled}@@\" #if f5_enabled yes, we need another address \ndns_zone = \"@@{eip_dns_zone}@@\"\napp_status = \"@@{app_status}@@\"\nhost_index = int('@@{calm_array_index}@@')\nadd_flag = \"new_only\" # flag used to track new ip creation only\nmax_find = \"1\" # search for 1 available address\nip_name_type = \"A\" # create a DNS record\n#endregion\n\n#region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n        if (r.status_code == 204):\n            print(\"Response: No Content here..\")\n            exit(1)\n    elif ((r.status_code == 400) and (json.loads(r.content)['errmsg']) == \"Address already exists\"):\n        print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n#endregion\n\n# region find next free address function\ndef efficient_ip_find_free_address(subnet_id, max_find=max_find):\n    api_server_port = \"443\"\n    api_server_endpoint = \"/rpc\"\n    method = \"GET\"\n    base_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\n    headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    # make the api call\n    url = \"{0}/ip_find_free_address?{1}={2}&{3}={4}\".format(base_url, \"subnet_id\", subnet_id, \"max_find\", max_find)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n    return resp\n# endregion\n\n# region add host function\ndef efficient_ip_add_host(host_ip, hostname_dns, site_id=site_id, add_flag=add_flag):\n    api_server_port = \"443\"\n    api_server_endpoint = \"/rest\"\n    method = \"POST\"\n    base_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\n    headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    # make the api call\n    url = \"{0}/ip_add?{1}={2}&{3}={4}&{5}={6}&{7}={8}&{9}={10}\".format(base_url, \"hostaddr\", host_ip, \"ip_name\", hostname_dns, \"ip_name_type\", ip_name_type, \"site_id\", site_id, \"add_flag\", add_flag)\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = process_request(url, method, headers)\n    return resp\n# endregion\n\n# region main processing\n# region prepare and reserve hostname\n# sleep count based on the replica level\nsleep_count = (host_index * 3)\nprint (\"Sleep for: \"+str(sleep_count)+\" seconds\")\nsleep(sleep_count)\nif (app_status == \"provisioning\"):\n    # use the calm_array variable\n    hostname = @@{calm_array_eip_host_list}@@[host_index]\n    hostname_dns = hostname+\".\"+dns_zone\n    print(\"hostname={}\".format(hostname))\nelif (app_status == \"running\"):\n    # use the service variable\n    hostname = @@{eip_host_list}@@[0]\n    hostname_dns = hostname+\".\"+dns_zone\n    print(\"hostname={}\".format(hostname))\n# endregion\n\n# region add management and public ips\ni = 0\nfor subnet_id in mgmt_subnet_id,public_subnet_id:\n    while True:\n        next_free_ip = efficient_ip_find_free_address(subnet_id)\n        host_ip = json.loads(next_free_ip.content)[0]['hostaddr']\n        add_host = efficient_ip_add_host(host_ip, hostname_dns)\n        # if the address already exists, loop to find a new one\n        if ((add_host.status_code == 400) and (json.loads(add_host.content)['errmsg']) == \"Address already exists\"):\n            sleep_count = (host_index * 2)\n            print (\"Sleep for: \"+str(sleep_count)+\" seconds\")\n            sleep(sleep_count)\n            i = (i + 1)\n            if (i > 10):\n                print(\"Error: couldn't find any available address..\")\n                exit(1)\n        elif ((add_host.status_code == 201) and (subnet_id == mgmt_subnet_id)):\n            print (\"hostname_ip_mgmt={}\".format(host_ip))\n            break\n        elif ((add_host.status_code == 201) and (subnet_id == public_subnet_id)):\n            print (\"hostname_ip_public={}\".format(host_ip))\n            break\n# endregion\n\n# region F5 ip - run only on replica[0]\nif ((f5_enabled == \"yes\") and (host_index == 0)):\n  i = 0\n  subnet_id = f5_subnet_id\n  hostname = \"@@{eip_host_f5}@@\"\n  hostname_dns = hostname+\".\"+dns_zone\n  while True:\n      next_free_ip = efficient_ip_find_free_address(subnet_id)\n      host_ip = json.loads(next_free_ip.content)[0]['hostaddr']\n      add_host = efficient_ip_add_host(host_ip, hostname_dns)\n      # if the address already exists, loop to find a new one\n      if ((add_host.status_code == 400) and (json.loads(add_host.content)['errmsg']) == \"Address already exists\"):\n         sleep_count = (host_index * 2)\n         print (\"Sleep for: \"+str(sleep_count)+\" seconds\")\n         sleep(sleep_count)\n         i = (i + 1)\n         if (i > 10):\n              print(\"Error: couldn't find any available address..\")\n              exit(1)\n      elif (add_host.status_code == 201):\n          print (\"hostname_ip_f5={}\".format(host_ip))\n          break\n# endregion\n# endregion\nexit(0)",
                      "eval_variables": "hostname hostname_ip_public hostname_ip_mgmt hostname_ip_f5",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "ae307199_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "42726cf8_dag"
                },
                "variable_list": []
              },
              "name": "EipAddHost"
            }
          ],
          "depends_on_list": [],
          "name": "CentOS7",
          "port_list": [],
          "tier": "",
          "variable_list": [
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "hostname_ip_f5",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "hostname_ip_mgmt",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "hostname_ip_public",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "hostname",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "eip_host_f5",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "eip_host_list",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "eip_f5_subnet_id",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "eip_mgmt_subnet_id",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "eip_public_subnet_id",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "eip_site_id",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "app_status",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "veeam_task_id",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "veeam_job_template_name",
              "value": "TEMPLATE-JOB-FOR-CALM",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "veeam_repo_uid",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "veeam_endpoint",
              "value": "10.68.99.161",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "veeam_hierarchyroot_uid",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "vc_endpoint",
              "value": "10.48.108.11",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "vc_vm_folder_id",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "vc_category_id",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "vc_tag_id",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "vc_cluster_id",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "vc_vm_id",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "vc_vm_folder_root_id",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "f5_pool_monitor",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "f5_partition",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "f5_vs_protocol",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "f5_network_pool",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "f5_enabled",
              "value": "no",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "f5_vs_port",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "jenkins_job_name",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "application_name",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "awx_job_template_id",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "awx_ansible_groups",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "awx_inventory_id",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "fortigate_group_name",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "fortigate_csrf_token",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "job_build_id",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "awx_host_id",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "jira_child_ticket",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "vm_name",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            }
          ],
          "description": ""
        }
      ],
      "substrate_definition_list": [
        {
          "description": "",
          "action_list": [
            {
              "description": "",
              "type": "fragment",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=ExtractAppConfig}",
                      "@{kind=app_task; name=CreateJiraTicket}",
                      "@{kind=app_task; name=GetHostname}",
                      "@{kind=app_task; name=GetIpAddress}",
                      "@{kind=app_task; name=Pre_create task5}"
                    ],
                    "name": "5ef1d61d_dag",
                    "attrs": {
                      "edges": "   ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "ExtractAppConfig",
                    "attrs": {
                      "exit_status": "",
                      "script": "applications_config = {\n  \"WWW\": {\n    \"awx_inventory_id\": 2,\n    \"awx_ansible_groups\": \"linux,webservers\",\n    \"awx_job_template_id\": 9,\n    \"jenkins_job_name\": \"Calm_test\",\n    \"f5_config\": {\n      \"enabled\": \"yes\",\n      \"network_pool\": 12,\n      \"vs_port\": \"80\",\n      \"vs_protocol\": \"tcp\",\n      \"partition\": \"Common\",\n      \"pool_monitor\" : \"/Common/https and /Common/tcp\"\n    }\n  },\n  \"APP01\": {\n    \"awx_inventory_id\": 2,\n    \"awx_ansible_groups\": \"linux,webservers\",\n    \"awx_job_template_id\": 9,\n    \"jenkins_job_name\": \"Calm_test\",\n    \"f5_config\": {\n      \"enabled\": \"yes\",\n      \"network_pool\": 12,\n      \"vs_port\": \"80\",\n      \"vs_protocol\": \"tcp\",\n      \"partition\": \"Common\",\n      \"pool_monitor\" : \"/Common/https and /Common/tcp\"\n    }\n  },\n  \"APP02\": {\n    \"awx_inventory_id\": 3,\n    \"awx_ansible_groups\": \"linux,webservers\",\n    \"awx_job_template_id\": 9,\n    \"jenkins_job_name\": \"Calm_test\",\n    \"f5_config\": {\n      \"enabled\": \"yes\",\n      \"network_pool\": 12,\n      \"vs_port\": \"80\",\n      \"vs_protocol\": \"tcp\",\n      \"partition\": \"Common\",\n      \"pool_monitor\" : \"/Common/https and /Common/tcp\"\n    }\n  }\n}\n\napp_identity = json.loads(json.dumps(applications_config))\nprint(\"awx_inventory_id={}\".format(app_identity['@@{source_app}@@']['awx_inventory_id']))\nprint(\"awx_ansible_groups={}\".format(app_identity['@@{source_app}@@']['awx_ansible_groups']))\nprint(\"awx_job_template_id={}\".format(app_identity['@@{source_app}@@']['awx_job_template_id']))\nprint(\"awx_application_name={}\".format(app_identity['@@{source_app}@@']))\nprint(\"jenkins_job_name={}\".format(app_identity['@@{source_app}@@']['jenkins_job_name']))\nprint(\"f5_enabled={}\".format(app_identity['@@{source_app}@@']['f5_config']['enabled']))\nprint(\"f5_vs_port={}\".format(app_identity['@@{source_app}@@']['f5_config']['vs_port']))\nprint(\"f5_network_pool={}\".format(app_identity['@@{source_app}@@']['f5_config']['network_pool']))\nprint(\"f5_vs_protocol={}\".format(app_identity['@@{source_app}@@']['f5_config']['vs_protocol']))\nprint(\"f5_partition={}\".format(app_identity['@@{source_app}@@']['f5_config']['partition']))\nprint(\"f5_pool_monitor={}\".format(app_identity['@@{source_app}@@']['f5_config']['pool_monitor']))",
                      "eval_variables": "awx_inventory_id awx_ansible_groups awx_job_template_id application_name jenkins_job_name f5_enabled f5_vs_port f5_network_pool f5_vs_protocol f5_partition f5_pool_monitor",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "CreateJiraTicket",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraCreateTicket\n# description:  Jira ticket creation using the deployed vm specs\n# input vars:   application_name, jira_project_key, policy_id, f5_enabled\n# output vars:  jira_parent_ticket_name\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\njira_project_key = \"@@{jira_project_name}@@\"\napplication_name = \"@@{calm_application_name}@@\"\npolicy_id = \"@@{fortigate_policy}@@\".split(\"-\")[0]\nf5_enabled = \"@@{f5_enabled}@@\"\ntotal_instances = str(\"@@{instance_count}@@\")\n# endregion\n\nif int(\"@@{calm_array_index}@@\") != 0:\n    exit(0)\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/api/3/issue\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\ncreate_payload = {\n    \"fields\": {\n    \"project\": {\n      \"key\": jira_project_key\n    },\n    \"description\": {\n      \"version\": 1,\n      \"type\": \"doc\",\n    \"content\": [\n    {\n      \"type\": \"paragraph\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"New instance of \" + application_name + \" is being deployed\"\n        },\n        {\n          \"type\": \"hardBreak\"\n        },\n        {\n          \"type\": \"text\",\n          \"text\": \"Current deployment configuration:\"\n        },\n        {\n          \"type\": \"hardBreak\"\n        },\n        {\n          \"type\": \"text\",\n          \"text\": \"Fortigate policy: \" + policy_id\n        },\n        {\n          \"type\": \"hardBreak\"\n        },\n        {\n          \"type\": \"text\",\n          \"text\": \"F5 loadbalancer enabled: \" + f5_enabled\n        },\n        {\n          \"type\": \"hardBreak\"\n        },\n        {\n          \"type\": \"text\",\n          \"text\": \"number of deployed instance: \" + total_instances\n        }\n      ]\n    }\n  ]\n    },\n    \"summary\": application_name + \" vm deployment\",\n\t\t\"labels\": [\n      \"calm\"\n    ],\t\t\n    \"issuetype\": {\n      \"name\": \"Task\"\n    }\n  }\n    \n}\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, params=json.dumps(create_payload),\\\n              auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n              verify=False\n             )\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful. Status code: {}\".format(resp.status_code))\n    result = json.loads(resp.content)\n    print(\"Ticket {} was created\".format(result['key']))\n    print(\"jira_parent_ticket={}\".format(result['key']))\n    \n    \nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion",
                      "eval_variables": "jira_parent_ticket",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "GetHostname",
                    "attrs": {
                      "exit_status": "",
                      "script": "print(\"vm_name=salah-@@{calm_array_index}@@\")",
                      "eval_variables": "vm_name",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "GetIpAddress",
                    "attrs": {
                      "script": "print \"ok\"",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "Pre_create task5",
                    "attrs": {
                      "script": "print(\"@@{calm_array_index}@@\")\nprint(\"@@{jira_parent_ticket}@@\")\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "035aa427_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "5ef1d61d_dag"
                },
                "variable_list": []
              },
              "name": "pre_action_create"
            },
            {
              "description": "",
              "type": "fragment",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=Post_delete task1_nuta}"
                    ],
                    "name": "3e7108cf_dag",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "Post_delete task1_nuta",
                    "attrs": {
                      "script": "print(\"ok\")",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "097095e6_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "3e7108cf_dag"
                },
                "variable_list": []
              },
              "name": "post_action_delete"
            }
          ],
          "type": "AHV_VM",
          "name": "CentOSVm",
          "readiness_probe": {
            "connection_type": "SSH",
            "retries": "5",
            "connection_protocol": "",
            "connection_port": 22,
            "address": "@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
            "delay_secs": "60",
            "disable_readiness_probe": false,
            "login_credential_local_reference": {
              "kind": "app_credential",
              "name": "centos"
            }
          },
          "editables": {
            "create_spec": {
              "resources": {
                "nic_list": {},
                "serial_port_list": {}
              }
            }
          },
          "os_type": "Linux",
          "create_spec": {
            "name": "@@{vm_name}@@",
            "resources": {
              "nic_list": [
                {
                  "nic_type": "NORMAL_NIC",
                  "vpc_reference": null,
                  "ip_endpoint_list": [],
                  "network_function_chain_reference": null,
                  "network_function_nic_type": "INGRESS",
                  "mac_address": "",
                  "subnet_reference": {
                    "kind": "subnet",
                    "type": "",
                    "name": "",
                    "uuid": "061237a0-554a-4528-8e5c-9a9bdca8dd8c"
                  },
                  "type": ""
                }
              ],
              "serial_port_list": [],
              "guest_tools": null,
              "num_vcpus_per_socket": 1,
              "num_sockets": 2,
              "gpu_list": [],
              "memory_size_mib": 4096,
              "parent_reference": null,
              "hardware_clock_timezone": "",
              "guest_customization": {
                "cloud_init": {
                  "meta_data": "",
                  "type": "",
                  "user_data": "#cloud-config\nusers:\n  - name: \"ansible\"\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']\n    ssh-authorized-keys:\n    - @@{ansible_public_key}@@\n    ssh_pwauth: True\n    disable_root: false\nchpasswd:\n  list: |\n    @@{centos.username}@@:@@{centos.secret}@@\n  expire: False\n \nruncmd:\n - [ hostnamectl, set-hostname, \"@@{vm_name}@@\" ]\n - [ ifdown, eth0 ]\n - [ ifup, eth0 ]"
                },
                "type": "",
                "sysprep": null
              },
              "power_state": "ON",
              "type": "",
              "account_uuid": "28b0cf0a-59e5-4d3e-bef1-80bca0b8e4ff",
              "boot_config": {
                "boot_device": {
                  "type": "",
                  "disk_address": {
                    "type": "",
                    "device_index": 0,
                    "adapter_type": "SCSI"
                  }
                },
                "type": "",
                "boot_type": "",
                "mac_address": ""
              },
              "disk_list": [
                {
                  "data_source_reference": {
                    "kind": "image",
                    "type": "",
                    "name": "CentOS7-MoE",
                    "uuid": "ec79974b-7f99-49b3-bff1-e45bc39c15ce"
                  },
                  "type": "",
                  "disk_size_mib": 0,
                  "volume_group_reference": null,
                  "device_properties": {
                    "type": "",
                    "disk_address": {
                      "type": "",
                      "device_index": 0,
                      "adapter_type": "SCSI"
                    },
                    "device_type": "DISK"
                  }
                }
              ]
            },
            "availability_zone_reference": null,
            "backup_policy": null,
            "type": "",
            "cluster_reference": null,
            "categories": {}
          },
          "variable_list": []
        },
        {
          "description": "",
          "action_list": [
            {
              "description": "",
              "type": "fragment",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "b5cc9f06_dag",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "91724d19_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "b5cc9f06_dag"
                },
                "variable_list": []
              },
              "name": "pre_action_create"
            },
            {
              "description": "",
              "type": "fragment",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_2"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "db01e8b9_dag",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "0435bb56_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "db01e8b9_dag"
                },
                "variable_list": []
              },
              "name": "post_action_delete"
            }
          ],
          "type": "AWS_VM",
          "name": "CentOSVm_2",
          "readiness_probe": {
            "connection_type": "SSH",
            "retries": "5",
            "connection_protocol": "",
            "connection_port": 22,
            "address": "@@{public_ip_address}@@",
            "delay_secs": "60",
            "disable_readiness_probe": true
          },
          "os_type": "Linux",
          "create_spec": {
            "name": "vm-@@{calm_array_index}@@-@@{calm_time}@@",
            "availability_zone_reference": null,
            "backup_policy": null,
            "type": "PROVISION_AWS_VM",
            "cluster_reference": null,
            "resources": {
              "instance_profile_name": "",
              "availability_zone": "us-west-2a",
              "subnet_id": "subnet-b9c19af2",
              "key_name": "calm-user-key",
              "region": "us-west-2",
              "instance_initiated_shutdown_behavior": "",
              "user_data": "",
              "image_id": "ami-018d89fd7bf4a0001",
              "instance_type": "t2.micro",
              "state": "RUNNING",
              "security_group_list": [
                {
                  "type": "",
                  "security_group_id": "sg-0f4228333ed236d72"
                }
              ],
              "block_device_map": {
                "data_disk_list": [],
                "type": "",
                "root_disk": {
                  "size_gb": 8,
                  "volume_type": "GP2",
                  "device_name": "/dev/xvda",
                  "iops": 1,
                  "snapshot_id": "",
                  "type": "",
                  "delete_on_termination": true
                }
              },
              "private_ip_address": "",
              "vpc_id": "vpc-2d6cc055",
              "tag_list": [],
              "type": "",
              "account_uuid": "eaa2a061-0608-16d8-f81b-7bdbd6fc264b",
              "associate_public_ip_address": true
            }
          },
          "variable_list": []
        },
        {
          "description": "",
          "action_list": [
            {
              "description": "",
              "type": "fragment",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=CalmGetAppStatus}",
                      "@{kind=app_task; name=ExtractAppConfig}",
                      "@{kind=app_task; name=CreateJiraTicket}",
                      "@{kind=app_task; name=GetHostname}",
                      "@{kind=app_task; name=GetIpAddress}",
                      "@{kind=app_task; name=Pre_create task_5}"
                    ],
                    "name": "5ef1d61d_dag_cloned_1",
                    "attrs": {
                      "edges": "    ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "CalmGetAppStatus",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:       salaheddine.gassim@nutanix.com\n# * version:      03242020 - initial version\n# task_name:      CalmGetAppStatus\n# description:    This script gets the status of an application.\n# endregion\n\n# region capture Calm macros\npc_ip = '@@{prism_ip}@@'\nprism_username = '@@{prism.username}@@'\nprism_secret = '@@{prism.secret}@@'\napp_uuid = '@@{calm_application_uuid}@@'\n# endregion\n\n# region prepare variables\nheaders = {'content-type': 'application/json'}\n# endregion\n\n# region REST call: Get Apps\nmethod = 'GET'\nurl = \"https://{}:9440/api/nutanix/v3/apps/{}\".format(pc_ip,app_uuid)\n\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, auth='BASIC', user=prism_username, passwd=prism_secret,\n              headers=headers, verify=False)\n\nif resp.ok:\n    json_resp = json.loads(resp.content)\n    print(\"app_status={}\".format(json_resp['status']['state']))\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n",
                      "eval_variables": "app_status",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "ExtractAppConfig",
                    "attrs": {
                      "exit_status": "",
                      "script": "applications_config = {\n  \"WWW\": {\n    \"awx_inventory_id\": 2,\n    \"awx_ansible_groups\": \"linux,webservers\",\n    \"awx_job_template_id\": 11,\n    \"jenkins_job_name\": \"Calm_test\",\n    \"f5_config\": {\n      \"enabled\": \"yes\",\n      \"network_pool\": 12,\n      \"vs_port\": \"80\",\n      \"vs_protocol\": \"tcp\",\n      \"partition\": \"Common\",\n      \"pool_monitor\" : \"/Common/https and /Common/tcp\"\n    }\n  },\n  \"APP01\": {\n    \"awx_inventory_id\": 2,\n    \"awx_ansible_groups\": \"linux,webservers\",\n    \"awx_job_template_id\": 9,\n    \"jenkins_job_name\": \"Calm_test\",\n    \"f5_config\": {\n      \"enabled\": \"yes\",\n      \"network_pool\": 12,\n      \"vs_port\": \"80\",\n      \"vs_protocol\": \"tcp\",\n      \"partition\": \"Common\",\n      \"pool_monitor\" : \"/Common/https and /Common/tcp\"\n    }\n  },\n  \"APP02\": {\n    \"awx_inventory_id\": 3,\n    \"awx_ansible_groups\": \"linux,webservers\",\n    \"awx_job_template_id\": 9,\n    \"jenkins_job_name\": \"Calm_test\",\n    \"f5_config\": {\n      \"enabled\": \"yes\",\n      \"network_pool\": 12,\n      \"vs_port\": \"80\",\n      \"vs_protocol\": \"tcp\",\n      \"partition\": \"Common\",\n      \"pool_monitor\" : \"/Common/https and /Common/tcp\"\n    }\n  }\n}\n\napp_identity = json.loads(json.dumps(applications_config))\nprint(\"awx_inventory_id={}\".format(app_identity['@@{source_app}@@']['awx_inventory_id']))\nprint(\"awx_ansible_groups={}\".format(app_identity['@@{source_app}@@']['awx_ansible_groups']))\nprint(\"awx_job_template_id={}\".format(app_identity['@@{source_app}@@']['awx_job_template_id']))\nprint(\"awx_application_name={}\".format(app_identity['@@{source_app}@@']))\nprint(\"jenkins_job_name={}\".format(app_identity['@@{source_app}@@']['jenkins_job_name']))\nprint(\"f5_enabled={}\".format(app_identity['@@{source_app}@@']['f5_config']['enabled']))\nprint(\"f5_vs_port={}\".format(app_identity['@@{source_app}@@']['f5_config']['vs_port']))\nprint(\"f5_network_pool={}\".format(app_identity['@@{source_app}@@']['f5_config']['network_pool']))\nprint(\"f5_vs_protocol={}\".format(app_identity['@@{source_app}@@']['f5_config']['vs_protocol']))\nprint(\"f5_partition={}\".format(app_identity['@@{source_app}@@']['f5_config']['partition']))\nprint(\"f5_pool_monitor={}\".format(app_identity['@@{source_app}@@']['f5_config']['pool_monitor']))",
                      "eval_variables": "awx_inventory_id awx_ansible_groups awx_job_template_id application_name jenkins_job_name f5_enabled f5_vs_port f5_network_pool f5_vs_protocol f5_partition f5_pool_monitor",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "CreateJiraTicket",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraCreateTicket\n# description:  Jira ticket creation using the deployed vm specs\n# input vars:   application_name, jira_project_key, policy_id, f5_enabled\n# output vars:  jira_parent_ticket_name\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\njira_project_key = \"@@{jira_project_name}@@\"\napplication_name = \"@@{calm_application_name}@@\"\n#policy_id = \"@@{fortigate_policy}@@\".split(\"-\")[0]\n#f5_enabled = \"@@{f5_enabled}@@\"\ntotal_instances = str(\"@@{instance_count}@@\")\nticket_summary = application_name + \" vm deployment\"\n# endregion\n\n\ndef create_jira_ticket(api_server, jira_login, jira_api_token, jira_project_key,\n                       application_name, total_instances, ticket_summary):\n\n\n  # region prepare api call\n  api_server_port = \"443\"\n  api_server_endpoint = \"/rest/api/3/issue\"\n  url = \"https://{}:{}{}\".format(\n      api_server,\n      api_server_port,\n      api_server_endpoint\n  )\n  method = \"POST\"\n  headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n  }\n  create_payload = {\n      \"fields\": {\n          \"project\": {\n              \"key\": jira_project_key\n          },\n          \"description\": {\n              \"version\": 1,\n              \"type\": \"doc\",\n              \"content\": [\n                  {\n                      \"type\": \"paragraph\",\n                      \"content\": [\n                          {\n                              \"type\": \"text\",\n                              \"text\": ticket_summary\n                          },\n                          {\n                              \"type\": \"hardBreak\"\n                          },\n                          {\n                              \"type\": \"text\",\n                              \"text\": \"Current deployment configuration:\"\n                          },\n                          {\n                              \"type\": \"hardBreak\"\n                          },\n                          {\n                              \"type\": \"text\",\n                              \"text\": \"number of deployed instance: \" + total_instances\n                          }\n                      ]\n                  }\n              ]\n          },\n          \"summary\": ticket_summary,\n          \"labels\": [\n              \"calm\"\n          ],\n          \"issuetype\": {\n              \"name\": \"Task\"\n          }\n      }\n\n  }\n  # endregion\n\n  # region make api call\n  # make the API call and capture the results in the variable called \"resp\"\n  print(\"Making a {} API call to {}\".format(method, url))\n  resp = urlreq(url, verb=method, params=json.dumps(create_payload),\n                auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\n                verify=False\n                )\n\n  # deal with the result/response\n  if resp.ok:\n      print(\"Request was successful. Status code: {}\".format(resp.status_code))\n      result = json.loads(resp.content)\n      print(\"Ticket {} was created\".format(result['key']))\n      print(\"jira_parent_ticket={}\".format(result['key']))\n\n\n  else:\n      print(\"Request failed\")\n      print(\"Headers: {}\".format(headers))\n      print('Status code: {}'.format(resp.status_code))\n      print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n      exit(1)\n  # endregion\n\n\nsleep(10)\ncalm_array_index = int('@@{calm_array_index}@@')\nif (\"@@{app_status}@@\" == \"provisioning\") and (calm_array_index == 0):\n    print(\"Creating Jira ticket for the application deployment\")\n    ticket_summary = application_name + \" vm deployment\"\n    create_jira_ticket(api_server, jira_login, jira_api_token, jira_project_key,\n                       application_name, total_instances, ticket_summary)\nelif calm_array_index > 0 and (\"@@{app_status}@@\" == \"running\"):\n    ticket_summary = application_name + \" ScaleOut operation\"\n    print(\"Creating Jira ticket for ScaleOut operation\")\n    create_jira_ticket(api_server, jira_login, jira_api_token, jira_project_key,\n                       application_name, total_instances, ticket_summary)\n",
                      "eval_variables": "jira_parent_ticket",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "GetHostname",
                    "attrs": {
                      "exit_status": "",
                      "script": "print(\"vm_name=toto-@@{calm_array_index}@@\")",
                      "eval_variables": "vm_name",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "GetIpAddress",
                    "attrs": {
                      "script": "print \"ok\"",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "Pre_create task_5",
                    "attrs": {
                      "script": "print(\"@@{calm_array_index}@@\")\nprint(\"@@{jira_parent_ticket}@@\")\n\n\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "035aa427_runbook_cloned_0",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "5ef1d61d_dag_cloned_1"
                },
                "variable_list": []
              },
              "name": "pre_action_create"
            },
            {
              "description": "",
              "type": "fragment",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=CloseJiraTicket}",
                      "@{kind=app_task; name=Post_delete task2}"
                    ],
                    "name": "3e7108cf_dag_cloned_1",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "CloseJiraTicket",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraUpdateTicket\n# description:  updating the ticket status with the provided payload\n# input vars:   transition_id, ticket_name\n# output vars:  none\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\ntransition_id = 41 # 31 = in progress / 41 = Done\nticket_name = \"@@{jira_child_ticket}@@\" # ticket that need to be updated\n# endregion\n\ndef update_jira_ticket(api_server, jira_login, jira_api_token, transition_id,\n                       ticket_name):\n        \n    # region prepare api call\n    api_server_port = \"443\"\n    api_server_endpoint = \"/rest/api/3/issue/\" + ticket_name + \"/transitions\"\n    url = \"https://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    }\n    update_payload = {\n        \"transition\": {\n        \"id\": transition_id\n    }\n        \n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=json.dumps(update_payload),\\\n                auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n                verify=False\n                )\n\n    # deal with the result/response\n    if resp.ok:\n        print(\"Request was successful. Status code: {}\".format(resp.status_code))    \n        \n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\nprint(\"@@{app_status}@@\")\ncalm_array_index = int('@@{calm_array_index}@@')\nif (\"@@{app_status}@@\" == \"provisioning\") and calm_array_index == 0:\n    print(\"Updating Jira ticket for the application delete\")\n    \n    update_jira_ticket(api_server, jira_login, jira_api_token, transition_id,\n                       ticket_name)\nelif calm_array_index > 0 and (\"@@{app_status}@@\" == \"running\"):\n\n    print(\"Updating Jira ticket for ScaleOut operation\")\n    update_jira_ticket(api_server, jira_login, jira_api_token, transition_id,\n                       ticket_name)",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_substrate",
                      "name": "CentOSVm_Vmw"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "Post_delete task2",
                    "attrs": {
                      "script": "print(\"@@{app_status}@@\")",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "097095e6_runbook_cloned_0",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "3e7108cf_dag_cloned_1"
                },
                "variable_list": []
              },
              "name": "post_action_delete"
            }
          ],
          "type": "VMWARE_VM",
          "name": "CentOSVm_Vmw",
          "readiness_probe": {
            "connection_type": "SSH",
            "retries": "5",
            "connection_protocol": "",
            "connection_port": 22,
            "address": "@@{platform.ipAddressList[0]}@@",
            "delay_secs": "60",
            "disable_readiness_probe": false,
            "login_credential_local_reference": {
              "kind": "app_credential",
              "name": "centos"
            }
          },
          "editables": {
            "create_spec": {
              "resources": {
                "template_nic_list": {},
                "template_disk_list": {},
                "controller_list": {},
                "template_controller_list": {},
                "nic_list": {}
              }
            }
          },
          "os_type": "Linux",
          "create_spec": {
            "compute_drs_mode": false,
            "name": "@@{vm_name}@@",
            "type": "PROVISION_VMWARE_VM",
            "drs_mode": false,
            "library": null,
            "cluster": "",
            "host": "00000000-0000-0000-0000-0cc47a64b3a0",
            "resources": {
              "nic_list": [
                {
                  "nic_type": "vmxnet3",
                  "type": "",
                  "net_name": "key-vim.host.PortGroup-568"
                }
              ],
              "template_disk_list": [
                {
                  "disk_size_mb": -1,
                  "is_deleted": false,
                  "disk_mode": "persistent",
                  "device_slot": 0,
                  "adapter_type": "IDE",
                  "iso_path": "",
                  "location": "",
                  "key": 16000,
                  "controller_key": 15000,
                  "disk_type": "cdrom",
                  "type": ""
                },
                {
                  "disk_size_mb": 8192,
                  "is_deleted": false,
                  "disk_mode": "persistent",
                  "device_slot": 0,
                  "adapter_type": "SCSI",
                  "iso_path": "",
                  "location": "ds:///vmfs/volumes/af476b04-86f0cbd1/",
                  "key": 2000,
                  "controller_key": 1000,
                  "disk_type": "disk",
                  "type": ""
                }
              ],
              "template_nic_list": [
                {
                  "nic_type": "vmxnet3",
                  "is_deleted": true,
                  "net_name": "key-vim.host.PortGroup-568",
                  "key": 4000,
                  "type": ""
                }
              ],
              "num_sockets": 1,
              "num_vcpus_per_socket": 1,
              "memory_hot_plug": false,
              "template_controller_list": [
                {
                  "controller_type": "ParaVirtualSCSIController",
                  "type": "",
                  "bus_sharing": "noSharing",
                  "is_deleted": false,
                  "key": 1000
                }
              ],
              "controller_list": [],
              "memory_size_mib": 2048,
              "power_state": "poweron",
              "cpu_hot_add": false,
              "guest_customization": {
                "type": "",
                "cloud_init": "#cloud-config\nusers:\n  - name: \"centos\"\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']\n    ssh-authorized-keys:\n    - @@{ansible_public_key}@@\n    ssh_pwauth: True\n    disable_root: false\n \nruncmd:\n - [ hostnamectl, set-hostname, \"@@{vm_name}@@\" ]\n - [ ifdown, eth0 ]\n - [ ifup, eth0 ]",
                "customization_type": "GUEST_OS_LINUX",
                "customization_name": ""
              },
              "tag_list": [],
              "type": "",
              "account_uuid": "01eccf8a-e870-530b-c3a5-1bff2ed2f650",
              "disk_list": []
            },
            "template": "503c5c2c-1a61-33aa-5bba-9e6511692a21",
            "datastore": "ds:///vmfs/volumes/be77b032-1ec18851/",
            "storage_drs_mode": false,
            "storage_pod": "",
            "folder": null,
            "clone_is_template": false
          },
          "variable_list": []
        }
      ],
      "endpoint_definition_list": [],
      "credential_definition_list": [
        {
          "username": "admin",
          "description": "",
          "type": "PASSWORD",
          "secret": {
            "attrs": {
              "is_secret_modified": false,
              "secret_reference": {}
            }
          },
          "name": "awx",
          "cred_class": "static"
        },
        {
          "username": "salaheddine.gassim@nutanix.com",
          "description": "",
          "type": "PASSWORD",
          "secret": {
            "attrs": {
              "is_secret_modified": false,
              "secret_reference": {}
            }
          },
          "name": "jira",
          "cred_class": "static"
        },
        {
          "username": "admin",
          "description": "",
          "type": "PASSWORD",
          "secret": {
            "attrs": {
              "is_secret_modified": false,
              "secret_reference": {}
            }
          },
          "name": "jenkins",
          "cred_class": "static"
        },
        {
          "username": "centos",
          "description": "",
          "type": "KEY",
          "secret": {
            "attrs": {
              "is_secret_modified": false,
              "secret_reference": {}
            }
          },
          "name": "centos",
          "cred_class": "static"
        },
        {
          "username": "salah.gassim@emeagso.lab",
          "description": "",
          "type": "PASSWORD",
          "secret": {
            "attrs": {
              "is_secret_modified": false,
              "secret_reference": {}
            }
          },
          "name": "prism",
          "cred_class": "static"
        },
        {
          "username": "admin",
          "description": "",
          "type": "PASSWORD",
          "secret": {
            "attrs": {
              "is_secret_modified": false,
              "secret_reference": {}
            }
          },
          "name": "fortigate",
          "cred_class": "static"
        },
        {
          "username": "admin",
          "description": "",
          "type": "PASSWORD",
          "secret": {
            "attrs": {
              "is_secret_modified": false,
              "secret_reference": {}
            }
          },
          "name": "f5",
          "cred_class": "static"
        },
        {
          "username": "igor.zecevic@gso.lab",
          "description": "",
          "type": "PASSWORD",
          "secret": {
            "attrs": {
              "is_secret_modified": false,
              "secret_reference": {}
            }
          },
          "name": "vc",
          "cred_class": "static"
        },
        {
          "username": "administrator",
          "description": "",
          "type": "PASSWORD",
          "secret": {
            "attrs": {
              "is_secret_modified": false,
              "secret_reference": {}
            }
          },
          "name": "veeam",
          "cred_class": "static"
        },
        {
          "username": "nutanix",
          "description": "",
          "type": "PASSWORD",
          "secret": {
            "attrs": {
              "is_secret_modified": false,
              "secret_reference": {}
            }
          },
          "name": "eip",
          "cred_class": "static"
        }
      ],
      "package_definition_list": [
        {
          "description": "",
          "action_list": [],
          "type": "DEB",
          "service_local_reference_list": [
            {
              "kind": "app_service",
              "name": "CentOS7"
            }
          ],
          "name": "Package1",
          "version": "",
          "options": {
            "install_runbook": {
              "task_definition_list": [
                {
                  "target_any_local_reference": {
                    "kind": "app_package",
                    "name": "Package1"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [
                    {
                      "kind": "app_task",
                      "name": "AnsibleDeployment"
                    },
                    {
                      "kind": "app_task",
                      "name": "FortigateConfigAdd"
                    }
                  ],
                  "name": "f6e26c73_dag",
                  "attrs": {
                    "edges": [
                      "@{from_task_reference=; edge_type=user_defined; type=; to_task_reference=}"
                    ],
                    "type": ""
                  },
                  "timeout_secs": "0",
                  "type": "DAG",
                  "variable_list": []
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [],
                  "name": "AnsibleDeployment",
                  "attrs": {
                    "type": "CALL_RUNBOOK",
                    "inarg_list": [],
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "bf14dde8_runbook"
                    }
                  },
                  "timeout_secs": "0",
                  "type": "CALL_RUNBOOK",
                  "variable_list": []
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [],
                  "name": "FortigateConfigAdd",
                  "attrs": {
                    "type": "CALL_RUNBOOK",
                    "inarg_list": [],
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "141bd772_runbook"
                    }
                  },
                  "timeout_secs": "0",
                  "type": "CALL_RUNBOOK",
                  "variable_list": []
                }
              ],
              "description": "",
              "name": "59692b6a_runbook",
              "main_task_local_reference": {
                "kind": "app_task",
                "name": "f6e26c73_dag"
              },
              "variable_list": []
            },
            "type": "",
            "uninstall_runbook": {
              "task_definition_list": [
                {
                  "target_any_local_reference": {
                    "kind": "app_package",
                    "name": "Package1"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [
                    {
                      "kind": "app_task",
                      "name": "AwxDeleteHost"
                    },
                    {
                      "kind": "app_task",
                      "name": "FortigateConfigRemove"
                    },
                    {
                      "kind": "app_task",
                      "name": "CloseJiraTicket"
                    }
                  ],
                  "name": "2c6de7db_dag",
                  "attrs": {
                    "edges": [
                      "@{from_task_reference=; edge_type=user_defined; type=; to_task_reference=}",
                      "@{from_task_reference=; edge_type=user_defined; type=; to_task_reference=}"
                    ],
                    "type": ""
                  },
                  "timeout_secs": "0",
                  "type": "DAG",
                  "variable_list": []
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [],
                  "name": "AwxDeleteHost",
                  "attrs": {
                    "script": "# region headers\n# escript-template v20190605 / stephane.bourdeaud@nutanix.com\n# * author:     jose.gomez@nutanix.com\n# * version:    20200214\n# task_type:    Execute\n# task_name:    AwxDeleteHost\n# description:  Delete host from AWX inventory \n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\nawx_username = '@@{awx.username}@@'\nawx_password = '@@{awx.secret}@@'\nawx_api = '@@{awx_ip}@@'\nhost_id = int('@@{awx_host_id}@@')\n# endregion\n\n# region functions\ndef make_api_call(url,method,username,username_secret):\n    \"\"\"Makes an API call to an external API.\n\n    Args:\n        url: The URL for the external REST API endpoint.\n        method: The REST method to use.\n        username: The API user name.\n        username_secret: The API user name password.\n        payload: The JSON payload to include in the call.\n    \n    Returns:\n        The API response.\n    \"\"\"\n    headers = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n    }\n    while True:\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            headers=headers,\n            verify=False\n        )\n\n        # deal with the result/response\n        if resp.ok: \n            exit(0)\n\n        else:\n            print \"Luis\"\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(\n                json.dumps(\n                    json.loads(resp.content), \n                    indent=4)))\n            exit(1)\n\ndef awx_delete_host(api,username,password,host_id):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"80\"\n    api_endpoint = \"/api/v2/hosts/\"\n    url = \"http://{}:{}{}{}\".format(\n        api,\n        api_port,\n        api_endpoint,\n        host_id\n    )\n    method = \"DELETE\"\n\n    # endregion\n\n    r = make_api_call(\n        url,\n        method,\n        username,\n        password\n        )\n\n    if r.ok:\n        resp = json.loads(r.content)\n        print 'Host with id {0} removed from inventory'.format(host_id)\n        print \"Here\"\n        exit(0)\n    else:\n        print 'Post request failed', r.content\n        print \"There\"\n        exit(1)\n# endregion\n        \nawx_delete_host(awx_api,awx_username,awx_password,host_id)",
                    "type": "",
                    "command_line_args": "",
                    "exit_status": [],
                    "script_type": "static"
                  },
                  "timeout_secs": "0",
                  "type": "EXEC",
                  "variable_list": []
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [],
                  "name": "FortigateConfigRemove",
                  "attrs": {
                    "type": "CALL_RUNBOOK",
                    "inarg_list": [],
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "bb908a06_runbook"
                    }
                  },
                  "timeout_secs": "0",
                  "type": "CALL_RUNBOOK",
                  "variable_list": []
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [],
                  "name": "CloseJiraTicket",
                  "attrs": {
                    "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraUpdateTicket\n# description:  updating the ticket status with the provided payload\n# input vars:   transition_id, ticket_name\n# output vars:  none\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\ntransition_id = 41 # 31 = in progress / 41 = Done\nticket_name = \"@@{jira_child_ticket}@@\" # ticket that need to be updated\n# endregion\nif int(\"@@{calm_array_index}@@\") != 0:\n    exit(0)\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/api/3/issue/\" + ticket_name + \"/transitions\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\nupdate_payload = {\n    \"transition\": {\n    \"id\": transition_id\n  }\n    \n}\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, params=json.dumps(update_payload),\\\n              auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n              verify=False\n             )\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful. Status code: {}\".format(resp.status_code))    \n    \nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion",
                    "type": "",
                    "command_line_args": "",
                    "exit_status": [],
                    "script_type": "static"
                  },
                  "timeout_secs": "0",
                  "type": "EXEC",
                  "variable_list": []
                }
              ],
              "description": "",
              "name": "d1b88acb_runbook",
              "main_task_local_reference": {
                "kind": "app_task",
                "name": "2c6de7db_dag"
              },
              "variable_list": []
            },
            "upgrade_runbook": {}
          },
          "variable_list": []
        },
        {
          "description": "",
          "action_list": [],
          "type": "DEB",
          "service_local_reference_list": [
            {
              "kind": "app_service",
              "name": "CentOS7"
            }
          ],
          "name": "Package2",
          "version": "",
          "options": {
            "install_runbook": {
              "task_definition_list": [
                {
                  "target_any_local_reference": {
                    "kind": "app_package",
                    "name": "Package2"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [],
                  "name": "fb7cb95f_dag",
                  "attrs": {
                    "edges": [],
                    "type": ""
                  },
                  "timeout_secs": "0",
                  "type": "DAG",
                  "variable_list": []
                }
              ],
              "description": "",
              "name": "0ee41ef2_runbook",
              "main_task_local_reference": {
                "kind": "app_task",
                "name": "fb7cb95f_dag"
              },
              "variable_list": []
            },
            "type": "",
            "uninstall_runbook": {
              "task_definition_list": [
                {
                  "target_any_local_reference": {
                    "kind": "app_package",
                    "name": "Package2"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [],
                  "name": "246b9a1a_dag",
                  "attrs": {
                    "edges": [],
                    "type": ""
                  },
                  "timeout_secs": "0",
                  "type": "DAG",
                  "variable_list": []
                }
              ],
              "description": "",
              "name": "d4d60476_runbook",
              "main_task_local_reference": {
                "kind": "app_task",
                "name": "246b9a1a_dag"
              },
              "variable_list": []
            },
            "upgrade_runbook": {}
          },
          "variable_list": []
        },
        {
          "description": "",
          "action_list": [],
          "type": "DEB",
          "service_local_reference_list": [
            {
              "kind": "app_service",
              "name": "CentOS7"
            }
          ],
          "name": "Package1_cloned_0",
          "version": "",
          "options": {
            "install_runbook": {
              "task_definition_list": [
                {
                  "target_any_local_reference": {
                    "kind": "app_package",
                    "name": "Package1_cloned_0"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [
                    {
                      "kind": "app_task",
                      "name": "AnsibleDeployment"
                    },
                    {
                      "kind": "app_task",
                      "name": "VcAddFolder"
                    },
                    {
                      "kind": "app_task",
                      "name": "VcAddTag"
                    },
                    {
                      "kind": "app_task",
                      "name": "VcAddDrsRules"
                    },
                    {
                      "kind": "app_task",
                      "name": "FortigateConfigAdd"
                    },
                    {
                      "kind": "app_task",
                      "name": "VeeamCreateJob"
                    }
                  ],
                  "name": "f6e26c73_dag_cloned_1",
                  "attrs": {
                    "edges": [
                      "@{from_task_reference=; edge_type=user_defined; type=; to_task_reference=}",
                      "@{from_task_reference=; edge_type=user_defined; type=; to_task_reference=}",
                      "@{from_task_reference=; edge_type=user_defined; type=; to_task_reference=}",
                      "@{from_task_reference=; edge_type=user_defined; type=; to_task_reference=}",
                      "@{from_task_reference=; edge_type=user_defined; type=; to_task_reference=}"
                    ],
                    "type": ""
                  },
                  "timeout_secs": "0",
                  "type": "DAG",
                  "variable_list": []
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [],
                  "name": "AnsibleDeployment",
                  "attrs": {
                    "type": "CALL_RUNBOOK",
                    "inarg_list": [],
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "bf14dde8_runbook"
                    }
                  },
                  "timeout_secs": "0",
                  "type": "CALL_RUNBOOK",
                  "variable_list": []
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [],
                  "name": "VcAddFolder",
                  "attrs": {
                    "type": "CALL_RUNBOOK",
                    "inarg_list": [],
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "90dbfa0f_runbook"
                    }
                  },
                  "timeout_secs": "0",
                  "type": "CALL_RUNBOOK",
                  "variable_list": []
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [],
                  "name": "VcAddTag",
                  "attrs": {
                    "type": "CALL_RUNBOOK",
                    "inarg_list": [],
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "3dcfda7d_runbook"
                    }
                  },
                  "timeout_secs": "0",
                  "type": "CALL_RUNBOOK",
                  "variable_list": []
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [],
                  "name": "VcAddDrsRules",
                  "attrs": {
                    "type": "CALL_RUNBOOK",
                    "inarg_list": [],
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "895cec1a_runbook"
                    }
                  },
                  "timeout_secs": "0",
                  "type": "CALL_RUNBOOK",
                  "variable_list": []
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [],
                  "name": "FortigateConfigAdd",
                  "attrs": {
                    "type": "CALL_RUNBOOK",
                    "inarg_list": [],
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "141bd772_runbook"
                    }
                  },
                  "timeout_secs": "0",
                  "type": "CALL_RUNBOOK",
                  "variable_list": []
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [],
                  "name": "VeeamCreateJob",
                  "attrs": {
                    "type": "CALL_RUNBOOK",
                    "inarg_list": [],
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "99b33415_runbook"
                    }
                  },
                  "timeout_secs": "0",
                  "type": "CALL_RUNBOOK",
                  "variable_list": []
                }
              ],
              "description": "",
              "name": "59692b6a_runbook_cloned_0",
              "main_task_local_reference": {
                "kind": "app_task",
                "name": "f6e26c73_dag_cloned_1"
              },
              "variable_list": []
            },
            "type": "",
            "uninstall_runbook": {
              "task_definition_list": [
                {
                  "target_any_local_reference": {
                    "kind": "app_package",
                    "name": "Package1_cloned_0"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [
                    {
                      "kind": "app_task",
                      "name": "AwxDeleteHost"
                    },
                    {
                      "kind": "app_task",
                      "name": "FortigateConfigRemove"
                    },
                    {
                      "kind": "app_task",
                      "name": "VeaamDelJob"
                    },
                    {
                      "kind": "app_task",
                      "name": "VcDelDrsRules"
                    },
                    {
                      "kind": "app_task",
                      "name": "VcDelTag"
                    },
                    {
                      "kind": "app_task",
                      "name": "VcDelFolder"
                    },
                    {
                      "kind": "app_task",
                      "name": "CloseJiraTicketEmpty"
                    }
                  ],
                  "name": "2c6de7db_dag_cloned_1",
                  "attrs": {
                    "edges": [
                      "@{from_task_reference=; edge_type=user_defined; type=; to_task_reference=}",
                      "@{from_task_reference=; edge_type=user_defined; type=; to_task_reference=}",
                      "@{from_task_reference=; edge_type=user_defined; type=; to_task_reference=}",
                      "@{from_task_reference=; edge_type=user_defined; type=; to_task_reference=}",
                      "@{from_task_reference=; edge_type=user_defined; type=; to_task_reference=}",
                      "@{from_task_reference=; edge_type=user_defined; type=; to_task_reference=}"
                    ],
                    "type": ""
                  },
                  "timeout_secs": "0",
                  "type": "DAG",
                  "variable_list": []
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [],
                  "name": "AwxDeleteHost",
                  "attrs": {
                    "script": "# region headers\n# escript-template v20190605 / stephane.bourdeaud@nutanix.com\n# * author:     jose.gomez@nutanix.com\n# * version:    20200214\n# task_type:    Execute\n# task_name:    AwxDeleteHost\n# description:  Delete host from AWX inventory \n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\nawx_username = '@@{awx.username}@@'\nawx_password = '@@{awx.secret}@@'\nawx_api = '@@{awx_ip}@@'\nhost_id = int('@@{awx_host_id}@@')\n# endregion\n\n# region functions\ndef make_api_call(url,method,username,username_secret):\n    \"\"\"Makes an API call to an external API.\n\n    Args:\n        url: The URL for the external REST API endpoint.\n        method: The REST method to use.\n        username: The API user name.\n        username_secret: The API user name password.\n        payload: The JSON payload to include in the call.\n    \n    Returns:\n        The API response.\n    \"\"\"\n    headers = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n    }\n    while True:\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            headers=headers,\n            verify=False\n        )\n\n        # deal with the result/response\n        if resp.ok: \n            exit(0)\n\n        else:\n            print \"Luis\"\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(\n                json.dumps(\n                    json.loads(resp.content), \n                    indent=4)))\n            exit(1)\n\ndef awx_delete_host(api,username,password,host_id):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"80\"\n    api_endpoint = \"/api/v2/hosts/\"\n    url = \"http://{}:{}{}{}\".format(\n        api,\n        api_port,\n        api_endpoint,\n        host_id\n    )\n    method = \"DELETE\"\n\n    # endregion\n\n    r = make_api_call(\n        url,\n        method,\n        username,\n        password\n        )\n\n    if r.ok:\n        resp = json.loads(r.content)\n        print 'Host with id {0} removed from inventory'.format(host_id)\n        print \"Here\"\n        exit(0)\n    else:\n        print 'Post request failed', r.content\n        print \"There\"\n        exit(1)\n# endregion\n        \nawx_delete_host(awx_api,awx_username,awx_password,host_id)",
                    "type": "",
                    "command_line_args": "",
                    "exit_status": [],
                    "script_type": "static"
                  },
                  "timeout_secs": "0",
                  "type": "EXEC",
                  "variable_list": []
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [],
                  "name": "FortigateConfigRemove",
                  "attrs": {
                    "type": "CALL_RUNBOOK",
                    "inarg_list": [],
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "bb908a06_runbook"
                    }
                  },
                  "timeout_secs": "0",
                  "type": "CALL_RUNBOOK",
                  "variable_list": []
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [],
                  "name": "VeaamDelJob",
                  "attrs": {
                    "type": "CALL_RUNBOOK",
                    "inarg_list": [],
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "a25b9ced_runbook"
                    }
                  },
                  "timeout_secs": "0",
                  "type": "CALL_RUNBOOK",
                  "variable_list": []
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [],
                  "name": "VcDelDrsRules",
                  "attrs": {
                    "type": "CALL_RUNBOOK",
                    "inarg_list": [],
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "e7f388fd_runbook"
                    }
                  },
                  "timeout_secs": "0",
                  "type": "CALL_RUNBOOK",
                  "variable_list": []
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [],
                  "name": "VcDelTag",
                  "attrs": {
                    "type": "CALL_RUNBOOK",
                    "inarg_list": [],
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "65d2b330_runbook"
                    }
                  },
                  "timeout_secs": "0",
                  "type": "CALL_RUNBOOK",
                  "variable_list": []
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [],
                  "name": "VcDelFolder",
                  "attrs": {
                    "type": "CALL_RUNBOOK",
                    "inarg_list": [],
                    "runbook_reference": {
                      "kind": "app_runbook",
                      "name": "9aa10176_runbook"
                    }
                  },
                  "timeout_secs": "0",
                  "type": "CALL_RUNBOOK",
                  "variable_list": []
                },
                {
                  "target_any_local_reference": {
                    "kind": "app_service",
                    "name": "CentOS7"
                  },
                  "retries": "0",
                  "description": "",
                  "inherit_target": false,
                  "child_tasks_local_reference_list": [],
                  "name": "CloseJiraTicketEmpty",
                  "attrs": {
                    "script": "print(\"empty\")",
                    "type": "",
                    "command_line_args": "",
                    "exit_status": [],
                    "script_type": "static"
                  },
                  "timeout_secs": "0",
                  "type": "EXEC",
                  "variable_list": []
                }
              ],
              "description": "",
              "name": "d1b88acb_runbook_cloned_0",
              "main_task_local_reference": {
                "kind": "app_task",
                "name": "2c6de7db_dag_cloned_1"
              },
              "variable_list": []
            },
            "upgrade_runbook": {}
          },
          "variable_list": []
        }
      ],
      "app_profile_list": [
        {
          "deployment_create_list": [
            {
              "type": "GREENFIELD",
              "action_list": [],
              "name": "7b8be9c1_deployment",
              "min_replicas": "@@{instance_count}@@",
              "default_replicas": "@@{instance_count}@@",
              "depends_on_list": [],
              "published_service_local_reference_list": [],
              "max_replicas": "4",
              "package_local_reference_list": [
                {
                  "kind": "app_package",
                  "name": "Package1"
                }
              ],
              "substrate_local_reference": {
                "kind": "app_substrate",
                "name": "CentOSVm"
              },
              "variable_list": [],
              "description": ""
            }
          ],
          "environment_reference_list": [],
          "application_url": "",
          "description": "",
          "action_list": [
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=AddInstance}",
                      "@{kind=app_task; name=my_scale_out}"
                    ],
                    "name": "49a380fa_dag",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_blueprint_deployment",
                      "name": "7b8be9c1_deployment"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "AddInstance",
                    "attrs": {
                      "scaling_count": "1",
                      "type": "",
                      "scaling_type": "SCALEOUT"
                    },
                    "timeout_secs": "0",
                    "type": "SCALING",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "my_scale_out",
                    "attrs": {
                      "script": "print(\"bof\")",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "c875b7ca_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "49a380fa_dag"
                },
                "variable_list": []
              },
              "name": "Scale Out"
            },
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=RemoveInstance}"
                    ],
                    "name": "72a3d1a3_dag",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_blueprint_deployment",
                      "name": "7b8be9c1_deployment"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "RemoveInstance",
                    "attrs": {
                      "scaling_count": "1",
                      "type": "",
                      "scaling_type": "SCALEIN"
                    },
                    "timeout_secs": "0",
                    "type": "SCALING",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "e3b02cf9_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "72a3d1a3_dag"
                },
                "variable_list": []
              },
              "name": "Scale In"
            },
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=CreateJiraTicket}",
                      "@{kind=app_task; name=LinkJiraParent}",
                      "@{kind=app_task; name=CreateVeeamBackup}",
                      "@{kind=app_task; name=TagVeeamBackup}",
                      "@{kind=app_task; name=StartVeeamBackup}",
                      "@{kind=app_task; name=CloseJiraTicket}"
                    ],
                    "name": "ecb3e0ba_dag",
                    "attrs": {
                      "edges": "    ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "CreateJiraTicket",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraCreateTicket\n# description:  Jira ticket creation using the deployed vm specs\n# input vars:   application_name, jira_project_key\n# output vars:  jira_ticket_name\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\njira_project_key = \"@@{jira_project_name}@@\"\napplication_name = \"@@{calm_application_name}@@\"\n# endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/api/3/issue\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\ncreate_payload = {\n    \"fields\": {\n    \"project\": {\n      \"key\": jira_project_key\n    },\n    \"description\": {\n      \"version\": 1,\n      \"type\": \"doc\",\n      \"content\": [\n        {\n          \"type\": \"paragraph\",\n          \"content\": [\n            {\n              \"type\": \"text\",\n              \"text\": \"Backup in progress\"\n            }\n          ]\n        }\n      ]\n    },\n    \"summary\": \"Backing-Up \"+ application_name,\n        \"labels\": [\n      \"calm\"\n    ],        \n    \"issuetype\": {\n      \"name\": \"Task\"\n    }\n  }\n    \n}\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, params=json.dumps(create_payload),\\\n              auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n              verify=False\n             )\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful. Status code: {}\".format(resp.status_code))\n    result = json.loads(resp.content)\n    print(\"Ticket {} was created\".format(result['key']))\n    print \"jira_child_ticket=\",result['key']\n    \n    \nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion",
                      "eval_variables": "jira_child_ticket",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "LinkJiraParent",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraUpdateTicket\n# description:  Link a ticket to it's parent\n# input vars:   jira_link_type\n# output vars:  none\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\njira_link_type = \"@@{jira_link_type}@@\" #10003 = relates to\njira_parent_ticket = \"@@{jira_parent_ticket}@@\"\njira_child_ticket = \"@@{jira_child_ticket}@@\"\n# endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/api/3/issueLink\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\n\nlink_payload = {\n    \"outwardIssue\": {\n        \"key\": jira_child_ticket\n    },\n    \"inwardIssue\": {\n        \"key\": jira_parent_ticket\n    },\n    \"type\": {\n        \"id\": jira_link_type\n    }\n}\n\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, params=json.dumps(link_payload),\\\n              auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n              verify=False\n             )\n\nprint(resp)\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful. Status code: {}\".format(resp.status_code))    \n    \nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(resp.content))\n    exit(1)\n# endregion\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "CreateVeeamBackup",
                    "attrs": {
                      "script": "print(\"ok\")",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "TagVeeamBackup",
                    "attrs": {
                      "script": "print(\"ok\")",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "StartVeeamBackup",
                    "attrs": {
                      "script": "print(\"ok\")",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "CloseJiraTicket",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraUpdateTicket\n# description:  updating the ticket status with the provided payload\n# input vars:   transition_id, ticket_name\n# output vars:  none\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\ntransition_id = 41 # 31 = in progress / 41 = Done\nticket_name = \"@@{jira_child_ticket}@@\" # ticket that need to be updated\n# endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/api/3/issue/\" + ticket_name + \"/transitions\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\nupdate_payload = {\n    \"transition\": {\n    \"id\": transition_id\n  }\n    \n}\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, params=json.dumps(update_payload),\\\n              auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n              verify=False\n             )\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful. Status code: {}\".format(resp.status_code))    \n    \nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "ab6f61cd_runbook",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "ecb3e0ba_dag"
                },
                "variable_list": []
              },
              "name": "Take Backup"
            }
          ],
          "name": "Default",
          "restore_config_list": [],
          "snapshot_config_list": [],
          "patch_list": [],
          "variable_list": [
            {
              "val_type": "STRING",
              "is_mandatory": true,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "source_app",
              "value": "WWW",
              "label": "Which application to install?",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "WWW",
                  "CMS",
                  "SFTP",
                  "Captive2 Server",
                  "Virgin API Server",
                  "Logstash",
                  "Identity Server",
                  "Support Manager",
                  "Radius",
                  "Captive Manager Server",
                  "Policy Manager Master & Slave"
                ]
              }
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^.*$"
              },
              "val_type": "STRING",
              "is_mandatory": true,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "app_prefix",
              "value": "entbase",
              "label": "What is the application prefix?",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "entbase"
                ]
              }
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^[\\d]*$"
              },
              "val_type": "INT",
              "is_mandatory": true,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "instance_count",
              "value": "1",
              "label": "How many instance to deploy?",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^.*$"
              },
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "EXEC_LOCAL",
              "library_reference": "2f04a001-f227-483e-9eb8-eba2b46ba16f",
              "name": "target_app",
              "value": "",
              "label": "Which application to replace?",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "options": {
                "type": "EXEC",
                "attrs": {
                  "script": "# region headers\n# escript-template v20190605 / stephane.bourdeaud@nutanix.com\n# * author:       stephane.bourdeaud@nutanix.com\n# * version:      2020/01/22\n# task_name:      CalmGetApp\n# description:    This script gets the list of application instances from Calm.\n# TODO: test\n# endregion\n\n# region capture Calm macros\npc_ip = '@@{prism_ip}@@'\nusername = '@@{prism_username}@@'\nusername_secret = '@@{prism_secret}@@'\n# endregion\n\n# region prepare variables\nheaders = {'content-type': 'application/json'}\n# endregion\n\n# region REST call: Get Apps\nmethod = 'POST'\nurl = \"https://{}:9440/api/nutanix/v3/apps/list\".format(pc_ip)\npayload = {\n    \"kind\": \"app\",\n    \"length\": 250\n}\n#print(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    params=json.dumps(payload),\n    headers=headers,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    verify=False\n)\n\nif resp.ok:\n    json_resp = json.loads(resp.content)\n    if json_resp['metadata']['total_matches'] > 0:\n        apps_list = []\n        for app in json_resp['entities']:\n            apps_list.append(app['metadata']['name'])\n        print(\",\".join(apps_list))\n    else:\n        print(\"Could not find any apps.\")\n        exit(1)\n    exit(0)\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion",
                  "type": "EXEC",
                  "command_line_args": "",
                  "exit_status": [],
                  "script_type": "static"
                }
              }
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^.*$"
              },
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "LIST",
              "type": "EXEC_LOCAL",
              "name": "fortigate_policy",
              "value": "",
              "label": "What firewall policy you would like to apply?",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "options": {
                "type": "EXEC",
                "attrs": {
                  "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    FortigateListAllPolicies\n# description:  List all Fortigate policies\n# input vars:   fortigate cookie and csrf token\n# output vars:  fortigate_policy_id, fortigate_policy_name\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate_username}@@\"\nfortigate_password = \"@@{fortigate_password}@@\"\napi_server_port = 80\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\n# endregion\n\ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'text/plain'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    #print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        #print(\"Successfully authenticated\")\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\ndef fortiget_get_policies(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/policy/?format=policyid|name&skip=1&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n        'Accept': 'application/json'\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    #print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        policies_list = []\n        #print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        for policy in result['results']:\n            policies_list.append(str(policy['policyid']) + \"-\" + str(policy['name']))\n            #print(\"{}-{}\".format(policy['policyid'],policy['name']))\n        print(\",\".join(policies_list))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \n\nfortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\nfortiget_get_policies(api_server, api_server_port, fortigate_csrf_token,\n                      fortigate_cookie, fortigate_vdom)\n",
                  "type": "EXEC",
                  "command_line_args": "",
                  "exit_status": [],
                  "script_type": "static"
                }
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "f5_endpoint",
              "value": "10.68.99.208",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "fortigate_username",
              "value": "admin",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "fortigate_password",
              "value": "nutanix/4u",
              "label": "",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^.*$"
              },
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "fortigate_vdom",
              "value": "root",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "prism_secret",
              "value": "nutanix/4u",
              "label": "",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "fortigate_endpoint",
              "value": "10.68.99.222",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "prism_username",
              "value": "salah.gassim@emeagso.lab",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "jenkins_endpoint",
              "value": "10.68.99.210",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "SECRET",
              "name": "ansible_public_key",
              "value": "",
              "label": "",
              "attrs": {
                "is_secret_modified": false,
                "secret_reference": {},
                "type": "SECRET"
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "jira_parent_ticket",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^[\\d]*$"
              },
              "val_type": "INT",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "jira_link_type",
              "value": "10003",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "jira_project_name",
              "value": "WIFICALM",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "jira_endpoint",
              "value": "o2channels.atlassian.net",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "jenkins_ip",
              "value": "10.68.99.210",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "awx_ip",
              "value": "10.68.99.210",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "prism_ip",
              "value": "10.68.97.150",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            }
          ]
        },
        {
          "deployment_create_list": [
            {
              "type": "GREENFIELD",
              "action_list": [],
              "name": "5bd7300a_deployment",
              "min_replicas": "1",
              "default_replicas": "1",
              "depends_on_list": [],
              "published_service_local_reference_list": [],
              "max_replicas": "1",
              "package_local_reference_list": [
                {
                  "kind": "app_package",
                  "name": "Package2"
                }
              ],
              "substrate_local_reference": {
                "kind": "app_substrate",
                "name": "CentOSVm_2"
              },
              "variable_list": [],
              "description": ""
            }
          ],
          "environment_reference_list": [],
          "application_url": "",
          "description": "",
          "action_list": [],
          "name": "Profile2",
          "restore_config_list": [],
          "snapshot_config_list": [],
          "patch_list": [],
          "variable_list": []
        },
        {
          "deployment_create_list": [
            {
              "type": "GREENFIELD",
              "action_list": [],
              "name": "7af2d8ea_deployment",
              "min_replicas": "1",
              "default_replicas": "@@{instance_count}@@",
              "depends_on_list": [],
              "published_service_local_reference_list": [],
              "max_replicas": "4",
              "package_local_reference_list": [
                {
                  "kind": "app_package",
                  "name": "Package1_cloned_0"
                }
              ],
              "substrate_local_reference": {
                "kind": "app_substrate",
                "name": "CentOSVm_Vmw"
              },
              "variable_list": [],
              "description": ""
            }
          ],
          "environment_reference_list": [],
          "application_url": "",
          "description": "",
          "action_list": [
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=AddInstance}"
                    ],
                    "name": "49a380fa_dag_cloned_1",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_blueprint_deployment",
                      "name": "7af2d8ea_deployment"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "AddInstance",
                    "attrs": {
                      "scaling_count": "1",
                      "type": "",
                      "scaling_type": "SCALEOUT"
                    },
                    "timeout_secs": "0",
                    "type": "SCALING",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "c875b7ca_runbook_cloned_0",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "49a380fa_dag_cloned_1"
                },
                "variable_list": []
              },
              "name": "Scale Out"
            },
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=RemoveInstance}"
                    ],
                    "name": "72a3d1a3_dag_cloned_1",
                    "attrs": {
                      "edges": "",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_blueprint_deployment",
                      "name": "7af2d8ea_deployment"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "RemoveInstance",
                    "attrs": {
                      "scaling_count": "1",
                      "type": "",
                      "scaling_type": "SCALEIN"
                    },
                    "timeout_secs": "0",
                    "type": "SCALING",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "e3b02cf9_runbook_cloned_0",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "72a3d1a3_dag_cloned_1"
                },
                "variable_list": []
              },
              "name": "Scale In"
            },
            {
              "description": "",
              "type": "user",
              "critical": false,
              "runbook": {
                "task_definition_list": [
                  {
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [
                      "@{kind=app_task; name=CreateJiraTicket_cloned_1}",
                      "@{kind=app_task; name=VeeamStartJob}",
                      "@{kind=app_task; name=CloseJiraTicket_cloned_1}",
                      "@{kind=app_task; name=LinkJiraParent_cloned_1}"
                    ],
                    "name": "ecb3e0ba_dag_cloned_1",
                    "attrs": {
                      "edges": " ",
                      "type": ""
                    },
                    "timeout_secs": "0",
                    "type": "DAG",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "CreateJiraTicket_cloned_1",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraCreateTicket\n# description:  Jira ticket creation using the deployed vm specs\n# input vars:   application_name, jira_project_key\n# output vars:  jira_ticket_name\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\njira_project_key = \"@@{jira_project_name}@@\"\napplication_name = \"@@{calm_application_name}@@\"\n# endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/api/3/issue\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\ncreate_payload = {\n    \"fields\": {\n    \"project\": {\n      \"key\": jira_project_key\n    },\n    \"description\": {\n      \"version\": 1,\n      \"type\": \"doc\",\n      \"content\": [\n        {\n          \"type\": \"paragraph\",\n          \"content\": [\n            {\n              \"type\": \"text\",\n              \"text\": \"Backup in progress\"\n            }\n          ]\n        }\n      ]\n    },\n    \"summary\": \"Backing-Up \"+ application_name,\n        \"labels\": [\n      \"calm\"\n    ],        \n    \"issuetype\": {\n      \"name\": \"Task\"\n    }\n  }\n    \n}\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, params=json.dumps(create_payload),\\\n              auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n              verify=False\n             )\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful. Status code: {}\".format(resp.status_code))\n    result = json.loads(resp.content)\n    print(\"Ticket {} was created\".format(result['key']))\n    print \"jira_child_ticket=\",result['key']\n    \n    \nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion",
                      "eval_variables": "jira_child_ticket",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "VeeamStartJob",
                    "attrs": {
                      "exit_status": "",
                      "script": "# region headers\n# * author:     igor.zecevic@nutanix.com\n# * version:    v1.0 - initial version\n# * date:       11/03/2020\n# task_name:    VeeamStartJob\n# description:  Starts a Veeam Job\n#               The script starts a Veeam Job using the \n#               the veeam_job_url on VeeamGetJob\n# input vars:   veeam_session_cookie, veeam_job_start_url, api_server\n# output vars:  none\n# endregion\n\n# region dealing with Scaling In/Out the application\n# # this script will be executed only on the first Service/Instance\n# (ie: Service[0])\nif \"@@{calm_array_index}@@\" != \"0\":\n    print(\"This task is not required on this Instance ..\")\n    print(\"Skipping this task ..\")\n    exit(0)\n# endregion\n\n# region capture Calm variables\nusername = \"@@{veeam.username}@@\"\npassword = \"@@{veeam.secret}@@\"\nveeam_job_name = \"@@{calm_application_name}@@\"  # getting the calm apps job\napi_server = \"@@{veeam_endpoint}@@\"\n# endregion\n\n# region API call function\ndef process_request(url, method, headers, payload=None):\n    if (payload is not None):\n        payload = json.dumps(payload)\n    if \"Cookie\" not in headers:\n        r = urlreq(url, verb=method, auth='BASIC', user=username, passwd=password, params=payload, verify=False, headers=headers)\n    else:\n        r = urlreq(url, verb=method, params=payload, verify=False, headers=headers)\n    if r.ok:\n        print(\"Request was successful\")\n        print(\"Status code: {}\".format(r.status_code))\n    else:\n        print(\"Request failed\")\n        print('Status code: {}'.format(r.status_code))\n        print(\"Headers: {}\".format(headers))\n        if (payload is not None):\n            print(\"Payload: {}\".format(json.dumps(payload)))\n        if r.content:\n            print('Response: {}'.format(json.dumps(json.loads(r.content), indent=4)))\n        exit(1)\n    return r\n# endregion\n\n# region login\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/sessionMngr/?v=latest\"\nmethod = \"POST\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n\n# making the call \nprint(\"STEP: Logging in to Veeam...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the session_cookie and session_id\nresp_parse = json.loads(resp.content)\nveeam_session_cookie = resp.headers.get('X-RestSvcSessionId')\nveeam_session_id = resp_parse['SessionId']\n# endregion\n\n# region main processing\n# region prepare api call\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/jobs\"\nbase_url = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n# endregion\n\n# region get job\n# make the api call\nprint(\"STEP: Gettings jobs...\")\nmethod = \"GET\"\nprint(\"Making a {} API call to {}\".format(method, base_url))\nresp = process_request(base_url, method, headers)\n\n# get the job_url\njob_url = \"\"\nresp_parse = json.loads(resp.content)\nfor job in resp_parse['Refs']:\n    if job['Name'] == veeam_job_name:\n        job_url = job['Href']\n                \nif job_url:\n    veeam_job_url=job_url.rsplit('/', 1)[1] #get only the last occurence\nelse:\n    print(\"Error: Backup Job \"+veeam_job_name+\" is not present ..\")\n    exit(1)\n# endregion\n\n# region get job backup sessions\n# make the api call\nprint(\"STEP: Get backup sessions...\")\nmethod = \"GET\"\nurl = \"{0}/{1}/backupSessions?format=entity\".format(base_url, veeam_job_url)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# check if any job is currently running\nresp_parse = json.loads(resp.content)\nfor job in resp_parse['BackupJobSessions']:\n    if ((job['JobName'] == veeam_job_name) and (job['State'] == \"Working\")):\n        print(\"A job is currently running ..\")\n        print (\"Job's name: {}\" .format(job['JobName']))\n        print (\"Job's session name: {}\" .format(job['Name']))\n        print (\"Job's progress: {0}, state: {1}, result: {2}\" .format(job['Progress'], job['State'], job['Result']))\n        exit (1)\n# endregion\n\n# region start job\n# make the api call\nprint(\"STEP: Start job ...\")\nmethod = \"POST\"\nurl = \"{0}/{1}?action=start\".format(base_url, veeam_job_url)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n\n# pass the task_id so that it may be captured by Calm.\nresp_parse = json.loads(resp.content)\ntask_id = resp_parse['TaskId']\nprint (\"veeam_task_id={}\".format(task_id))\n# endregion\n# endregion\n\n# region logout\napi_server_port = \"9398\"\napi_server_endpoint = \"/api/logonSessions\"\nmethod = \"DELETE\"\nurl = \"https://{}:{}{}\".format(api_server, api_server_port, api_server_endpoint)\nheaders = {'Content-Type': 'application/json', 'Accept': 'application/json', 'X-RestSvcSessionId': veeam_session_cookie}\n\n# making the call \nprint(\"STEP: Logging out of Veeam...\")\nurl = \"{0}/{1}\".format(url, veeam_session_id)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, headers)\n# endregion\n\nexit(0)",
                      "eval_variables": "veeam_task_id",
                      "eval_scope": "local",
                      "type": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "SET_VARIABLE",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "CloseJiraTicket_cloned_1",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraUpdateTicket\n# description:  updating the ticket status with the provided payload\n# input vars:   transition_id, ticket_name\n# output vars:  none\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\ntransition_id = 41 # 31 = in progress / 41 = Done\nticket_name = \"@@{jira_child_ticket}@@\" # ticket that need to be updated\n# endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/api/3/issue/\" + ticket_name + \"/transitions\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\nupdate_payload = {\n    \"transition\": {\n    \"id\": transition_id\n  }\n    \n}\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, params=json.dumps(update_payload),\\\n              auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n              verify=False\n             )\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful. Status code: {}\".format(resp.status_code))    \n    \nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  },
                  {
                    "target_any_local_reference": {
                      "kind": "app_service",
                      "name": "CentOS7"
                    },
                    "retries": "0",
                    "description": "",
                    "inherit_target": false,
                    "child_tasks_local_reference_list": [],
                    "name": "LinkJiraParent_cloned_1",
                    "attrs": {
                      "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/20200219 - initial version\n# task_name:    JiraUpdateTicket\n# description:  Link a ticket to it's parent\n# input vars:   jira_link_type\n# output vars:  none\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{jira_endpoint}@@\"\njira_login = \"@@{jira.username}@@\"\njira_api_token = \"@@{jira.secret}@@\"\njira_link_type = \"@@{jira_link_type}@@\" #10003 = relates to\njira_parent_ticket = \"@@{jira_parent_ticket}@@\"\njira_child_ticket = \"@@{jira_child_ticket}@@\"\n# endregion\n\n# region prepare api call\napi_server_port = \"443\"\napi_server_endpoint = \"/rest/api/3/issueLink\"\nurl = \"https://{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n}\n\nlink_payload = {\n    \"outwardIssue\": {\n        \"key\": jira_child_ticket\n    },\n    \"inwardIssue\": {\n        \"key\": jira_parent_ticket\n    },\n    \"type\": {\n        \"id\": jira_link_type\n    }\n}\n\n# endregion\n\n# region make api call\n# make the API call and capture the results in the variable called \"resp\"\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(url, verb=method, params=json.dumps(link_payload),\\\n              auth='BASIC', user=jira_login, passwd=jira_api_token, headers=headers,\\\n              verify=False\n             )\n\nprint(resp)\n\n# deal with the result/response\nif resp.ok:\n    print(\"Request was successful. Status code: {}\".format(resp.status_code))    \n    \nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(resp.content))\n    exit(1)\n# endregion\n",
                      "type": "",
                      "command_line_args": "",
                      "exit_status": "",
                      "script_type": "static"
                    },
                    "timeout_secs": "0",
                    "type": "EXEC",
                    "variable_list": []
                  }
                ],
                "description": "",
                "name": "ab6f61cd_runbook_cloned_0",
                "main_task_local_reference": {
                  "kind": "app_task",
                  "name": "ecb3e0ba_dag_cloned_1"
                },
                "variable_list": []
              },
              "name": "Take Backup"
            }
          ],
          "name": "Default_VMW",
          "restore_config_list": [],
          "snapshot_config_list": [],
          "patch_list": [],
          "variable_list": [
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "vc_public_network",
              "value": "DHCP",
              "label": "Public vSphere Portgroup",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "DHCP",
                  "VM Network"
                ]
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "vc_mgmt_network",
              "value": "DHCP",
              "label": "Management vSphere Portgroup",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "DHCP",
                  "VM Network"
                ]
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": true,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "source_app",
              "value": "WWW",
              "label": "Which application to install?",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "WWW",
                  "CMS",
                  "SFTP",
                  "Captive2 Server",
                  "Virgin API Server",
                  "Logstash",
                  "Identity Server",
                  "Support Manager",
                  "Radius",
                  "Captive Manager Server",
                  "Policy Manager Master & Slave"
                ]
              }
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^.*$"
              },
              "val_type": "STRING",
              "is_mandatory": true,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "app_prefix",
              "value": "entbase",
              "label": "What is the application prefix?",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "entbase"
                ]
              }
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^[\\d]*$"
              },
              "val_type": "INT",
              "is_mandatory": true,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "instance_count",
              "value": "1",
              "label": "How many instance to deploy?",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "f5_endpoint",
              "value": "10.68.99.208",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "f5_enabled",
              "value": "yes",
              "label": "Virtual server",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "yes",
                  "no"
                ]
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "HTTP_LOCAL",
              "name": "eip_f5_subnet",
              "value": "",
              "label": "Virtual Server F5 Network",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "options": {
                "type": "HTTP",
                "attrs": {
                  "expected_response_params": [
                    {
                      "status": "SUCCESS",
                      "code": 200,
                      "type": ""
                    }
                  ],
                  "request_body": "",
                  "headers": [],
                  "url": "https://10.68.99.162/rest/ip_block_subnet_list?WHERE=parent_site_name='EMEAGSO'&WHERE=is_terminal='1'",
                  "response_paths": {
                    "eip_f5_subnet": "$.subnet_name"
                  },
                  "retry_interval": 1,
                  "method": "GET",
                  "retry_count": 1,
                  "authentication": {
                    "type": "basic_with_cred",
                    "credential_local_reference": {
                      "kind": "app_credential",
                      "name": "eip"
                    }
                  },
                  "tls_verify": false,
                  "content_type": "application/json",
                  "connection_timeout": 120,
                  "type": "HTTP",
                  "proxy_type": ""
                }
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "eip_endpoint",
              "value": "10.68.99.162",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "eip_site_name",
              "value": "EMEAGSO",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "eip_dns_zone",
              "value": "eip_dns_zone",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "HTTP_LOCAL",
              "name": "eip_public_subnet",
              "value": "",
              "label": "Public Network",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "options": {
                "type": "HTTP",
                "attrs": {
                  "expected_response_params": [
                    {
                      "status": "SUCCESS",
                      "code": 200,
                      "type": ""
                    }
                  ],
                  "request_body": "",
                  "headers": [],
                  "url": "https://10.68.99.162/rest/ip_block_subnet_list?WHERE=parent_site_name='EMEAGSO'&WHERE=is_terminal='1'",
                  "response_paths": {
                    "eip_public_subnet": "$.subnet_name"
                  },
                  "retry_interval": 1,
                  "method": "GET",
                  "retry_count": 1,
                  "authentication": {
                    "type": "basic_with_cred",
                    "credential_local_reference": {
                      "kind": "app_credential",
                      "name": "eip"
                    }
                  },
                  "tls_verify": false,
                  "content_type": "application/json",
                  "connection_timeout": 120,
                  "type": "HTTP",
                  "proxy_type": ""
                }
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "HTTP_LOCAL",
              "name": "eip_mgmt_subnet",
              "value": "",
              "label": "Management Network",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "options": {
                "type": "HTTP",
                "attrs": {
                  "expected_response_params": [
                    {
                      "status": "SUCCESS",
                      "code": 200,
                      "type": ""
                    }
                  ],
                  "request_body": "",
                  "headers": [],
                  "url": "https://10.68.99.162/rest/ip_block_subnet_list?WHERE=parent_site_name='EMEAGSO'&WHERE=is_terminal='1'",
                  "response_paths": {
                    "eip_mgmt_subnet": "$.subnet_name"
                  },
                  "retry_interval": 1,
                  "method": "GET",
                  "retry_count": 1,
                  "authentication": {
                    "type": "basic_with_cred",
                    "credential_local_reference": {
                      "kind": "app_credential",
                      "name": "eip"
                    }
                  },
                  "tls_verify": false,
                  "content_type": "application/json",
                  "connection_timeout": 120,
                  "type": "HTTP",
                  "proxy_type": ""
                }
              }
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^[\\d]*$"
              },
              "val_type": "INT",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "eip_min_free_ip",
              "value": "4",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "vc_datacenter",
              "value": "GSO",
              "label": "Datacenter?",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "GSO"
                ]
              }
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^.*$"
              },
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "vc_cluster",
              "value": "ROCKET",
              "label": "Cluster?",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "ROCKET"
                ]
              }
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^.*$"
              },
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "EXEC_LOCAL",
              "library_reference": "2f04a001-f227-483e-9eb8-eba2b46ba16f",
              "name": "target_app",
              "value": "",
              "label": "Which application to replace?",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "options": {
                "type": "EXEC",
                "attrs": {
                  "script": "# region headers\n# escript-template v20190605 / stephane.bourdeaud@nutanix.com\n# * author:       stephane.bourdeaud@nutanix.com\n# * version:      2020/01/22\n# task_name:      CalmGetApp\n# description:    This script gets the list of application instances from Calm.\n# TODO: test\n# endregion\n\n# region capture Calm macros\npc_ip = '@@{prism_ip}@@'\nusername = '@@{prism_username}@@'\nusername_secret = '@@{prism_secret}@@'\n# endregion\n\n# region prepare variables\nheaders = {'content-type': 'application/json'}\n# endregion\n\n# region REST call: Get Apps\nmethod = 'POST'\nurl = \"https://{}:9440/api/nutanix/v3/apps/list\".format(pc_ip)\npayload = {\n    \"kind\": \"app\",\n    \"length\": 250\n}\n#print(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    params=json.dumps(payload),\n    headers=headers,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    verify=False\n)\n\nif resp.ok:\n    json_resp = json.loads(resp.content)\n    if json_resp['metadata']['total_matches'] > 0:\n        apps_list = []\n        for app in json_resp['entities']:\n            apps_list.append(app['metadata']['name'])\n        print(\",\".join(apps_list))\n    else:\n        print(\"Could not find any apps.\")\n        exit(1)\n    exit(0)\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion",
                  "type": "EXEC",
                  "command_line_args": "",
                  "exit_status": [],
                  "script_type": "static"
                }
              }
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^.*$"
              },
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "LIST",
              "type": "EXEC_LOCAL",
              "name": "fortigate_policy",
              "value": "",
              "label": "What firewall policy you would like to apply?",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "options": {
                "type": "EXEC",
                "attrs": {
                  "script": "# region headers\n# * author:     salaheddine.gassim@nutanix.com\n# * version:    v1.0/03032020 - initial version\n# task_name:    FortigateListAllPolicies\n# description:  List all Fortigate policies\n# input vars:   fortigate cookie and csrf token\n# output vars:  fortigate_policy_id, fortigate_policy_name\n# endregion\n\n# region capture Calm variables\napi_server = \"@@{fortigate_endpoint}@@\"\nfortigate_login = \"@@{fortigate_username}@@\"\nfortigate_password = \"@@{fortigate_password}@@\"\napi_server_port = 80\nfortigate_vdom = \"@@{fortigate_vdom}@@\"\n# endregion\n\ndef fortiget_get_cookie(api_server, api_server_port, fortigate_login, fortigate_password):\n    \n    # region prepare api call\n    api_server_endpoint = \"/logincheck\"\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"POST\"\n    headers = {\n        'Accept': 'text/plain'\n    }\n    auth_payload = \"username=\" + fortigate_login + \"&secretkey=\" + fortigate_password\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    #print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, params=auth_payload,\n                headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        #print(\"Successfully authenticated\")\n        my_cookie = resp.cookies.get_dict()\n        return resp.cookies.get('ccsrftoken'), my_cookie\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n\ndef fortiget_get_policies(api_server, api_server_port, fortigate_csrf_token, fortigate_cookie, vdom=\"root\"):\n    \n    # region prepare api call\n    api_server_endpoint = \"/api/v2/cmdb/firewall/policy/?format=policyid|name&skip=1&vdom=\" + vdom\n    url = \"http://{}:{}{}\".format(\n        api_server,\n        api_server_port,\n        api_server_endpoint\n    )\n    method = \"GET\"\n    headers = {\n        'Accept': 'application/json'\n    }\n    # endregion\n\n    # region make api call\n    # make the API call and capture the results in the variable called \"resp\"\n    #print(\"Making a {} API call to {}\".format(method, url))\n    resp = urlreq(url, verb=method, cookies=fortigate_cookie, headers=headers, verify=False)\n\n    # deal with the result/response\n    if resp.ok:\n        policies_list = []\n        #print(\"Request was successful. Status code: {}\".format(resp.status_code))\n        result = json.loads(resp.content)\n        for policy in result['results']:\n            policies_list.append(str(policy['policyid']) + \"-\" + str(policy['name']))\n            #print(\"{}-{}\".format(policy['policyid'],policy['name']))\n        print(\",\".join(policies_list))\n    else:\n        print(\"Request failed\")\n        print(\"Headers: {}\".format(headers))\n        print('Status code: {}'.format(resp.status_code))\n        print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n        exit(1)\n    # endregion\n    \n\nfortigate_csrf_token, fortigate_cookie = fortiget_get_cookie(api_server,\n                                                             api_server_port, fortigate_login, fortigate_password)\nfortiget_get_policies(api_server, api_server_port, fortigate_csrf_token,\n                      fortigate_cookie, fortigate_vdom)\n",
                  "type": "EXEC",
                  "command_line_args": "",
                  "exit_status": [],
                  "script_type": "static"
                }
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "veeam_repo_name",
              "value": "Backups",
              "label": "Backup Repository?",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "Backups",
                  "Archive"
                ]
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "veeam_job_daily_schedule",
              "value": "22:00",
              "label": "Backup Schedule?",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": true
              },
              "is_hidden": false,
              "options": {
                "type": "PREDEFINED",
                "choices": [
                  "22:00",
                  "12:00"
                ]
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "fortigate_username",
              "value": "admin",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "fortigate_password",
              "value": "nutanix/4u",
              "label": "",
              "attrs": {
                "type": "LOCAL"
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^.*$"
              },
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "fortigate_vdom",
              "value": "root",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "fortigate_endpoint",
              "value": "10.68.99.222",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "jenkins_endpoint",
              "value": "10.68.99.210",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "jenkins_ip",
              "value": "10.68.99.210",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "SECRET",
              "name": "ansible_public_key",
              "value": "",
              "label": "",
              "attrs": {
                "is_secret_modified": false,
                "secret_reference": {},
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "awx_ip",
              "value": "10.68.99.210",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "jira_parent_ticket",
              "value": "",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "jira_endpoint",
              "value": "o2channels.atlassian.net",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "regex": {
                "should_validate": false,
                "value": "^[\\d]*$"
              },
              "val_type": "INT",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "jira_link_type",
              "value": "10003",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "jira_project_name",
              "value": "WIFICALM",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "prism_username",
              "value": "salah.gassim@emeagso.lab",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "prism_secret",
              "value": "nutanix/4u",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            },
            {
              "val_type": "STRING",
              "is_mandatory": false,
              "description": "",
              "data_type": "BASE",
              "type": "LOCAL",
              "name": "prism_ip",
              "value": "10.68.97.150",
              "label": "",
              "attrs": {
                "type": ""
              },
              "editables": {
                "value": false
              },
              "is_hidden": true,
              "options": {
                "type": "PREDEFINED",
                "choices": []
              }
            }
          ]
        }
      ],
      "published_service_definition_list": [],
      "default_credential_local_reference": {
        "kind": "app_credential",
        "name": "awx"
      },
      "type": "USER"
    },
    "name": "TelefonicaDemo-3"
  },
  "api_version": "3.0",
  "metadata": {
    "last_update_time": "1620237439084529",
    "kind": "blueprint",
    "spec_version": 30,
    "creation_time": "1585660942998281",
    "name": "TelefonicaDemo-3"
  }
}
